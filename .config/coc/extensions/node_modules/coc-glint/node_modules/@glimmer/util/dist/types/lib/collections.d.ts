import { Dict, NonemptyStack, Option, Stack } from '@glimmer/interfaces';
import { HasGuid } from './guid';
export interface Set<T> {
    add(value: T): Set<T>;
    delete(value: T): void;
}
export declare function dict<T = unknown>(): Dict<T>;
export declare function isDict<T>(u: T): u is Dict & T;
export declare function isObject<T>(u: T): u is object & T;
export declare type SetMember = HasGuid | string;
export declare class DictSet<T extends SetMember> implements Set<T> {
    private dict;
    constructor();
    add(obj: T): Set<T>;
    delete(obj: T): void;
}
export declare class StackImpl<T> implements Stack<T> {
    private stack;
    current: Option<T>;
    constructor(values?: T[]);
    get size(): number;
    push(item: T): void;
    pop(): Option<T>;
    nth(from: number): Option<T>;
    isEmpty(): boolean;
    toArray(): T[];
}
export declare class NonemptyStackImpl<T> implements NonemptyStack<T> {
    private stack;
    current: T;
    constructor(values: [T, ...T[]]);
    get size(): number;
    push(item: T): void;
    pop(): T;
    nth(from: 0): T;
    nth(from: number): Option<T>;
    nthBack(from: number): Option<T>;
    toArray(): [T, ...T[]];
}
//# sourceMappingURL=collections.d.ts.map