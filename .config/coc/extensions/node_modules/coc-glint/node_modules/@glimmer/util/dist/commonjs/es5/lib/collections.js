"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dict = dict;
exports.isDict = isDict;
exports.isObject = isObject;
exports.NonemptyStackImpl = exports.StackImpl = exports.DictSet = void 0;

var _guid = require("./guid");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function dict() {
  return Object.create(null);
}

function isDict(u) {
  return u !== null && u !== undefined;
}

function isObject(u) {
  return typeof u === 'object' && u !== null;
}

var DictSet = /*#__PURE__*/function () {
  function DictSet() {
    this.dict = dict();
  }

  var _proto = DictSet.prototype;

  _proto.add = function add(obj) {
    if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[(0, _guid.ensureGuid)(obj)] = obj;
    return this;
  };

  _proto["delete"] = function _delete(obj) {
    if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];
  };

  return DictSet;
}();

exports.DictSet = DictSet;

var StackImpl = /*#__PURE__*/function () {
  function StackImpl(values) {
    if (values === void 0) {
      values = [];
    }

    this.current = null;
    this.stack = values;
  }

  var _proto2 = StackImpl.prototype;

  _proto2.push = function push(item) {
    this.current = item;
    this.stack.push(item);
  };

  _proto2.pop = function pop() {
    var item = this.stack.pop();
    var len = this.stack.length;
    this.current = len === 0 ? null : this.stack[len - 1];
    return item === undefined ? null : item;
  };

  _proto2.nth = function nth(from) {
    var len = this.stack.length;
    return len < from ? null : this.stack[len - from];
  };

  _proto2.isEmpty = function isEmpty() {
    return this.stack.length === 0;
  };

  _proto2.toArray = function toArray() {
    return this.stack;
  };

  _createClass(StackImpl, [{
    key: "size",
    get: function get() {
      return this.stack.length;
    }
  }]);

  return StackImpl;
}();

exports.StackImpl = StackImpl;

var NonemptyStackImpl = /*#__PURE__*/function () {
  function NonemptyStackImpl(values) {
    this.stack = values;
    this.current = values[values.length - 1];
  }

  var _proto3 = NonemptyStackImpl.prototype;

  _proto3.push = function push(item) {
    this.current = item;
    this.stack.push(item);
  };

  _proto3.pop = function pop() {
    if (this.stack.length === 1) {
      throw new Error("cannot pop the last element of a NonemptyStack");
    }

    var item = this.stack.pop();
    var len = this.stack.length;
    this.current = this.stack[len - 1];
    return item;
  };

  _proto3.nth = function nth(from) {
    var len = this.stack.length;
    return from >= len ? null : this.stack[from];
  };

  _proto3.nthBack = function nthBack(from) {
    var len = this.stack.length;
    return len < from ? null : this.stack[len - from];
  };

  _proto3.toArray = function toArray() {
    return this.stack;
  };

  _createClass(NonemptyStackImpl, [{
    key: "size",
    get: function get() {
      return this.stack.length;
    }
  }]);

  return NonemptyStackImpl;
}();

exports.NonemptyStackImpl = NonemptyStackImpl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,