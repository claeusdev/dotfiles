import { ensureGuid } from './guid';
export function dict() {
  return Object.create(null);
}
export function isDict(u) {
  return u !== null && u !== undefined;
}
export function isObject(u) {
  return typeof u === 'object' && u !== null;
}
export class DictSet {
  constructor() {
    this.dict = dict();
  }

  add(obj) {
    if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[ensureGuid(obj)] = obj;
    return this;
  }

  delete(obj) {
    if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];
  }

}
export class StackImpl {
  constructor(values = []) {
    this.current = null;
    this.stack = values;
  }

  get size() {
    return this.stack.length;
  }

  push(item) {
    this.current = item;
    this.stack.push(item);
  }

  pop() {
    let item = this.stack.pop();
    let len = this.stack.length;
    this.current = len === 0 ? null : this.stack[len - 1];
    return item === undefined ? null : item;
  }

  nth(from) {
    let len = this.stack.length;
    return len < from ? null : this.stack[len - from];
  }

  isEmpty() {
    return this.stack.length === 0;
  }

  toArray() {
    return this.stack;
  }

}
export class NonemptyStackImpl {
  constructor(values) {
    this.stack = values;
    this.current = values[values.length - 1];
  }

  get size() {
    return this.stack.length;
  }

  push(item) {
    this.current = item;
    this.stack.push(item);
  }

  pop() {
    if (this.stack.length === 1) {
      throw new Error(`cannot pop the last element of a NonemptyStack`);
    }

    let item = this.stack.pop();
    let len = this.stack.length;
    this.current = this.stack[len - 1];
    return item;
  }

  nth(from) {
    let len = this.stack.length;
    return from >= len ? null : this.stack[from];
  }

  nthBack(from) {
    let len = this.stack.length;
    return len < from ? null : this.stack[len - from];
  }

  toArray() {
    return this.stack;
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvbGliL2NvbGxlY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLFNBQVMsVUFBVCxRQUFvQyxRQUFwQztBQU9BLE9BQU0sU0FBVSxJQUFWLEdBQWM7QUFDbEIsU0FBTyxNQUFNLENBQUMsTUFBUCxDQUFjLElBQWQsQ0FBUDtBQUNEO0FBRUQsT0FBTSxTQUFVLE1BQVYsQ0FBb0IsQ0FBcEIsRUFBd0I7QUFDNUIsU0FBTyxDQUFDLEtBQUssSUFBTixJQUFjLENBQUMsS0FBSyxTQUEzQjtBQUNEO0FBRUQsT0FBTSxTQUFVLFFBQVYsQ0FBc0IsQ0FBdEIsRUFBMEI7QUFDOUIsU0FBTyxPQUFPLENBQVAsS0FBYSxRQUFiLElBQXlCLENBQUMsS0FBSyxJQUF0QztBQUNEO0FBSUQsT0FBTSxNQUFPLE9BQVAsQ0FBYztBQUdsQixFQUFBLFdBQUEsR0FBQTtBQUNFLFNBQUssSUFBTCxHQUFZLElBQUksRUFBaEI7QUFDRDs7QUFFRCxFQUFBLEdBQUcsQ0FBQyxHQUFELEVBQU87QUFDUixRQUFJLE9BQU8sR0FBUCxLQUFlLFFBQW5CLEVBQTZCLEtBQUssSUFBTCxDQUFVLEdBQVYsSUFBd0IsR0FBeEIsQ0FBN0IsS0FDSyxLQUFLLElBQUwsQ0FBVSxVQUFVLENBQUMsR0FBRCxDQUFwQixJQUFvQyxHQUFwQztBQUNMLFdBQU8sSUFBUDtBQUNEOztBQUVELEVBQUEsTUFBTSxDQUFDLEdBQUQsRUFBTztBQUNYLFFBQUksT0FBTyxHQUFQLEtBQWUsUUFBbkIsRUFBNkIsT0FBTyxLQUFLLElBQUwsQ0FBVSxHQUFWLENBQVAsQ0FBN0IsS0FDSyxJQUFLLEdBQVcsQ0FBQyxLQUFqQixFQUF3QixPQUFPLEtBQUssSUFBTCxDQUFXLEdBQVcsQ0FBQyxLQUF2QixDQUFQO0FBQzlCOztBQWhCaUI7QUFtQnBCLE9BQU0sTUFBTyxTQUFQLENBQWdCO0FBSXBCLEVBQUEsV0FBQSxDQUFZLE1BQUEsR0FBYyxFQUExQixFQUE0QjtBQUZyQixTQUFBLE9BQUEsR0FBcUIsSUFBckI7QUFHTCxTQUFLLEtBQUwsR0FBYSxNQUFiO0FBQ0Q7O0FBRUQsTUFBVyxJQUFYLEdBQWU7QUFDYixXQUFPLEtBQUssS0FBTCxDQUFXLE1BQWxCO0FBQ0Q7O0FBRUQsRUFBQSxJQUFJLENBQUMsSUFBRCxFQUFRO0FBQ1YsU0FBSyxPQUFMLEdBQWUsSUFBZjtBQUNBLFNBQUssS0FBTCxDQUFXLElBQVgsQ0FBZ0IsSUFBaEI7QUFDRDs7QUFFRCxFQUFBLEdBQUcsR0FBQTtBQUNELFFBQUksSUFBSSxHQUFHLEtBQUssS0FBTCxDQUFXLEdBQVgsRUFBWDtBQUNBLFFBQUksR0FBRyxHQUFHLEtBQUssS0FBTCxDQUFXLE1BQXJCO0FBQ0EsU0FBSyxPQUFMLEdBQWUsR0FBRyxLQUFLLENBQVIsR0FBWSxJQUFaLEdBQW1CLEtBQUssS0FBTCxDQUFXLEdBQUcsR0FBRyxDQUFqQixDQUFsQztBQUVBLFdBQU8sSUFBSSxLQUFLLFNBQVQsR0FBcUIsSUFBckIsR0FBNEIsSUFBbkM7QUFDRDs7QUFFRCxFQUFBLEdBQUcsQ0FBQyxJQUFELEVBQWE7QUFDZCxRQUFJLEdBQUcsR0FBRyxLQUFLLEtBQUwsQ0FBVyxNQUFyQjtBQUNBLFdBQU8sR0FBRyxHQUFHLElBQU4sR0FBYSxJQUFiLEdBQW9CLEtBQUssS0FBTCxDQUFXLEdBQUcsR0FBRyxJQUFqQixDQUEzQjtBQUNEOztBQUVELEVBQUEsT0FBTyxHQUFBO0FBQ0wsV0FBTyxLQUFLLEtBQUwsQ0FBVyxNQUFYLEtBQXNCLENBQTdCO0FBQ0Q7O0FBRUQsRUFBQSxPQUFPLEdBQUE7QUFDTCxXQUFPLEtBQUssS0FBWjtBQUNEOztBQXBDbUI7QUF1Q3RCLE9BQU0sTUFBTyxpQkFBUCxDQUF3QjtBQUk1QixFQUFBLFdBQUEsQ0FBWSxNQUFaLEVBQStCO0FBQzdCLFNBQUssS0FBTCxHQUFhLE1BQWI7QUFDQSxTQUFLLE9BQUwsR0FBZSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsQ0FBakIsQ0FBckI7QUFDRDs7QUFFRCxNQUFXLElBQVgsR0FBZTtBQUNiLFdBQU8sS0FBSyxLQUFMLENBQVcsTUFBbEI7QUFDRDs7QUFFRCxFQUFBLElBQUksQ0FBQyxJQUFELEVBQVE7QUFDVixTQUFLLE9BQUwsR0FBZSxJQUFmO0FBQ0EsU0FBSyxLQUFMLENBQVcsSUFBWCxDQUFnQixJQUFoQjtBQUNEOztBQUVELEVBQUEsR0FBRyxHQUFBO0FBQ0QsUUFBSSxLQUFLLEtBQUwsQ0FBVyxNQUFYLEtBQXNCLENBQTFCLEVBQTZCO0FBQzNCLFlBQU0sSUFBSSxLQUFKLENBQVUsZ0RBQVYsQ0FBTjtBQUNEOztBQUVELFFBQUksSUFBSSxHQUFHLEtBQUssS0FBTCxDQUFXLEdBQVgsRUFBWDtBQUNBLFFBQUksR0FBRyxHQUFHLEtBQUssS0FBTCxDQUFXLE1BQXJCO0FBQ0EsU0FBSyxPQUFMLEdBQWUsS0FBSyxLQUFMLENBQVcsR0FBRyxHQUFHLENBQWpCLENBQWY7QUFFQSxXQUFPLElBQVA7QUFDRDs7QUFJRCxFQUFBLEdBQUcsQ0FBQyxJQUFELEVBQWE7QUFDZCxRQUFJLEdBQUcsR0FBRyxLQUFLLEtBQUwsQ0FBVyxNQUFyQjtBQUNBLFdBQU8sSUFBSSxJQUFJLEdBQVIsR0FBYyxJQUFkLEdBQXFCLEtBQUssS0FBTCxDQUFXLElBQVgsQ0FBNUI7QUFDRDs7QUFFRCxFQUFBLE9BQU8sQ0FBQyxJQUFELEVBQWE7QUFDbEIsUUFBSSxHQUFHLEdBQUcsS0FBSyxLQUFMLENBQVcsTUFBckI7QUFDQSxXQUFPLEdBQUcsR0FBRyxJQUFOLEdBQWEsSUFBYixHQUFvQixLQUFLLEtBQUwsQ0FBVyxHQUFHLEdBQUcsSUFBakIsQ0FBM0I7QUFDRDs7QUFFRCxFQUFBLE9BQU8sR0FBQTtBQUNMLFdBQU8sS0FBSyxLQUFaO0FBQ0Q7O0FBNUMyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpY3QsIE5vbmVtcHR5U3RhY2ssIE9wdGlvbiwgU3RhY2sgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IGVuc3VyZUd1aWQsIEhhc0d1aWQgfSBmcm9tICcuL2d1aWQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNldDxUPiB7XG4gIGFkZCh2YWx1ZTogVCk6IFNldDxUPjtcbiAgZGVsZXRlKHZhbHVlOiBUKTogdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpY3Q8VCA9IHVua25vd24+KCk6IERpY3Q8VD4ge1xuICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGljdDxUPih1OiBUKTogdSBpcyBEaWN0ICYgVCB7XG4gIHJldHVybiB1ICE9PSBudWxsICYmIHUgIT09IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0PFQ+KHU6IFQpOiB1IGlzIG9iamVjdCAmIFQge1xuICByZXR1cm4gdHlwZW9mIHUgPT09ICdvYmplY3QnICYmIHUgIT09IG51bGw7XG59XG5cbmV4cG9ydCB0eXBlIFNldE1lbWJlciA9IEhhc0d1aWQgfCBzdHJpbmc7XG5cbmV4cG9ydCBjbGFzcyBEaWN0U2V0PFQgZXh0ZW5kcyBTZXRNZW1iZXI+IGltcGxlbWVudHMgU2V0PFQ+IHtcbiAgcHJpdmF0ZSBkaWN0OiBEaWN0PFQ+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZGljdCA9IGRpY3Q8VD4oKTtcbiAgfVxuXG4gIGFkZChvYmo6IFQpOiBTZXQ8VD4ge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykgdGhpcy5kaWN0W29iaiBhcyBhbnldID0gb2JqO1xuICAgIGVsc2UgdGhpcy5kaWN0W2Vuc3VyZUd1aWQob2JqIGFzIGFueSldID0gb2JqO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGVsZXRlKG9iajogVCkge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykgZGVsZXRlIHRoaXMuZGljdFtvYmogYXMgYW55XTtcbiAgICBlbHNlIGlmICgob2JqIGFzIGFueSkuX2d1aWQpIGRlbGV0ZSB0aGlzLmRpY3RbKG9iaiBhcyBhbnkpLl9ndWlkXTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhY2tJbXBsPFQ+IGltcGxlbWVudHMgU3RhY2s8VD4ge1xuICBwcml2YXRlIHN0YWNrOiBUW107XG4gIHB1YmxpYyBjdXJyZW50OiBPcHRpb248VD4gPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHZhbHVlczogVFtdID0gW10pIHtcbiAgICB0aGlzLnN0YWNrID0gdmFsdWVzO1xuICB9XG5cbiAgcHVibGljIGdldCBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLnN0YWNrLmxlbmd0aDtcbiAgfVxuXG4gIHB1c2goaXRlbTogVCkge1xuICAgIHRoaXMuY3VycmVudCA9IGl0ZW07XG4gICAgdGhpcy5zdGFjay5wdXNoKGl0ZW0pO1xuICB9XG5cbiAgcG9wKCk6IE9wdGlvbjxUPiB7XG4gICAgbGV0IGl0ZW0gPSB0aGlzLnN0YWNrLnBvcCgpO1xuICAgIGxldCBsZW4gPSB0aGlzLnN0YWNrLmxlbmd0aDtcbiAgICB0aGlzLmN1cnJlbnQgPSBsZW4gPT09IDAgPyBudWxsIDogdGhpcy5zdGFja1tsZW4gLSAxXTtcblxuICAgIHJldHVybiBpdGVtID09PSB1bmRlZmluZWQgPyBudWxsIDogaXRlbTtcbiAgfVxuXG4gIG50aChmcm9tOiBudW1iZXIpOiBPcHRpb248VD4ge1xuICAgIGxldCBsZW4gPSB0aGlzLnN0YWNrLmxlbmd0aDtcbiAgICByZXR1cm4gbGVuIDwgZnJvbSA/IG51bGwgOiB0aGlzLnN0YWNrW2xlbiAtIGZyb21dO1xuICB9XG5cbiAgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGFjay5sZW5ndGggPT09IDA7XG4gIH1cblxuICB0b0FycmF5KCk6IFRbXSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhY2s7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5vbmVtcHR5U3RhY2tJbXBsPFQ+IGltcGxlbWVudHMgTm9uZW1wdHlTdGFjazxUPiB7XG4gIHByaXZhdGUgc3RhY2s6IFtULCAuLi5UW11dO1xuICBwdWJsaWMgY3VycmVudDogVDtcblxuICBjb25zdHJ1Y3Rvcih2YWx1ZXM6IFtULCAuLi5UW11dKSB7XG4gICAgdGhpcy5zdGFjayA9IHZhbHVlcztcbiAgICB0aGlzLmN1cnJlbnQgPSB2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgcHVibGljIGdldCBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLnN0YWNrLmxlbmd0aDtcbiAgfVxuXG4gIHB1c2goaXRlbTogVCkge1xuICAgIHRoaXMuY3VycmVudCA9IGl0ZW07XG4gICAgdGhpcy5zdGFjay5wdXNoKGl0ZW0pO1xuICB9XG5cbiAgcG9wKCk6IFQge1xuICAgIGlmICh0aGlzLnN0YWNrLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgcG9wIHRoZSBsYXN0IGVsZW1lbnQgb2YgYSBOb25lbXB0eVN0YWNrYCk7XG4gICAgfVxuXG4gICAgbGV0IGl0ZW0gPSB0aGlzLnN0YWNrLnBvcCgpITtcbiAgICBsZXQgbGVuID0gdGhpcy5zdGFjay5sZW5ndGg7XG4gICAgdGhpcy5jdXJyZW50ID0gdGhpcy5zdGFja1tsZW4gLSAxXTtcblxuICAgIHJldHVybiBpdGVtO1xuICB9XG5cbiAgbnRoKGZyb206IDApOiBUO1xuICBudGgoZnJvbTogbnVtYmVyKTogT3B0aW9uPFQ+O1xuICBudGgoZnJvbTogbnVtYmVyKTogT3B0aW9uPFQ+IHtcbiAgICBsZXQgbGVuID0gdGhpcy5zdGFjay5sZW5ndGg7XG4gICAgcmV0dXJuIGZyb20gPj0gbGVuID8gbnVsbCA6IHRoaXMuc3RhY2tbZnJvbV07XG4gIH1cblxuICBudGhCYWNrKGZyb206IG51bWJlcik6IE9wdGlvbjxUPiB7XG4gICAgbGV0IGxlbiA9IHRoaXMuc3RhY2subGVuZ3RoO1xuICAgIHJldHVybiBsZW4gPCBmcm9tID8gbnVsbCA6IHRoaXMuc3RhY2tbbGVuIC0gZnJvbV07XG4gIH1cblxuICB0b0FycmF5KCk6IFtULCAuLi5UW11dIHtcbiAgICByZXR1cm4gdGhpcy5zdGFjaztcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==