function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

export function node(name) {
  if (name !== undefined) {
    var type = name;
    return {
      fields: function fields() {
        return /*#__PURE__*/function () {
          function _class(fields) {
            this.type = type;
            this.loc = fields.loc;
            copy(fields, this);
          }

          return _class;
        }();
      }
    };
  } else {
    return {
      fields: function fields() {
        return /*#__PURE__*/function () {
          function _class2(fields) {
            this.loc = fields.loc;
            copy(fields, this);
          }

          return _class2;
        }();
      }
    };
  }
}

function keys(object) {
  return Object.keys(object);
}

function copy(object1, object2) {
  for (var _iterator = _createForOfIteratorHelperLoose(keys(object1)), _step; !(_step = _iterator()).done;) {
    var key = _step.value;
    object2[key] = object1[key];
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdjItYS9vYmplY3RzL25vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBMENBLE9BQU0sU0FBQSxJQUFBLENBQUEsSUFBQSxFQUNJO0FBUVIsTUFBSSxJQUFJLEtBQVIsU0FBQSxFQUF3QjtBQUN0QixRQUFNLElBQUksR0FBVixJQUFBO0FBQ0EsV0FBTztBQUNMLE1BQUEsTUFESyxvQkFDQztBQUNKO0FBSUUsMEJBQUEsTUFBQSxFQUEyQztBQUN6QyxpQkFBQSxJQUFBLEdBQUEsSUFBQTtBQUNBLGlCQUFBLEdBQUEsR0FBVyxNQUFNLENBQWpCLEdBQUE7QUFDQSxZQUFBLElBQUksQ0FBQSxNQUFBLEVBQUosSUFBSSxDQUFKO0FBQ0Q7O0FBUkg7QUFBQTtBQVVEO0FBWkksS0FBUDtBQUZGLEdBQUEsTUFnQk87QUFDTCxXQUFPO0FBQ0wsTUFBQSxNQURLLG9CQUNDO0FBQ0o7QUFHRSwyQkFBQSxNQUFBLEVBQTJDO0FBQ3pDLGlCQUFBLEdBQUEsR0FBVyxNQUFNLENBQWpCLEdBQUE7QUFFQSxZQUFBLElBQUksQ0FBQSxNQUFBLEVBQUosSUFBSSxDQUFKO0FBQ0Q7O0FBUEg7QUFBQTtBQVNEO0FBWEksS0FBUDtBQWFEO0FBQ0Y7O0FBZ0JELFNBQUEsSUFBQSxDQUFBLE1BQUEsRUFBeUM7QUFDdkMsU0FBTyxNQUFNLENBQU4sSUFBQSxDQUFQLE1BQU8sQ0FBUDtBQUNEOztBQUVELFNBQUEsSUFBQSxDQUFBLE9BQUEsRUFBQSxPQUFBLEVBQXNEO0FBQ3BELHVEQUFnQixJQUFJLENBQXBCLE9BQW9CLENBQXBCLHdDQUErQjtBQUFBLFFBQS9CLEdBQStCO0FBQzdCLElBQUEsT0FBTyxDQUFQLEdBQU8sQ0FBUCxHQUFlLE9BQU8sQ0FBdEIsR0FBc0IsQ0FBdEI7QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU291cmNlU3BhbiB9IGZyb20gJy4uLy4uL3NvdXJjZS9zcGFuJztcblxuZXhwb3J0IGludGVyZmFjZSBCYXNlTm9kZUZpZWxkcyB7XG4gIGxvYzogU291cmNlU3Bhbjtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGEgY29udmVuaWVuY2UgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIEFTVHYyIG5vZGVzLCB3aXRoIGFuIG9wdGlvbmFsIG5hbWUgYW5kIHRoZSBub2RlJ3NcbiAqIG9wdGlvbnMuXG4gKlxuICogYGBgdHNcbiAqIGV4cG9ydCBjbGFzcyBIdG1sVGV4dCBleHRlbmRzIG5vZGUoJ0h0bWxUZXh0JykuZmllbGRzPHsgY2hhcnM6IHN0cmluZyB9PigpIHt9XG4gKiBgYGBcbiAqXG4gKiBUaGlzIGNyZWF0ZXMgYSBuZXcgQVNUdjIgbm9kZSB3aXRoIHRoZSBuYW1lIGAnSHRtbFRleHQnYCBhbmQgb25lIGZpZWxkIGBjaGFyczogc3RyaW5nYCAoaW5cbiAqIGFkZGl0aW9uIHRvIGEgYGxvYzogU291cmNlT2Zmc2V0c2AgZmllbGQsIHdoaWNoIGFsbCBub2RlcyBoYXZlKS5cbiAqXG4gKiBgYGB0c1xuICogZXhwb3J0IGNsYXNzIEFyZ3MgZXh0ZW5kcyBub2RlKCkuZmllbGRzPHtcbiAqICBwb3NpdGlvbmFsOiBQb3NpdGlvbmFsQXJndW1lbnRzO1xuICogIG5hbWVkOiBOYW1lZEFyZ3VtZW50c1xuICogfT4oKSB7fVxuICogYGBgXG4gKlxuICogVGhpcyBjcmVhdGVzIGEgbmV3IHVuLW5hbWVkIEFTVHYyIG5vZGUgd2l0aCB0d28gZmllbGRzIChgcG9zaXRpb25hbDogUG9zaXRpb25hbGAgYW5kIGBuYW1lZDpcbiAqIE5hbWVkYCwgaW4gYWRkaXRpb24gdG8gdGhlIGdlbmVyaWMgYGxvYzogU291cmNlT2Zmc2V0c2AgZmllbGQpLlxuICpcbiAqIE9uY2UgeW91IGNyZWF0ZSBhIG5vZGUgdXNpbmcgYG5vZGVgLCBpdCBpcyBpbnN0YW50aWF0ZWQgd2l0aCBhbGwgb2YgaXRzIGZpZWxkcyAoaW5jbHVkaW5nIGBsb2NgKTpcbiAqXG4gKiBgYGB0c1xuICogbmV3IEh0bWxUZXh0KHsgbG9jOiBvZmZzZXRzLCBjaGFyczogc29tZVN0cmluZyB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9kZSgpOiB7XG4gIGZpZWxkczxGaWVsZHMgZXh0ZW5kcyBvYmplY3Q+KCk6IE5vZGVDb25zdHJ1Y3RvcjxGaWVsZHMgJiBCYXNlTm9kZUZpZWxkcz47XG59O1xuZXhwb3J0IGZ1bmN0aW9uIG5vZGU8VCBleHRlbmRzIHN0cmluZz4oXG4gIG5hbWU6IFRcbik6IHtcbiAgZmllbGRzPEZpZWxkcyBleHRlbmRzIG9iamVjdD4oKTogVHlwZWROb2RlQ29uc3RydWN0b3I8VCwgRmllbGRzICYgQmFzZU5vZGVGaWVsZHM+O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vZGU8VCBleHRlbmRzIHN0cmluZz4oXG4gIG5hbWU/OiBUXG4pOlxuICB8IHtcbiAgICAgIGZpZWxkczxGaWVsZHMgZXh0ZW5kcyBvYmplY3Q+KCk6IFR5cGVkTm9kZUNvbnN0cnVjdG9yPFQsIEZpZWxkcyAmIEJhc2VOb2RlRmllbGRzPjtcbiAgICB9XG4gIHwge1xuICAgICAgZmllbGRzPEZpZWxkcyBleHRlbmRzIG9iamVjdD4oKTogTm9kZUNvbnN0cnVjdG9yPEZpZWxkcyAmIEJhc2VOb2RlRmllbGRzPjtcbiAgICB9IHtcbiAgaWYgKG5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHR5cGUgPSBuYW1lO1xuICAgIHJldHVybiB7XG4gICAgICBmaWVsZHM8RmllbGRzIGV4dGVuZHMgb2JqZWN0PigpOiBUeXBlZE5vZGVDb25zdHJ1Y3RvcjxULCBCYXNlTm9kZUZpZWxkcyAmIEZpZWxkcz4ge1xuICAgICAgICByZXR1cm4gY2xhc3Mge1xuICAgICAgICAgIHJlYWRvbmx5IGxvYzogU291cmNlU3BhbjtcbiAgICAgICAgICByZWFkb25seSB0eXBlOiBUO1xuXG4gICAgICAgICAgY29uc3RydWN0b3IoZmllbGRzOiBCYXNlTm9kZUZpZWxkcyAmIEZpZWxkcykge1xuICAgICAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgICAgIHRoaXMubG9jID0gZmllbGRzLmxvYztcbiAgICAgICAgICAgIGNvcHkoZmllbGRzLCAodGhpcyBhcyB1bmtub3duKSBhcyBDb25zdHJ1Y3RpbmdUeXBlZE5vZGU8RmllbGRzPik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGFzIFR5cGVkTm9kZUNvbnN0cnVjdG9yPFQsIEJhc2VOb2RlRmllbGRzICYgRmllbGRzPjtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgZmllbGRzPEZpZWxkcz4oKTogTm9kZUNvbnN0cnVjdG9yPEZpZWxkcyAmIEJhc2VOb2RlRmllbGRzPiB7XG4gICAgICAgIHJldHVybiBjbGFzcyB7XG4gICAgICAgICAgcmVhZG9ubHkgbG9jOiBTb3VyY2VTcGFuO1xuXG4gICAgICAgICAgY29uc3RydWN0b3IoZmllbGRzOiBCYXNlTm9kZUZpZWxkcyAmIEZpZWxkcykge1xuICAgICAgICAgICAgdGhpcy5sb2MgPSBmaWVsZHMubG9jO1xuXG4gICAgICAgICAgICBjb3B5KGZpZWxkcywgKHRoaXMgYXMgdW5rbm93bikgYXMgQ29uc3RydWN0aW5nTm9kZTxGaWVsZHM+KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gYXMgTm9kZUNvbnN0cnVjdG9yPEJhc2VOb2RlRmllbGRzICYgRmllbGRzPjtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufVxuXG50eXBlIENvbnN0cnVjdGluZ1R5cGVkTm9kZTxGaWVsZHM+ID0gRmllbGRzICYgQmFzZU5vZGVGaWVsZHM7XG5cbnR5cGUgQ29uc3RydWN0aW5nTm9kZTxGaWVsZHM+ID0gQmFzZU5vZGVGaWVsZHMgJiBGaWVsZHM7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTm9kZUNvbnN0cnVjdG9yPEZpZWxkcz4ge1xuICBuZXcgKGZpZWxkczogRmllbGRzKTogUmVhZG9ubHk8RmllbGRzPjtcbn1cblxudHlwZSBUeXBlZE5vZGU8VCBleHRlbmRzIHN0cmluZywgRmllbGRzPiA9IHsgdHlwZTogVCB9ICYgUmVhZG9ubHk8RmllbGRzPjtcblxuZXhwb3J0IGludGVyZmFjZSBUeXBlZE5vZGVDb25zdHJ1Y3RvcjxUIGV4dGVuZHMgc3RyaW5nLCBGaWVsZHM+IHtcbiAgbmV3IChvcHRpb25zOiBGaWVsZHMpOiBUeXBlZE5vZGU8VCwgRmllbGRzPjtcbn1cblxuZnVuY3Rpb24ga2V5czxPIGV4dGVuZHMgb2JqZWN0PihvYmplY3Q6IE8pOiAoa2V5b2YgTylbXSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3QpIGFzIChrZXlvZiBPKVtdO1xufVxuXG5mdW5jdGlvbiBjb3B5PE8gZXh0ZW5kcyBvYmplY3Q+KG9iamVjdDE6IE8sIG9iamVjdDI6IE8pIHtcbiAgZm9yIChsZXQga2V5IG9mIGtleXMob2JqZWN0MSkpIHtcbiAgICBvYmplY3QyW2tleV0gPSBvYmplY3QxW2tleV07XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=