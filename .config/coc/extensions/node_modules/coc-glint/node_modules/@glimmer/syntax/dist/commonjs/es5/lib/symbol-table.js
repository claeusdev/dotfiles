"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockSymbolTable = exports.ProgramSymbolTable = exports.SymbolTable = void 0;

var _util = require("@glimmer/util");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var __classPrivateFieldSet = void 0 && (void 0).__classPrivateFieldSet || function (receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
};

var __classPrivateFieldGet = void 0 && (void 0).__classPrivateFieldGet || function (receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
};

var _hasEval;

var SymbolTable = /*#__PURE__*/function () {
  function SymbolTable() {}

  SymbolTable.top = function top(locals) {
    return new ProgramSymbolTable(locals);
  };

  var _proto = SymbolTable.prototype;

  _proto.child = function child(locals) {
    var _this = this;

    var symbols = locals.map(function (name) {
      return _this.allocate(name);
    });
    return new BlockSymbolTable(this, locals, symbols);
  };

  return SymbolTable;
}();

exports.SymbolTable = SymbolTable;

var ProgramSymbolTable = /*#__PURE__*/function (_SymbolTable) {
  _inheritsLoose(ProgramSymbolTable, _SymbolTable);

  function ProgramSymbolTable(templateLocals) {
    var _this2;

    _this2 = _SymbolTable.call(this) || this;
    _this2.templateLocals = templateLocals;
    _this2.isRoot = true;
    _this2.symbols = [];
    _this2.upvars = [];
    _this2.size = 1;
    _this2.named = (0, _util.dict)();
    _this2.blocks = (0, _util.dict)();
    _this2.usedTemplateLocals = [];

    _hasEval.set(_assertThisInitialized(_this2), false);

    return _this2;
  }

  var _proto2 = ProgramSymbolTable.prototype;

  _proto2.setHasEval = function setHasEval() {
    __classPrivateFieldSet(this, _hasEval, true);
  };

  _proto2.has = function has(name) {
    return this.templateLocals.indexOf(name) !== -1;
  };

  _proto2.get = function get(_name) {
    throw (0, _util.unreachable)();
  };

  _proto2.getLocalsMap = function getLocalsMap() {
    return (0, _util.dict)();
  };

  _proto2.getEvalInfo = function getEvalInfo() {
    var locals = this.getLocalsMap();
    return Object.keys(locals).map(function (symbol) {
      return locals[symbol];
    });
  };

  _proto2.allocateFree = function allocateFree(name) {
    var index = this.upvars.indexOf(name);

    if (index !== -1) {
      return index;
    }

    index = this.upvars.length;
    this.upvars.push(name);
    return index;
  };

  _proto2.allocateTemplateLocal = function allocateTemplateLocal(name) {
    var index = this.usedTemplateLocals.indexOf(name);

    if (index !== -1) {
      return index;
    }

    index = this.upvars.length;
    this.usedTemplateLocals.push(name);
    return index;
  };

  _proto2.allocateNamed = function allocateNamed(name) {
    var named = this.named[name];

    if (!named) {
      named = this.named[name] = this.allocate(name);
    }

    return named;
  };

  _proto2.allocateBlock = function allocateBlock(name) {
    if (name === 'inverse') {
      name = 'else';
    }

    var block = this.blocks[name];

    if (!block) {
      block = this.blocks[name] = this.allocate("&" + name);
    }

    return block;
  };

  _proto2.allocate = function allocate(identifier) {
    this.symbols.push(identifier);
    return this.size++;
  };

  _createClass(ProgramSymbolTable, [{
    key: "hasEval",
    get: function get() {
      return __classPrivateFieldGet(this, _hasEval);
    }
  }]);

  return ProgramSymbolTable;
}(SymbolTable);

exports.ProgramSymbolTable = ProgramSymbolTable;
_hasEval = new WeakMap();

var BlockSymbolTable = /*#__PURE__*/function (_SymbolTable2) {
  _inheritsLoose(BlockSymbolTable, _SymbolTable2);

  function BlockSymbolTable(parent, symbols, slots) {
    var _this3;

    _this3 = _SymbolTable2.call(this) || this;
    _this3.parent = parent;
    _this3.symbols = symbols;
    _this3.slots = slots;
    _this3.isRoot = false;
    return _this3;
  }

  var _proto3 = BlockSymbolTable.prototype;

  _proto3.has = function has(name) {
    return this.symbols.indexOf(name) !== -1 || this.parent.has(name);
  };

  _proto3.get = function get(name) {
    var slot = this.symbols.indexOf(name);
    return slot === -1 ? this.parent.get(name) : this.slots[slot];
  };

  _proto3.getLocalsMap = function getLocalsMap() {
    var _this4 = this;

    var dict = this.parent.getLocalsMap();
    this.symbols.forEach(function (symbol) {
      return dict[symbol] = _this4.get(symbol);
    });
    return dict;
  };

  _proto3.getEvalInfo = function getEvalInfo() {
    var locals = this.getLocalsMap();
    return Object.keys(locals).map(function (symbol) {
      return locals[symbol];
    });
  };

  _proto3.setHasEval = function setHasEval() {
    this.parent.setHasEval();
  };

  _proto3.allocateFree = function allocateFree(name) {
    return this.parent.allocateFree(name);
  };

  _proto3.allocateTemplateLocal = function allocateTemplateLocal(name) {
    return this.parent.allocateTemplateLocal(name);
  };

  _proto3.allocateNamed = function allocateNamed(name) {
    return this.parent.allocateNamed(name);
  };

  _proto3.allocateBlock = function allocateBlock(name) {
    return this.parent.allocateBlock(name);
  };

  _proto3.allocate = function allocate(identifier) {
    return this.parent.allocate(identifier);
  };

  _createClass(BlockSymbolTable, [{
    key: "locals",
    get: function get() {
      return this.symbols;
    }
  }]);

  return BlockSymbolTable;
}(SymbolTable);

exports.BlockSymbolTable = BlockSymbolTable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,