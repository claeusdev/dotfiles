function getLocalName(node) {
  switch (node.type) {
    case 'ElementNode':
      // unfortunately the ElementNode stores `tag` as a string
      // if that changes in glimmer-vm this will need to be updated
      return node.tag.split('.')[0];

    case 'SubExpression':
    case 'MustacheStatement':
    case 'BlockStatement':
      return getLocalName(node.path);

    case 'UndefinedLiteral':
    case 'NullLiteral':
    case 'BooleanLiteral':
    case 'StringLiteral':
    case 'NumberLiteral':
    case 'TextNode':
    case 'Template':
    case 'Block':
    case 'CommentStatement':
    case 'MustacheCommentStatement':
    case 'PartialStatement':
    case 'ElementModifierStatement':
    case 'AttrNode':
    case 'ConcatStatement':
    case 'Program':
    case 'Hash':
    case 'HashPair':
      return undefined;

    case 'PathExpression':
    default:
      return node.parts.length ? node.parts[0] : undefined;
  }
}

function getLocals(node) {
  switch (node.type) {
    case 'ElementNode':
    case 'Program':
    case 'Block':
    case 'Template':
      return node.blockParams;

    case 'BlockStatement':
      return node.program.blockParams;

    default:
      return undefined;
  }
}

export class TransformScope {
  constructor(locals) {
    this.locals = locals;
    this.hasPartial = false;
    this.usedLocals = {};

    for (const local of locals) {
      this.usedLocals[local] = false;
    }
  }

  child(node) {
    let locals = getLocals(node);
    return locals ? new ChildTransformScope(locals, this) : this;
  }

  usePartial() {
    this.hasPartial = true;
  }

}
export default class RootTransformScope extends TransformScope {
  constructor(node) {
    var _a;

    let locals = (_a = getLocals(node)) !== null && _a !== void 0 ? _a : [];
    super(locals);
  }

  useLocal(node) {
    let name = getLocalName(node);

    if (name && name in this.usedLocals) {
      this.usedLocals[name] = true;
    }
  }

  isLocal(name) {
    return this.locals.indexOf(name) !== -1;
  }

  currentUnusedLocals() {
    if (!this.hasPartial && this.locals.length > 0) {
      return this.locals.filter(local => !this.usedLocals[local]);
    }

    return false;
  }

}

class ChildTransformScope extends TransformScope {
  constructor(locals, parent) {
    super(locals);
    this.parent = parent;
  }

  useLocal(node) {
    let name = getLocalName(node);

    if (name && name in this.usedLocals) {
      this.usedLocals[name] = true;
    } else {
      this.parent.useLocal(node);
    }
  }

  isLocal(name) {
    return this.locals.indexOf(name) !== -1 || this.parent.isLocal(name);
  }

  currentUnusedLocals() {
    if (!this.hasPartial && this.locals.length > 0) {
      // We only care about the last local, because if it is used then it implies
      // usage of the others (specifically when in a child block, |foo bar|)
      if (!this.usedLocals[this.locals[this.locals.length - 1]]) {
        return [this.locals[this.locals.length - 1]];
      }
    }

    return false;
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,