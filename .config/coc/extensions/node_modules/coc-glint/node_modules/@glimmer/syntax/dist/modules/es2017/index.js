export { Source } from './lib/source/source';
export { default as builders } from './lib/v1/public-builders';
import * as ASTv1_1 from './lib/v1/api';
export { ASTv1_1 as ASTv1 };
import * as ASTv2_1 from './lib/v2-a/api';
export { ASTv2_1 as ASTv2 };
export { normalize } from './lib/v2-a/normalize';
export { SymbolTable, BlockSymbolTable, ProgramSymbolTable } from './lib/symbol-table';
export { generateSyntaxError } from './lib/syntax-error';
export { preprocess } from './lib/parser/tokenizer-event-handlers';
export { default as print } from './lib/generation/print';
export { default as Walker } from './lib/traversal/walker';
export { default as traverse } from './lib/traversal/traverse';
export { cannotRemoveNode, cannotReplaceNode } from './lib/traversal/errors';
export { default as WalkerPath } from './lib/traversal/path';
export { isKeyword, KEYWORDS_TYPES } from './lib/keywords';
export { SourceSlice } from './lib/source/slice';
export { SourceSpan } from './lib/source/span';
export { SpanList, maybeLoc, loc, hasSpan } from './lib/source/span-list';
export { node } from './lib/v2-a/objects/node';
/** @deprecated use WalkerPath instead */

export { default as Path } from './lib/traversal/walker';
import * as AST_1 from './lib/v1/api';
export { AST_1 as AST };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLE1BQVQsUUFBdUIscUJBQXZCO0FBQ0EsU0FBUyxPQUFPLElBQUksUUFBcEIsUUFBb0MsMEJBQXBDO3lCQUN1QixjO29CQUFYLEs7eUJBQ1csZ0I7b0JBQVgsSztBQUNaLFNBQVMsU0FBVCxRQUEwQixzQkFBMUI7QUFDQSxTQUFTLFdBQVQsRUFBc0IsZ0JBQXRCLEVBQXdDLGtCQUF4QyxRQUFrRSxvQkFBbEU7QUFDQSxTQUFTLG1CQUFULFFBQXdELG9CQUF4RDtBQUNBLFNBQ0UsVUFERixRQVFPLHVDQVJQO0FBU0EsU0FBUyxPQUFPLElBQUksS0FBcEIsUUFBaUMsd0JBQWpDO0FBQ0EsU0FBUyxPQUFPLElBQUksTUFBcEIsUUFBa0Msd0JBQWxDO0FBQ0EsU0FBUyxPQUFPLElBQUksUUFBcEIsUUFBb0MsMEJBQXBDO0FBRUEsU0FBUyxnQkFBVCxFQUEyQixpQkFBM0IsUUFBb0Qsd0JBQXBEO0FBQ0EsU0FBUyxPQUFPLElBQUksVUFBcEIsUUFBc0Msc0JBQXRDO0FBQ0EsU0FBUyxTQUFULEVBQWlDLGNBQWpDLFFBQXVELGdCQUF2RDtBQUVBLFNBQVMsV0FBVCxRQUE0QixvQkFBNUI7QUFDQSxTQUFTLFVBQVQsUUFBMkIsbUJBQTNCO0FBQ0EsU0FDRSxRQURGLEVBRUUsUUFGRixFQUlFLEdBSkYsRUFNRSxPQU5GLFFBT08sd0JBUFA7QUFVQSxTQUFTLElBQVQsUUFBcUIseUJBQXJCO0FBRUE7O0FBQ0EsU0FBUyxPQUFPLElBQUksSUFBcEIsUUFBZ0Msd0JBQWhDO3VCQUdxQixjO2tCQUFULEciLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBTb3VyY2UgfSBmcm9tICcuL2xpYi9zb3VyY2Uvc291cmNlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgYnVpbGRlcnMgfSBmcm9tICcuL2xpYi92MS9wdWJsaWMtYnVpbGRlcnMnO1xuZXhwb3J0ICogYXMgQVNUdjEgZnJvbSAnLi9saWIvdjEvYXBpJztcbmV4cG9ydCAqIGFzIEFTVHYyIGZyb20gJy4vbGliL3YyLWEvYXBpJztcbmV4cG9ydCB7IG5vcm1hbGl6ZSB9IGZyb20gJy4vbGliL3YyLWEvbm9ybWFsaXplJztcbmV4cG9ydCB7IFN5bWJvbFRhYmxlLCBCbG9ja1N5bWJvbFRhYmxlLCBQcm9ncmFtU3ltYm9sVGFibGUgfSBmcm9tICcuL2xpYi9zeW1ib2wtdGFibGUnO1xuZXhwb3J0IHsgZ2VuZXJhdGVTeW50YXhFcnJvciwgR2xpbW1lclN5bnRheEVycm9yIH0gZnJvbSAnLi9saWIvc3ludGF4LWVycm9yJztcbmV4cG9ydCB7XG4gIHByZXByb2Nlc3MsXG4gIEFTVFBsdWdpbixcbiAgQVNUUGx1Z2luQnVpbGRlcixcbiAgQVNUUGx1Z2luRW52aXJvbm1lbnQsXG4gIFN5bnRheCxcbiAgVGVtcGxhdGVJZEZuLFxuICBQcmVjb21waWxlT3B0aW9ucyxcbn0gZnJvbSAnLi9saWIvcGFyc2VyL3Rva2VuaXplci1ldmVudC1oYW5kbGVycyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHByaW50IH0gZnJvbSAnLi9saWIvZ2VuZXJhdGlvbi9wcmludCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFdhbGtlciB9IGZyb20gJy4vbGliL3RyYXZlcnNhbC93YWxrZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0cmF2ZXJzZSB9IGZyb20gJy4vbGliL3RyYXZlcnNhbC90cmF2ZXJzZSc7XG5leHBvcnQgeyBOb2RlVmlzaXRvciB9IGZyb20gJy4vbGliL3RyYXZlcnNhbC92aXNpdG9yJztcbmV4cG9ydCB7IGNhbm5vdFJlbW92ZU5vZGUsIGNhbm5vdFJlcGxhY2VOb2RlIH0gZnJvbSAnLi9saWIvdHJhdmVyc2FsL2Vycm9ycyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFdhbGtlclBhdGggfSBmcm9tICcuL2xpYi90cmF2ZXJzYWwvcGF0aCc7XG5leHBvcnQgeyBpc0tleXdvcmQsIEtleXdvcmRUeXBlLCBLRVlXT1JEU19UWVBFUyB9IGZyb20gJy4vbGliL2tleXdvcmRzJztcblxuZXhwb3J0IHsgU291cmNlU2xpY2UgfSBmcm9tICcuL2xpYi9zb3VyY2Uvc2xpY2UnO1xuZXhwb3J0IHsgU291cmNlU3BhbiB9IGZyb20gJy4vbGliL3NvdXJjZS9zcGFuJztcbmV4cG9ydCB7XG4gIFNwYW5MaXN0LFxuICBtYXliZUxvYyxcbiAgTWF5YmVIYXNTb3VyY2VTcGFuLFxuICBsb2MsXG4gIEhhc1NvdXJjZVNwYW4sXG4gIGhhc1NwYW4sXG59IGZyb20gJy4vbGliL3NvdXJjZS9zcGFuLWxpc3QnO1xuZXhwb3J0IHsgUHJlcHJvY2Vzc09wdGlvbnMgfSBmcm9tICcuL2xpYi9wYXJzZXIvdG9rZW5pemVyLWV2ZW50LWhhbmRsZXJzJztcblxuZXhwb3J0IHsgbm9kZSB9IGZyb20gJy4vbGliL3YyLWEvb2JqZWN0cy9ub2RlJztcblxuLyoqIEBkZXByZWNhdGVkIHVzZSBXYWxrZXJQYXRoIGluc3RlYWQgKi9cbmV4cG9ydCB7IGRlZmF1bHQgYXMgUGF0aCB9IGZyb20gJy4vbGliL3RyYXZlcnNhbC93YWxrZXInO1xuXG4vKiogQGRlcHJlY2F0ZWQgdXNlIEFTVHYxIGluc3RlYWQgKi9cbmV4cG9ydCAqIGFzIEFTVCBmcm9tICcuL2xpYi92MS9hcGknO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==