import { assert } from '@glimmer/util';
import { PathExpressionImplV1 } from './legacy-interop';
const DEFAULT_STRIP = {
  close: false,
  open: false
};
/**
 * The Parser Builder differentiates from the public builder API by:
 *
 * 1. Offering fewer different ways to instantiate nodes
 * 2. Mandating source locations
 */

class Builders {
  pos(line, column) {
    return {
      line,
      column
    };
  }

  blockItself({
    body,
    blockParams,
    chained = false,
    loc
  }) {
    return {
      type: 'Block',
      body: body || [],
      blockParams: blockParams || [],
      chained,
      loc
    };
  }

  template({
    body,
    blockParams,
    loc
  }) {
    return {
      type: 'Template',
      body: body || [],
      blockParams: blockParams || [],
      loc
    };
  }

  mustache({
    path,
    params,
    hash,
    trusting,
    loc,
    strip = DEFAULT_STRIP
  }) {
    return {
      type: 'MustacheStatement',
      path,
      params,
      hash,
      escaped: !trusting,
      trusting,
      loc,
      strip: strip || {
        open: false,
        close: false
      }
    };
  }

  block({
    path,
    params,
    hash,
    defaultBlock,
    elseBlock = null,
    loc,
    openStrip = DEFAULT_STRIP,
    inverseStrip = DEFAULT_STRIP,
    closeStrip = DEFAULT_STRIP
  }) {
    return {
      type: 'BlockStatement',
      path: path,
      params,
      hash,
      program: defaultBlock,
      inverse: elseBlock,
      loc: loc,
      openStrip: openStrip,
      inverseStrip: inverseStrip,
      closeStrip: closeStrip
    };
  }

  comment(value, loc) {
    return {
      type: 'CommentStatement',
      value: value,
      loc
    };
  }

  mustacheComment(value, loc) {
    return {
      type: 'MustacheCommentStatement',
      value: value,
      loc
    };
  }

  concat(parts, loc) {
    return {
      type: 'ConcatStatement',
      parts,
      loc
    };
  }

  element({
    tag,
    selfClosing,
    attrs,
    blockParams,
    modifiers,
    comments,
    children,
    loc
  }) {
    return {
      type: 'ElementNode',
      tag,
      selfClosing: selfClosing,
      attributes: attrs || [],
      blockParams: blockParams || [],
      modifiers: modifiers || [],
      comments: comments || [],
      children: children || [],
      loc
    };
  }

  elementModifier({
    path,
    params,
    hash,
    loc
  }) {
    return {
      type: 'ElementModifierStatement',
      path,
      params,
      hash,
      loc
    };
  }

  attr({
    name,
    value,
    loc
  }) {
    return {
      type: 'AttrNode',
      name: name,
      value: value,
      loc
    };
  }

  text({
    chars,
    loc
  }) {
    return {
      type: 'TextNode',
      chars,
      loc
    };
  }

  sexpr({
    path,
    params,
    hash,
    loc
  }) {
    return {
      type: 'SubExpression',
      path,
      params,
      hash,
      loc
    };
  }

  path({
    head,
    tail,
    loc
  }) {
    let {
      original: originalHead,
      parts: headParts
    } = headToString(head);
    let parts = [...headParts, ...tail];
    let original = [...originalHead, ...parts].join('.');
    return new PathExpressionImplV1(original, head, tail, loc);
  }

  head(head, loc) {
    if (head[0] === '@') {
      return this.atName(head, loc);
    } else if (head === 'this') {
      return this.this(loc);
    } else {
      return this.var(head, loc);
    }
  }

  this(loc) {
    return {
      type: 'ThisHead',
      loc
    };
  }

  atName(name, loc) {
    // the `@` should be included so we have a complete source range
    (false && assert(name[0] === '@', `call builders.at() with a string that starts with '@'`));
    return {
      type: 'AtHead',
      name,
      loc
    };
  }

  var(name, loc) {
    (false && assert(name !== 'this', `You called builders.var() with 'this'. Call builders.this instead`));
    (false && assert(name[0] !== '@', `You called builders.var() with '${name}'. Call builders.at('${name}') instead`));
    return {
      type: 'VarHead',
      name,
      loc
    };
  }

  hash(pairs, loc) {
    return {
      type: 'Hash',
      pairs: pairs || [],
      loc
    };
  }

  pair({
    key,
    value,
    loc
  }) {
    return {
      type: 'HashPair',
      key: key,
      value,
      loc
    };
  }

  literal({
    type,
    value,
    loc
  }) {
    return {
      type,
      value,
      original: value,
      loc
    };
  }

  undefined() {
    return this.literal({
      type: 'UndefinedLiteral',
      value: undefined
    });
  }

  null() {
    return this.literal({
      type: 'NullLiteral',
      value: null
    });
  }

  string(value, loc) {
    return this.literal({
      type: 'StringLiteral',
      value,
      loc
    });
  }

  boolean(value, loc) {
    return this.literal({
      type: 'BooleanLiteral',
      value,
      loc
    });
  }

  number(value, loc) {
    return this.literal({
      type: 'NumberLiteral',
      value,
      loc
    });
  }

} // Expressions


function headToString(head) {
  switch (head.type) {
    case 'AtHead':
      return {
        original: head.name,
        parts: [head.name]
      };

    case 'ThisHead':
      return {
        original: `this`,
        parts: []
      };

    case 'VarHead':
      return {
        original: head.name,
        parts: [head.name]
      };
  }
}

export default new Builders();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdjEvcGFyc2VyLWJ1aWxkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLFNBQVMsTUFBVCxRQUF1QixlQUF2QjtBQU1BLFNBQVMsb0JBQVQsUUFBcUMsa0JBQXJDO0FBRUEsTUFBTSxhQUFhLEdBQUc7QUFDcEIsRUFBQSxLQUFLLEVBQUUsS0FEYTtBQUVwQixFQUFBLElBQUksRUFBRTtBQUZjLENBQXRCO0FBS0E7Ozs7Ozs7QUFNQSxNQUFNLFFBQU4sQ0FBYztBQUNaLEVBQUEsR0FBRyxDQUFDLElBQUQsRUFBZSxNQUFmLEVBQTZCO0FBQzlCLFdBQU87QUFDTCxNQUFBLElBREs7QUFFTCxNQUFBO0FBRkssS0FBUDtBQUlEOztBQUVELEVBQUEsV0FBVyxDQUFDO0FBQ1YsSUFBQSxJQURVO0FBRVYsSUFBQSxXQUZVO0FBR1YsSUFBQSxPQUFPLEdBQUcsS0FIQTtBQUlWLElBQUE7QUFKVSxHQUFELEVBVVY7QUFDQyxXQUFPO0FBQ0wsTUFBQSxJQUFJLEVBQUUsT0FERDtBQUVMLE1BQUEsSUFBSSxFQUFFLElBQUksSUFBSSxFQUZUO0FBR0wsTUFBQSxXQUFXLEVBQUUsV0FBVyxJQUFJLEVBSHZCO0FBSUwsTUFBQSxPQUpLO0FBS0wsTUFBQTtBQUxLLEtBQVA7QUFPRDs7QUFFRCxFQUFBLFFBQVEsQ0FBQztBQUNQLElBQUEsSUFETztBQUVQLElBQUEsV0FGTztBQUdQLElBQUE7QUFITyxHQUFELEVBUVA7QUFDQyxXQUFPO0FBQ0wsTUFBQSxJQUFJLEVBQUUsVUFERDtBQUVMLE1BQUEsSUFBSSxFQUFFLElBQUksSUFBSSxFQUZUO0FBR0wsTUFBQSxXQUFXLEVBQUUsV0FBVyxJQUFJLEVBSHZCO0FBSUwsTUFBQTtBQUpLLEtBQVA7QUFNRDs7QUFFRCxFQUFBLFFBQVEsQ0FBQztBQUNQLElBQUEsSUFETztBQUVQLElBQUEsTUFGTztBQUdQLElBQUEsSUFITztBQUlQLElB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UDtBQUNEOztBQUVELEVBQUEsTUFBTSxDQUFDLEtBQUQsRUFBZ0IsR0FBaEIsRUFBK0I7QUFDbkMsV0FBTyxLQUFLLE9BQUwsQ0FBYTtBQUFFLE1BQUEsSUFBSSxFQUFFLGVBQVI7QUFBeUIsTUFBQSxLQUF6QjtBQUFnQyxNQUFBO0FBQWhDLEtBQWIsQ0FBUDtBQUNEOztBQXBWVyxDLENBa1lkOzs7QUFFQSxTQUFTLFlBQVQsQ0FBc0IsSUFBdEIsRUFBMEM7QUFDeEMsVUFBUSxJQUFJLENBQUMsSUFBYjtBQUNFLFNBQUssUUFBTDtBQUNFLGFBQU87QUFBRSxRQUFBLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBakI7QUFBdUIsUUFBQSxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBTjtBQUE5QixPQUFQOztBQUNGLFNBQUssVUFBTDtBQUNFLGFBQU87QUFBRSxRQUFBLFFBQVEsRUFBRSxNQUFaO0FBQW9CLFFBQUEsS0FBSyxFQUFFO0FBQTNCLE9BQVA7O0FBQ0YsU0FBSyxTQUFMO0FBQ0UsYUFBTztBQUFFLFFBQUEsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFqQjtBQUF1QixRQUFBLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFOO0FBQTlCLE9BQVA7QUFOSjtBQVFEOztBQUVELGVBQWUsSUFBSSxRQUFKLEVBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaWN0LCBPcHRpb24sIFByZXNlbnRBcnJheSB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmltcG9ydCB7IFBhcnNlck5vZGVCdWlsZGVyIH0gZnJvbSAnLi4vcGFyc2VyJztcbmltcG9ydCB7IFNvdXJjZUxvY2F0aW9uIH0gZnJvbSAnLi4vc291cmNlL2xvY2F0aW9uJztcbmltcG9ydCB7IFNvdXJjZU9mZnNldCwgU291cmNlU3BhbiB9IGZyb20gJy4uL3NvdXJjZS9zcGFuJztcbmltcG9ydCAqIGFzIEFTVHYxIGZyb20gJy4vYXBpJztcbmltcG9ydCB7IFBhdGhFeHByZXNzaW9uSW1wbFYxIH0gZnJvbSAnLi9sZWdhY3ktaW50ZXJvcCc7XG5cbmNvbnN0IERFRkFVTFRfU1RSSVAgPSB7XG4gIGNsb3NlOiBmYWxzZSxcbiAgb3BlbjogZmFsc2UsXG59O1xuXG4vKipcbiAqIFRoZSBQYXJzZXIgQnVpbGRlciBkaWZmZXJlbnRpYXRlcyBmcm9tIHRoZSBwdWJsaWMgYnVpbGRlciBBUEkgYnk6XG4gKlxuICogMS4gT2ZmZXJpbmcgZmV3ZXIgZGlmZmVyZW50IHdheXMgdG8gaW5zdGFudGlhdGUgbm9kZXNcbiAqIDIuIE1hbmRhdGluZyBzb3VyY2UgbG9jYXRpb25zXG4gKi9cbmNsYXNzIEJ1aWxkZXJzIHtcbiAgcG9zKGxpbmU6IG51bWJlciwgY29sdW1uOiBudW1iZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGluZSxcbiAgICAgIGNvbHVtbixcbiAgICB9O1xuICB9XG5cbiAgYmxvY2tJdHNlbGYoe1xuICAgIGJvZHksXG4gICAgYmxvY2tQYXJhbXMsXG4gICAgY2hhaW5lZCA9IGZhbHNlLFxuICAgIGxvYyxcbiAgfToge1xuICAgIGJvZHk/OiBBU1R2MS5TdGF0ZW1lbnRbXTtcbiAgICBibG9ja1BhcmFtcz86IHN0cmluZ1tdO1xuICAgIGNoYWluZWQ/OiBib29sZWFuO1xuICAgIGxvYzogU291cmNlU3BhbjtcbiAgfSk6IEFTVHYxLkJsb2NrIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0Jsb2NrJyxcbiAgICAgIGJvZHk6IGJvZHkgfHwgW10sXG4gICAgICBibG9ja1BhcmFtczogYmxvY2tQYXJhbXMgfHwgW10sXG4gICAgICBjaGFpbmVkLFxuICAgICAgbG9jLFxuICAgIH07XG4gIH1cblxuICB0ZW1wbGF0ZSh7XG4gICAgYm9keSxcbiAgICBibG9ja1BhcmFtcyxcbiAgICBsb2MsXG4gIH06IHtcbiAgICBib2R5PzogQVNUdjEuU3RhdGVtZW50W107XG4gICAgYmxvY2tQYXJhbXM/OiBzdHJpbmdbXTtcbiAgICBsb2M6IFNvdXJjZVNwYW47XG4gIH0pOiBBU1R2MS5UZW1wbGF0ZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdUZW1wbGF0ZScsXG4gICAgICBib2R5OiBib2R5IHx8IFtdLFxuICAgICAgYmxvY2tQYXJhbXM6IGJsb2NrUGFyYW1zIHx8IFtdLFxuICAgICAgbG9jLFxuICAgIH07XG4gIH1cblxuICBtdXN0YWNoZSh7XG4gICAgcGF0aCxcbiAgICBwYXJhbXMsXG4gICAgaGFzaCxcbiAgICB0cnVzdGluZyxcbiAgICBsb2MsXG4gICAgc3RyaXAgPSBERUZBVUxUX1NUUklQLFxuICB9OiB7XG4gICAgcGF0aDogQVNUdjEuRXhwcmVzc2lvbjtcbiAgICBwYXJhbXM6IEFTVHYxLkV4cHJlc3Npb25bXTtcbiAgICBoYXNoOiBBU1R2MS5IYXNoO1xuICAgIHRydXN0aW5nOiBib29sZWFuO1xuICAgIGxvYzogU291cmNlU3BhbjtcbiAgICBzdHJpcDogQVNUdjEuU3RyaXBGbGFncztcbiAgfSk6IEFTVHYxLk11c3RhY2hlU3RhdGVtZW50IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ011c3RhY2hlU3RhdGVtZW50JyxcbiAgICAgIHBhdGgsXG4gICAgICBwYXJhbXMsXG4gICAgICBoYXNoLFxuICAgICAgZXNjYXBlZDogIXRydXN0aW5nLFxuICAgICAgdHJ1c3RpbmcsXG4gICAgICBsb2MsXG4gICAgICBzdHJpcDogc3RyaXAgfHwgeyBvcGVuOiBmYWxzZSwgY2xvc2U6IGZhbHNlIH0sXG4gICAgfTtcbiAgfVxuXG4gIGJsb2NrKHtcbiAgICBwYXRoLFxuICAgIHBhcmFtcyxcbiAgICBoYXNoLFxuICAgIGRlZmF1bHRCbG9jayxcbiAgICBlbHNlQmxvY2sgPSBudWxsLFxuICAgIGxvYyxcbiAgICBvcGVuU3RyaXAgPSBERUZBVUxUX1NUUklQLFxuICAgIGludmVyc2VTdHJpcCA9IERFRkFVTFRfU1RSSVAsXG4gICAgY2xvc2VTdHJpcCA9IERFRkFVTFRfU1RSSVAsXG4gIH06IHtcbiAgICBwYXRoOiBBU1R2MS5QYXRoRXhwcmVzc2lvbjtcbiAgICBwYXJhbXM6IEFTVHYxLkV4cHJlc3Npb25bXTtcbiAgICBoYXNoOiBBU1R2MS5IYXNoO1xuICAgIGRlZmF1bHRCbG9jazogQVNUdjEuQmxvY2s7XG4gICAgZWxzZUJsb2NrPzogT3B0aW9uPEFTVHYxLkJsb2NrPjtcbiAgICBsb2M6IFNvdXJjZVNwYW47XG4gICAgb3BlblN0cmlwOiBBU1R2MS5TdHJpcEZsYWdzO1xuICAgIGludmVyc2VTdHJpcDogQVNUdjEuU3RyaXBGbGFncztcbiAgICBjbG9zZVN0cmlwOiBBU1R2MS5TdHJpcEZsYWdzO1xuICB9KTogQVNUdjEuQmxvY2tTdGF0ZW1lbnQge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnQmxvY2tTdGF0ZW1lbnQnLFxuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIHBhcmFtcyxcbiAgICAgIGhhc2gsXG4gICAgICBwcm9ncmFtOiBkZWZhdWx0QmxvY2ssXG4gICAgICBpbnZlcnNlOiBlbHNlQmxvY2ssXG4gICAgICBsb2M6IGxvYyxcbiAgICAgIG9wZW5TdHJpcDogb3BlblN0cmlwLFxuICAgICAgaW52ZXJzZVN0cmlwOiBpbnZlcnNlU3RyaXAsXG4gICAgICBjbG9zZVN0cmlwOiBjbG9zZVN0cmlwLFxuICAgIH07XG4gIH1cblxuICBjb21tZW50KHZhbHVlOiBzdHJpbmcsIGxvYzogU291cmNlT2Zmc2V0KTogUGFyc2VyTm9kZUJ1aWxkZXI8QVNUdjEuQ29tbWVudFN0YXRlbWVudD4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnQ29tbWVudFN0YXRlbWVudCcsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBsb2MsXG4gICAgfTtcbiAgfVxuXG4gIG11c3RhY2hlQ29tbWVudCh2YWx1ZTogc3RyaW5nLCBsb2M6IFNvdXJjZVNwYW4pOiBBU1R2MS5NdXN0YWNoZUNvbW1lbnRTdGF0ZW1lbnQge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnTXVzdGFjaGVDb21tZW50U3RhdGVtZW50JyxcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGxvYyxcbiAgICB9O1xuICB9XG5cbiAgY29uY2F0KFxuICAgIHBhcnRzOiBQcmVzZW50QXJyYXk8QVNUdjEuVGV4dE5vZGUgfCBBU1R2MS5NdXN0YWNoZVN0YXRlbWVudD4sXG4gICAgbG9jOiBTb3VyY2VTcGFuXG4gICk6IEFTVHYxLkNvbmNhdFN0YXRlbWVudCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdDb25jYXRTdGF0ZW1lbnQnLFxuICAgICAgcGFydHMsXG4gICAgICBsb2MsXG4gICAgfTtcbiAgfVxuXG4gIGVsZW1lbnQoe1xuICAgIHRhZyxcbiAgICBzZWxmQ2xvc2luZyxcbiAgICBhdHRycyxcbiAgICBibG9ja1BhcmFtcyxcbiAgICBtb2RpZmllcnMsXG4gICAgY29tbWVudHMsXG4gICAgY2hpbGRyZW4sXG4gICAgbG9jLFxuICB9OiBCdWlsZEVsZW1lbnRPcHRpb25zKTogQVNUdjEuRWxlbWVudE5vZGUge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnRWxlbWVudE5vZGUnLFxuICAgICAgdGFnLFxuICAgICAgc2VsZkNsb3Npbmc6IHNlbGZDbG9zaW5nLFxuICAgICAgYXR0cmlidXRlczogYXR0cnMgfHwgW10sXG4gICAgICBibG9ja1BhcmFtczogYmxvY2tQYXJhbXMgfHwgW10sXG4gICAgICBtb2RpZmllcnM6IG1vZGlmaWVycyB8fCBbXSxcbiAgICAgIGNvbW1lbnRzOiAoY29tbWVudHMgYXMgQVNUdjEuTXVzdGFjaGVDb21tZW50U3RhdGVtZW50W10pIHx8IFtdLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuIHx8IFtdLFxuICAgICAgbG9jLFxuICAgIH07XG4gIH1cblxuICBlbGVtZW50TW9kaWZpZXIoe1xuICAgIHBhdGgsXG4gICAgcGFyYW1zLFxuICAgIGhhc2gsXG4gICAgbG9jLFxuICB9OiB7XG4gICAgcGF0aDogQVNUdjEuUGF0aEV4cHJlc3Npb24gfCBBU1R2MS5TdWJFeHByZXNzaW9uO1xuICAgIHBhcmFtczogQVNUdjEuRXhwcmVzc2lvbltdO1xuICAgIGhhc2g6IEFTVHYxLkhhc2g7XG4gICAgbG9jOiBTb3VyY2VTcGFuO1xuICB9KTogQVNUdjEuRWxlbWVudE1vZGlmaWVyU3RhdGVtZW50IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0VsZW1lbnRNb2RpZmllclN0YXRlbWVudCcsXG4gICAgICBwYXRoLFxuICAgICAgcGFyYW1zLFxuICAgICAgaGFzaCxcbiAgICAgIGxvYyxcbiAgICB9O1xuICB9XG5cbiAgYXR0cih7XG4gICAgbmFtZSxcbiAgICB2YWx1ZSxcbiAgICBsb2MsXG4gIH06IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdmFsdWU6IEFTVHYxLkF0dHJOb2RlWyd2YWx1ZSddO1xuICAgIGxvYzogU291cmNlU3BhbjtcbiAgfSk6IEFTVHYxLkF0dHJOb2RlIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0F0dHJOb2RlJyxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBsb2MsXG4gICAgfTtcbiAgfVxuXG4gIHRleHQoeyBjaGFycywgbG9jIH06IHsgY2hhcnM6IHN0cmluZzsgbG9jOiBTb3VyY2VTcGFuIH0pOiBBU1R2MS5UZXh0Tm9kZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdUZXh0Tm9kZScsXG4gICAgICBjaGFycyxcbiAgICAgIGxvYyxcbiAgICB9O1xuICB9XG5cbiAgc2V4cHIoe1xuICAgIHBhdGgsXG4gICAgcGFyYW1zLFxuICAgIGhhc2gsXG4gICAgbG9jLFxuICB9OiB7XG4gICAgcGF0aDogQVNUdjEuUGF0aEV4cHJlc3Npb247XG4gICAgcGFyYW1zOiBBU1R2MS5FeHByZXNzaW9uW107XG4gICAgaGFzaDogQVNUdjEuSGFzaDtcbiAgICBsb2M6IFNvdXJjZVNwYW47XG4gIH0pOiBBU1R2MS5TdWJFeHByZXNzaW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ1N1YkV4cHJlc3Npb24nLFxuICAgICAgcGF0aCxcbiAgICAgIHBhcmFtcyxcbiAgICAgIGhhc2gsXG4gICAgICBsb2MsXG4gICAgfTtcbiAgfVxuXG4gIHBhdGgoe1xuICAgIGhlYWQsXG4gICAgdGFpbCxcbiAgICBsb2MsXG4gIH06IHtcbiAgICBoZWFkOiBBU1R2MS5QYXRoSGVhZDtcbiAgICB0YWlsOiBzdHJpbmdbXTtcbiAgICBsb2M6IFNvdXJjZVNwYW47XG4gIH0pOiBBU1R2MS5QYXRoRXhwcmVzc2lvbiB7XG4gICAgbGV0IHsgb3JpZ2luYWw6IG9yaWdpbmFsSGVhZCwgcGFydHM6IGhlYWRQYXJ0cyB9ID0gaGVhZFRvU3RyaW5nKGhlYWQpO1xuICAgIGxldCBwYXJ0cyA9IFsuLi5oZWFkUGFydHMsIC4uLnRhaWxdO1xuICAgIGxldCBvcmlnaW5hbCA9IFsuLi5vcmlnaW5hbEhlYWQsIC4uLnBhcnRzXS5qb2luKCcuJyk7XG5cbiAgICByZXR1cm4gbmV3IFBhdGhFeHByZXNzaW9uSW1wbFYxKG9yaWdpbmFsLCBoZWFkLCB0YWlsLCBsb2MpO1xuICB9XG5cbiAgaGVhZChoZWFkOiBzdHJpbmcsIGxvYzogU291cmNlU3Bhbik6IEFTVHYxLlBhdGhIZWFkIHtcbiAgICBpZiAoaGVhZFswXSA9PT0gJ0AnKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdE5hbWUoaGVhZCwgbG9jKTtcbiAgICB9IGVsc2UgaWYgKGhlYWQgPT09ICd0aGlzJykge1xuICAgICAgcmV0dXJuIHRoaXMudGhpcyhsb2MpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy52YXIoaGVhZCwgbG9jKTtcbiAgICB9XG4gIH1cblxuICB0aGlzKGxvYzogU291cmNlU3Bhbik6IEFTVHYxLlBhdGhIZWFkIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ1RoaXNIZWFkJyxcbiAgICAgIGxvYyxcbiAgICB9O1xuICB9XG5cbiAgYXROYW1lKG5hbWU6IHN0cmluZywgbG9jOiBTb3VyY2VTcGFuKTogQVNUdjEuUGF0aEhlYWQge1xuICAgIC8vIHRoZSBgQGAgc2hvdWxkIGJlIGluY2x1ZGVkIHNvIHdlIGhhdmUgYSBjb21wbGV0ZSBzb3VyY2UgcmFuZ2VcbiAgICBhc3NlcnQobmFtZVswXSA9PT0gJ0AnLCBgY2FsbCBidWlsZGVycy5hdCgpIHdpdGggYSBzdHJpbmcgdGhhdCBzdGFydHMgd2l0aCAnQCdgKTtcblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnQXRIZWFkJyxcbiAgICAgIG5hbWUsXG4gICAgICBsb2MsXG4gICAgfTtcbiAgfVxuXG4gIHZhcihuYW1lOiBzdHJpbmcsIGxvYzogU291cmNlU3Bhbik6IEFTVHYxLlBhdGhIZWFkIHtcbiAgICBhc3NlcnQobmFtZSAhPT0gJ3RoaXMnLCBgWW91IGNhbGxlZCBidWlsZGVycy52YXIoKSB3aXRoICd0aGlzJy4gQ2FsbCBidWlsZGVycy50aGlzIGluc3RlYWRgKTtcbiAgICBhc3NlcnQoXG4gICAgICBuYW1lWzBdICE9PSAnQCcsXG4gICAgICBgWW91IGNhbGxlZCBidWlsZGVycy52YXIoKSB3aXRoICcke25hbWV9Jy4gQ2FsbCBidWlsZGVycy5hdCgnJHtuYW1lfScpIGluc3RlYWRgXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnVmFySGVhZCcsXG4gICAgICBuYW1lLFxuICAgICAgbG9jLFxuICAgIH07XG4gIH1cblxuICBoYXNoKHBhaXJzOiBBU1R2MS5IYXNoUGFpcltdLCBsb2M6IFNvdXJjZVNwYW4pOiBBU1R2MS5IYXNoIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0hhc2gnLFxuICAgICAgcGFpcnM6IHBhaXJzIHx8IFtdLFxuICAgICAgbG9jLFxuICAgIH07XG4gIH1cblxuICBwYWlyKHtcbiAgICBrZXksXG4gICAgdmFsdWUsXG4gICAgbG9jLFxuICB9OiB7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgdmFsdWU6IEFTVHYxLkV4cHJlc3Npb247XG4gICAgbG9jOiBTb3VyY2VTcGFuO1xuICB9KTogQVNUdjEuSGFzaFBhaXIge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnSGFzaFBhaXInLFxuICAgICAga2V5OiBrZXksXG4gICAgICB2YWx1ZSxcbiAgICAgIGxvYyxcbiAgICB9O1xuICB9XG5cbiAgbGl0ZXJhbDxUIGV4dGVuZHMgQVNUdjEuTGl0ZXJhbD4oe1xuICAgIHR5cGUsXG4gICAgdmFsdWUsXG4gICAgbG9jLFxuICB9OiB7XG4gICAgdHlwZTogVFsndHlwZSddO1xuICAgIHZhbHVlOiBUWyd2YWx1ZSddO1xuICAgIGxvYz86IFNvdXJjZUxvY2F0aW9uO1xuICB9KTogVCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGUsXG4gICAgICB2YWx1ZSxcbiAgICAgIG9yaWdpbmFsOiB2YWx1ZSxcbiAgICAgIGxvYyxcbiAgICB9IGFzIFQ7XG4gIH1cblxuICB1bmRlZmluZWQoKTogQVNUdjEuVW5kZWZpbmVkTGl0ZXJhbCB7XG4gICAgcmV0dXJuIHRoaXMubGl0ZXJhbCh7IHR5cGU6ICdVbmRlZmluZWRMaXRlcmFsJywgdmFsdWU6IHVuZGVmaW5lZCB9KTtcbiAgfVxuXG4gIG51bGwoKTogQVNUdjEuTnVsbExpdGVyYWwge1xuICAgIHJldHVybiB0aGlzLmxpdGVyYWwoeyB0eXBlOiAnTnVsbExpdGVyYWwnLCB2YWx1ZTogbnVsbCB9KTtcbiAgfVxuXG4gIHN0cmluZyh2YWx1ZTogc3RyaW5nLCBsb2M6IFNvdXJjZVNwYW4pOiBBU1R2MS5TdHJpbmdMaXRlcmFsIHtcbiAgICByZXR1cm4gdGhpcy5saXRlcmFsKHsgdHlwZTogJ1N0cmluZ0xpdGVyYWwnLCB2YWx1ZSwgbG9jIH0pO1xuICB9XG5cbiAgYm9vbGVhbih2YWx1ZTogYm9vbGVhbiwgbG9jOiBTb3VyY2VTcGFuKTogQVNUdjEuQm9vbGVhbkxpdGVyYWwge1xuICAgIHJldHVybiB0aGlzLmxpdGVyYWwoeyB0eXBlOiAnQm9vbGVhbkxpdGVyYWwnLCB2YWx1ZSwgbG9jIH0pO1xuICB9XG5cbiAgbnVtYmVyKHZhbHVlOiBudW1iZXIsIGxvYzogU291cmNlU3Bhbik6IEFTVHYxLk51bWJlckxpdGVyYWwge1xuICAgIHJldHVybiB0aGlzLmxpdGVyYWwoeyB0eXBlOiAnTnVtYmVyTGl0ZXJhbCcsIHZhbHVlLCBsb2MgfSk7XG4gIH1cbn1cblxuLy8gTm9kZXNcblxuZXhwb3J0IHR5cGUgRWxlbWVudFBhcnRzID1cbiAgfCBbJ2F0dHJzJywgLi4uQXR0clNleHBbXV1cbiAgfCBbJ21vZGlmaWVycycsIC4uLk1vZGlmaWVyU2V4cFtdXVxuICB8IFsnYm9keScsIC4uLkFTVHYxLlN0YXRlbWVudFtdXVxuICB8IFsnY29tbWVudHMnLCAuLi5FbGVtZW50Q29tbWVudFtdXVxuICB8IFsnYXMnLCAuLi5zdHJpbmdbXV1cbiAgfCBbJ2xvYycsIFNvdXJjZUxvY2F0aW9uXTtcblxuZXhwb3J0IHR5cGUgUGF0aFNleHAgPSBzdHJpbmcgfCBbJ3BhdGgnLCBzdHJpbmcsIExvY1NleHA/XTtcblxuZXhwb3J0IHR5cGUgTW9kaWZpZXJTZXhwID1cbiAgfCBzdHJpbmdcbiAgfCBbUGF0aFNleHAsIExvY1NleHA/XVxuICB8IFtQYXRoU2V4cCwgQVNUdjEuRXhwcmVzc2lvbltdLCBMb2NTZXhwP11cbiAgfCBbUGF0aFNleHAsIEFTVHYxLkV4cHJlc3Npb25bXSwgRGljdDxBU1R2MS5FeHByZXNzaW9uPiwgTG9jU2V4cD9dO1xuXG5leHBvcnQgdHlwZSBBdHRyU2V4cCA9IFtzdHJpbmcsIEFTVHYxLkF0dHJOb2RlWyd2YWx1ZSddIHwgc3RyaW5nLCBMb2NTZXhwP107XG5cbmV4cG9ydCB0eXBlIExvY1NleHAgPSBbJ2xvYycsIFNvdXJjZUxvY2F0aW9uXTtcblxuZXhwb3J0IHR5cGUgRWxlbWVudENvbW1lbnQgPSBBU1R2MS5NdXN0YWNoZUNvbW1lbnRTdGF0ZW1lbnQgfCBTb3VyY2VMb2NhdGlvbiB8IHN0cmluZztcblxuZXhwb3J0IHR5cGUgU2V4cFZhbHVlID1cbiAgfCBzdHJpbmdcbiAgfCBBU1R2MS5FeHByZXNzaW9uW11cbiAgfCBEaWN0PEFTVHYxLkV4cHJlc3Npb24+XG4gIHwgTG9jU2V4cFxuICB8IFBhdGhTZXhwXG4gIHwgdW5kZWZpbmVkO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJ1aWxkRWxlbWVudE9wdGlvbnMge1xuICB0YWc6IHN0cmluZztcbiAgc2VsZkNsb3Npbmc6IGJvb2xlYW47XG4gIGF0dHJzOiBBU1R2MS5BdHRyTm9kZVtdO1xuICBtb2RpZmllcnM6IEFTVHYxLkVsZW1lbnRNb2RpZmllclN0YXRlbWVudFtdO1xuICBjaGlsZHJlbjogQVNUdjEuU3RhdGVtZW50W107XG4gIGNvbW1lbnRzOiBFbGVtZW50Q29tbWVudFtdO1xuICBibG9ja1BhcmFtczogc3RyaW5nW107XG4gIGxvYzogU291cmNlU3Bhbjtcbn1cblxuLy8gRXhwcmVzc2lvbnNcblxuZnVuY3Rpb24gaGVhZFRvU3RyaW5nKGhlYWQ6IEFTVHYxLlBhdGhIZWFkKTogeyBvcmlnaW5hbDogc3RyaW5nOyBwYXJ0czogc3RyaW5nW10gfSB7XG4gIHN3aXRjaCAoaGVhZC50eXBlKSB7XG4gICAgY2FzZSAnQXRIZWFkJzpcbiAgICAgIHJldHVybiB7IG9yaWdpbmFsOiBoZWFkLm5hbWUsIHBhcnRzOiBbaGVhZC5uYW1lXSB9O1xuICAgIGNhc2UgJ1RoaXNIZWFkJzpcbiAgICAgIHJldHVybiB7IG9yaWdpbmFsOiBgdGhpc2AsIHBhcnRzOiBbXSB9O1xuICAgIGNhc2UgJ1ZhckhlYWQnOlxuICAgICAgcmV0dXJuIHsgb3JpZ2luYWw6IGhlYWQubmFtZSwgcGFydHM6IFtoZWFkLm5hbWVdIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IEJ1aWxkZXJzKCk7XG4iXSwic291cmNlUm9vdCI6IiJ9