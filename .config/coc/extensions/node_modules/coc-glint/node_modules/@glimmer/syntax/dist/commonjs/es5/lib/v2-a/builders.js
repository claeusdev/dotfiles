"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BuildElement = exports.Builder = void 0;

var _util = require("@glimmer/util");

var _slice = require("../source/slice");

var _spanList = require("../source/span-list");

var ASTv2 = _interopRequireWildcard(require("./api"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Builder = /*#__PURE__*/function () {
  function Builder() {}

  var _proto = Builder.prototype; // TEMPLATE //

  _proto.template = function template(symbols, body, loc) {
    return new ASTv2.Template({
      table: symbols,
      body: body,
      loc: loc
    });
  } // INTERNAL (these nodes cannot be reached when doing general-purpose visiting) //
  ;

  _proto.block = function block(symbols, body, loc) {
    return new ASTv2.Block({
      scope: symbols,
      body: body,
      loc: loc
    });
  };

  _proto.namedBlock = function namedBlock(name, block, loc) {
    return new ASTv2.NamedBlock({
      name: name,
      block: block,
      attrs: [],
      componentArgs: [],
      modifiers: [],
      loc: loc
    });
  };

  _proto.simpleNamedBlock = function simpleNamedBlock(name, block, loc) {
    return new BuildElement({
      selfClosing: false,
      attrs: [],
      componentArgs: [],
      modifiers: [],
      comments: []
    }).named(name, block, loc);
  };

  _proto.slice = function slice(chars, loc) {
    return new _slice.SourceSlice({
      loc: loc,
      chars: chars
    });
  };

  _proto.args = function args(positional, named, loc) {
    return new ASTv2.Args({
      loc: loc,
      positional: positional,
      named: named
    });
  };

  _proto.positional = function positional(exprs, loc) {
    return new ASTv2.PositionalArguments({
      loc: loc,
      exprs: exprs
    });
  };

  _proto.namedArgument = function namedArgument(key, value) {
    return new ASTv2.NamedArgument({
      name: key,
      value: value
    });
  };

  _proto.named = function named(entries, loc) {
    return new ASTv2.NamedArguments({
      loc: loc,
      entries: entries
    });
  };

  _proto.attr = function attr(_ref, loc) {
    var name = _ref.name,
        value = _ref.value,
        trusting = _ref.trusting;
    return new ASTv2.HtmlAttr({
      loc: loc,
      name: name,
      value: value,
      trusting: trusting
    });
  };

  _proto.splatAttr = function splatAttr(symbol, loc) {
    return new ASTv2.SplatAttr({
      symbol: symbol,
      loc: loc
    });
  };

  _proto.arg = function arg(_ref2, loc) {
    var name = _ref2.name,
        value = _ref2.value,
        trusting = _ref2.trusting;
    return new ASTv2.ComponentArg({
      name: name,
      value: value,
      trusting: trusting,
      loc: loc
    });
  } // EXPRESSIONS //
  ;

  _proto.path = function path(head, tail, loc) {
    return new ASTv2.PathExpression({
      loc: loc,
      ref: head,
      tail: tail
    });
  };

  _proto.self = function self(loc) {
    return new ASTv2.ThisReference({
      loc: loc
    });
  };

  _proto.at = function at(name, symbol, loc) {
    // the `@` should be included so we have a complete source range
    false && (0, _util.assert)(name[0] === '@', "call builders.at() with a string that starts with '@'");
    return new ASTv2.ArgReference({
      loc: loc,
      name: new _slice.SourceSlice({
        loc: loc,
        chars: name
      }),
      symbol: symbol
    });
  };

  _proto.freeVar = function freeVar(_ref3) {
    var name = _ref3.name,
        context = _ref3.context,
        symbol = _ref3.symbol,
        loc = _ref3.loc;
    false && (0, _util.assert)(name !== 'this', "You called builders.freeVar() with 'this'. Call builders.this instead");
    false && (0, _util.assert)(name[0] !== '@', "You called builders.freeVar() with '" + name + "'. Call builders.at('" + name + "') instead");
    return new ASTv2.FreeVarReference({
      name: name,
      resolution: context,
      symbol: symbol,
      loc: loc
    });
  };

  _proto.localVar = function localVar(name, symbol, isTemplateLocal, loc) {
    false && (0, _util.assert)(name !== 'this', "You called builders.var() with 'this'. Call builders.this instead");
    false && (0, _util.assert)(name[0] !== '@', "You called builders.var() with '" + name + "'. Call builders.at('" + name + "') instead");
    return new ASTv2.LocalVarReference({
      loc: loc,
      name: name,
      isTemplateLocal: isTemplateLocal,
      symbol: symbol
    });
  };

  _proto.sexp = function sexp(parts, loc) {
    return new ASTv2.CallExpression({
      loc: loc,
      callee: parts.callee,
      args: parts.args
    });
  };

  _proto.interpolate = function interpolate(parts, loc) {
    (0, _util.assertPresent)(parts);
    return new ASTv2.InterpolateExpression({
      loc: loc,
      parts: parts
    });
  };

  _proto.literal = function literal(value, loc) {
    return new ASTv2.LiteralExpression({
      loc: loc,
      value: value
    });
  } // STATEMENTS //
  ;

  _proto.append = function append(_ref4, loc) {
    var table = _ref4.table,
        trusting = _ref4.trusting,
        value = _ref4.value;
    return new ASTv2.AppendContent({
      table: table,
      trusting: trusting,
      value: value,
      loc: loc
    });
  };

  _proto.modifier = function modifier(_ref5, loc) {
    var callee = _ref5.callee,
        args = _ref5.args;
    return new ASTv2.ElementModifier({
      loc: loc,
      callee: callee,
      args: args
    });
  };

  _proto.namedBlocks = function namedBlocks(blocks, loc) {
    return new ASTv2.NamedBlocks({
      loc: loc,
      blocks: blocks
    });
  };

  _proto.blockStatement = function blockStatement(_a, loc) {
    var symbols = _a.symbols,
        program = _a.program,
        _a$inverse = _a.inverse,
        inverse = _a$inverse === void 0 ? null : _a$inverse,
        call = __rest(_a, ["symbols", "program", "inverse"]);

    var blocksLoc = program.loc;
    var blocks = [this.namedBlock(_slice.SourceSlice.synthetic('default'), program, program.loc)];

    if (inverse) {
      blocksLoc = blocksLoc.extend(inverse.loc);
      blocks.push(this.namedBlock(_slice.SourceSlice.synthetic('else'), inverse, inverse.loc));
    }

    return new ASTv2.InvokeBlock({
      loc: loc,
      blocks: this.namedBlocks(blocks, blocksLoc),
      callee: call.callee,
      args: call.args
    });
  };

  _proto.element = function element(options) {
    return new BuildElement(options);
  };

  return Builder;
}();

exports.Builder = Builder;

var BuildElement = /*#__PURE__*/function () {
  function BuildElement(base) {
    this.base = base;
    this.builder = new Builder();
  }

  var _proto2 = BuildElement.prototype;

  _proto2.simple = function simple(tag, body, loc) {
    return new ASTv2.SimpleElement((0, _util.assign)({
      tag: tag,
      body: body,
      componentArgs: [],
      loc: loc
    }, this.base));
  };

  _proto2.named = function named(name, block, loc) {
    return new ASTv2.NamedBlock((0, _util.assign)({
      name: name,
      block: block,
      componentArgs: [],
      loc: loc
    }, this.base));
  };

  _proto2.selfClosingComponent = function selfClosingComponent(callee, loc) {
    return new ASTv2.InvokeComponent((0, _util.assign)({
      loc: loc,
      callee: callee,
      // point the empty named blocks at the `/` self-closing tag
      blocks: new ASTv2.NamedBlocks({
        blocks: [],
        loc: loc.sliceEndChars({
          skipEnd: 1,
          chars: 1
        })
      })
    }, this.base));
  };

  _proto2.componentWithDefaultBlock = function componentWithDefaultBlock(callee, children, symbols, loc) {
    var block = this.builder.block(symbols, children, loc);
    var namedBlock = this.builder.namedBlock(_slice.SourceSlice.synthetic('default'), block, loc); // BUILDER.simpleNamedBlock('default', children, symbols, loc);

    return new ASTv2.InvokeComponent((0, _util.assign)({
      loc: loc,
      callee: callee,
      blocks: this.builder.namedBlocks([namedBlock], namedBlock.loc)
    }, this.base));
  };

  _proto2.componentWithNamedBlocks = function componentWithNamedBlocks(callee, blocks, loc) {
    return new ASTv2.InvokeComponent((0, _util.assign)({
      loc: loc,
      callee: callee,
      blocks: this.builder.namedBlocks(blocks, _spanList.SpanList.range(blocks))
    }, this.base));
  };

  return BuildElement;
}();

exports.BuildElement = BuildElement;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdjItYS9idWlsZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPQSxJQUFNLE9BQU4sR0FBQSxhQUFBLFlBQUE7QUFBQSxXQUFBLE9BQUEsR0FBQSxDQUFBOztBQUFBLE1BQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUEsQ0FDRTs7QUFERixFQUFBLE1BQUEsQ0FBQSxRQUFBLEdBR0UsU0FBQSxRQUFBLENBQUEsT0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBR2lCO0FBRWYsV0FBTyxJQUFJLEtBQUssQ0FBVCxRQUFBLENBQW1CO0FBQ3hCLE1BQUEsS0FBSyxFQURtQixPQUFBO0FBRXhCLE1BQUEsSUFGd0IsRUFBQSxJQUFBO0FBR3hCLE1BQUEsR0FBQSxFQUFBO0FBSHdCLEtBQW5CLENBQVA7QUFSSixHQUFBLENBZUU7QUFmRjs7QUFBQSxFQUFBLE1BQUEsQ0FBQSxLQUFBLEdBaUJFLFNBQUEsS0FBQSxDQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUEyRTtBQUN6RSxXQUFPLElBQUksS0FBSyxDQUFULEtBQUEsQ0FBZ0I7QUFDckIsTUFBQSxLQUFLLEVBRGdCLE9BQUE7QUFFckIsTUFBQSxJQUZxQixFQUFBLElBQUE7QUFHckIsTUFBQSxHQUFBLEVBQUE7QUFIcUIsS0FBaEIsQ0FBUDtBQWxCSixHQUFBOztBQUFBLEVBQUEsTUFBQSxDQUFBLFVBQUEsR0F5QkUsU0FBQSxVQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxHQUFBLEVBQWlFO0FBQy9ELFdBQU8sSUFBSSxLQUFLLENBQVQsVUFBQSxDQUFxQjtBQUMxQixNQUFBLElBRDBCLEVBQUEsSUFBQTtBQUUxQixNQUFBLEtBRjBCLEVBQUEsS0FBQTtBQUcxQixNQUFBLEtBQUssRUFIcUIsRUFBQTtB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QkFBQSxLQUFBLENBQWpDLE1BQWlDLENBQWpDO0FBSFYsS0FERixFQU1FLEtBUEosSUFDRSxDQURLLENBQVA7QUE3RUosR0FBQTs7QUFBQSxTQUFBLFlBQUE7QUFBQSxDQUFBLEVBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFByZXNlbnRBcnJheSB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgYXNzZXJ0LCBhc3NlcnRQcmVzZW50LCBhc3NpZ24gfSBmcm9tICdAZ2xpbW1lci91dGlsJztcblxuaW1wb3J0IHsgU291cmNlU2xpY2UgfSBmcm9tICcuLi9zb3VyY2Uvc2xpY2UnO1xuaW1wb3J0IHsgU291cmNlU3BhbiB9IGZyb20gJy4uL3NvdXJjZS9zcGFuJztcbmltcG9ydCB7IFNwYW5MaXN0IH0gZnJvbSAnLi4vc291cmNlL3NwYW4tbGlzdCc7XG5pbXBvcnQgeyBCbG9ja1N5bWJvbFRhYmxlLCBQcm9ncmFtU3ltYm9sVGFibGUsIFN5bWJvbFRhYmxlIH0gZnJvbSAnLi4vc3ltYm9sLXRhYmxlJztcbmltcG9ydCAqIGFzIEFTVHYyIGZyb20gJy4vYXBpJztcblxuZXhwb3J0IGludGVyZmFjZSBDYWxsUGFydHMge1xuICBjYWxsZWU6IEFTVHYyLkV4cHJlc3Npb25Ob2RlO1xuICBhcmdzOiBBU1R2Mi5BcmdzO1xufVxuXG5leHBvcnQgY2xhc3MgQnVpbGRlciB7XG4gIC8vIFRFTVBMQVRFIC8vXG5cbiAgdGVtcGxhdGUoXG4gICAgc3ltYm9sczogUHJvZ3JhbVN5bWJvbFRhYmxlLFxuICAgIGJvZHk6IEFTVHYyLkNvbnRlbnROb2RlW10sXG4gICAgbG9jOiBTb3VyY2VTcGFuXG4gICk6IEFTVHYyLlRlbXBsYXRlIHtcbiAgICByZXR1cm4gbmV3IEFTVHYyLlRlbXBsYXRlKHtcbiAgICAgIHRhYmxlOiBzeW1ib2xzLFxuICAgICAgYm9keSxcbiAgICAgIGxvYyxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIElOVEVSTkFMICh0aGVzZSBub2RlcyBjYW5ub3QgYmUgcmVhY2hlZCB3aGVuIGRvaW5nIGdlbmVyYWwtcHVycG9zZSB2aXNpdGluZykgLy9cblxuICBibG9jayhzeW1ib2xzOiBCbG9ja1N5bWJvbFRhYmxlLCBib2R5OiBBU1R2Mi5Db250ZW50Tm9kZVtdLCBsb2M6IFNvdXJjZVNwYW4pOiBBU1R2Mi5CbG9jayB7XG4gICAgcmV0dXJuIG5ldyBBU1R2Mi5CbG9jayh7XG4gICAgICBzY29wZTogc3ltYm9scyxcbiAgICAgIGJvZHksXG4gICAgICBsb2MsXG4gICAgfSk7XG4gIH1cblxuICBuYW1lZEJsb2NrKG5hbWU6IFNvdXJjZVNsaWNlLCBibG9jazogQVNUdjIuQmxvY2ssIGxvYzogU291cmNlU3Bhbik6IEFTVHYyLk5hbWVkQmxvY2sge1xuICAgIHJldHVybiBuZXcgQVNUdjIuTmFtZWRCbG9jayh7XG4gICAgICBuYW1lLFxuICAgICAgYmxvY2ssXG4gICAgICBhdHRyczogW10sXG4gICAgICBjb21wb25lbnRBcmdzOiBbXSxcbiAgICAgIG1vZGlmaWVyczogW10sXG4gICAgICBsb2MsXG4gICAgfSk7XG4gIH1cblxuICBzaW1wbGVOYW1lZEJsb2NrKG5hbWU6IFNvdXJjZVNsaWNlLCBibG9jazogQVNUdjIuQmxvY2ssIGxvYzogU291cmNlU3Bhbik6IEFTVHYyLk5hbWVkQmxvY2sge1xuICAgIHJldHVybiBuZXcgQnVpbGRFbGVtZW50KHtcbiAgICAgIHNlbGZDbG9zaW5nOiBmYWxzZSxcbiAgICAgIGF0dHJzOiBbXSxcbiAgICAgIGNvbXBvbmVudEFyZ3M6IFtdLFxuICAgICAgbW9kaWZpZXJzOiBbXSxcbiAgICAgIGNvbW1lbnRzOiBbXSxcbiAgICB9KS5uYW1lZChuYW1lLCBibG9jaywgbG9jKTtcbiAgfVxuXG4gIHNsaWNlKGNoYXJzOiBzdHJpbmcsIGxvYzogU291cmNlU3Bhbik6IFNvdXJjZVNsaWNlIHtcbiAgICByZXR1cm4gbmV3IFNvdXJjZVNsaWNlKHtcbiAgICAgIGxvYyxcbiAgICAgIGNoYXJzLFxuICAgIH0pO1xuICB9XG5cbiAgYXJncyhcbiAgICBwb3NpdGlvbmFsOiBBU1R2Mi5Qb3NpdGlvbmFsQXJndW1lbnRzLFxuICAgIG5hbWVkOiBBU1R2Mi5OYW1lZEFyZ3VtZW50cyxcbiAgICBsb2M6IFNvdXJjZVNwYW5cbiAgKTogQVNUdjIuQXJncyB7XG4gICAgcmV0dXJuIG5ldyBBU1R2Mi5BcmdzKHtcbiAgICAgIGxvYyxcbiAgICAgIHBvc2l0aW9uYWwsXG4gICAgICBuYW1lZCxcbiAgICB9KTtcbiAgfVxuXG4gIHBvc2l0aW9uYWwoZXhwcnM6IEFTVHYyLkV4cHJlc3Npb25Ob2RlW10sIGxvYzogU291cmNlU3Bhbik6IEFTVHYyLlBvc2l0aW9uYWxBcmd1bWVudHMge1xuICAgIHJldHVybiBuZXcgQVNUdjIuUG9zaXRpb25hbEFyZ3VtZW50cyh7XG4gICAgICBsb2MsXG4gICAgICBleHBycyxcbiAgICB9KTtcbiAgfVxuXG4gIG5hbWVkQXJndW1lbnQoa2V5OiBTb3VyY2VTbGljZSwgdmFsdWU6IEFTVHYyLkV4cHJlc3Npb25Ob2RlKTogQVNUdjIuTmFtZWRBcmd1bWVudCB7XG4gICAgcmV0dXJuIG5ldyBBU1R2Mi5OYW1lZEFyZ3VtZW50KHtcbiAgICAgIG5hbWU6IGtleSxcbiAgICAgIHZhbHVlLFxuICAgIH0pO1xuICB9XG5cbiAgbmFtZWQoZW50cmllczogQVNUdjIuTmFtZWRBcmd1bWVudFtdLCBsb2M6IFNvdXJjZVNwYW4pOiBBU1R2Mi5OYW1lZEFyZ3VtZW50cyB7XG4gICAgcmV0dXJuIG5ldyBBU1R2Mi5OYW1lZEFyZ3VtZW50cyh7XG4gICAgICBsb2MsXG4gICAgICBlbnRyaWVzLFxuICAgIH0pO1xuICB9XG5cbiAgYXR0cihcbiAgICB7XG4gICAgICBuYW1lLFxuICAgICAgdmFsdWUsXG4gICAgICB0cnVzdGluZyxcbiAgICB9OiB7IG5hbWU6IFNvdXJjZVNsaWNlOyB2YWx1ZTogQVNUdjIuRXhwcmVzc2lvbk5vZGU7IHRydXN0aW5nOiBib29sZWFuIH0sXG4gICAgbG9jOiBTb3VyY2VTcGFuXG4gICk6IEFTVHYyLkh0bWxBdHRyIHtcbiAgICByZXR1cm4gbmV3IEFTVHYyLkh0bWxBdHRyKHtcbiAgICAgIGxvYyxcbiAgICAgIG5hbWUsXG4gICAgICB2YWx1ZSxcbiAgICAgIHRydXN0aW5nLFxuICAgIH0pO1xuICB9XG5cbiAgc3BsYXRBdHRyKHN5bWJvbDogbnVtYmVyLCBsb2M6IFNvdXJjZVNwYW4pOiBBU1R2Mi5TcGxhdEF0dHIge1xuICAgIHJldHVybiBuZXcgQVNUdjIuU3BsYXRBdHRyKHtcbiAgICAgIHN5bWJvbCxcbiAgICAgIGxvYyxcbiAgICB9KTtcbiAgfVxuXG4gIGFyZyhcbiAgICB7XG4gICAgICBuYW1lLFxuICAgICAgdmFsdWUsXG4gICAgICB0cnVzdGluZyxcbiAgICB9OiB7IG5hbWU6IFNvdXJjZVNsaWNlOyB2YWx1ZTogQVNUdjIuRXhwcmVzc2lvbk5vZGU7IHRydXN0aW5nOiBib29sZWFuIH0sXG4gICAgbG9jOiBTb3VyY2VTcGFuXG4gICk6IEFTVHYyLkNvbXBvbmVudEFyZyB7XG4gICAgcmV0dXJuIG5ldyBBU1R2Mi5Db21wb25lbnRBcmcoe1xuICAgICAgbmFtZSxcbiAgICAgIHZhbHVlLFxuICAgICAgdHJ1c3RpbmcsXG4gICAgICBsb2MsXG4gICAgfSk7XG4gIH1cblxuICAvLyBFWFBSRVNTSU9OUyAvL1xuXG4gIHBhdGgoaGVhZDogQVNUdjIuVmFyaWFibGVSZWZlcmVuY2UsIHRhaWw6IFNvdXJjZVNsaWNlW10sIGxvYzogU291cmNlU3Bhbik6IEFTVHYyLlBhdGhFeHByZXNzaW9uIHtcbiAgICByZXR1cm4gbmV3IEFTVHYyLlBhdGhFeHByZXNzaW9uKHtcbiAgICAgIGxvYyxcbiAgICAgIHJlZjogaGVhZCxcbiAgICAgIHRhaWwsXG4gICAgfSk7XG4gIH1cblxuICBzZWxmKGxvYzogU291cmNlU3Bhbik6IEFTVHYyLlZhcmlhYmxlUmVmZXJlbmNlIHtcbiAgICByZXR1cm4gbmV3IEFTVHYyLlRoaXNSZWZlcmVuY2Uoe1xuICAgICAgbG9jLFxuICAgIH0pO1xuICB9XG5cbiAgYXQobmFtZTogc3RyaW5nLCBzeW1ib2w6IG51bWJlciwgbG9jOiBTb3VyY2VTcGFuKTogQVNUdjIuVmFyaWFibGVSZWZlcmVuY2Uge1xuICAgIC8vIHRoZSBgQGAgc2hvdWxkIGJlIGluY2x1ZGVkIHNvIHdlIGhhdmUgYSBjb21wbGV0ZSBzb3VyY2UgcmFuZ2VcbiAgICBhc3NlcnQobmFtZVswXSA9PT0gJ0AnLCBgY2FsbCBidWlsZGVycy5hdCgpIHdpdGggYSBzdHJpbmcgdGhhdCBzdGFydHMgd2l0aCAnQCdgKTtcblxuICAgIHJldHVybiBuZXcgQVNUdjIuQXJnUmVmZXJlbmNlKHtcbiAgICAgIGxvYyxcbiAgICAgIG5hbWU6IG5ldyBTb3VyY2VTbGljZSh7IGxvYywgY2hhcnM6IG5hbWUgfSksXG4gICAgICBzeW1ib2wsXG4gICAgfSk7XG4gIH1cblxuICBmcmVlVmFyKHtcbiAgICBuYW1lLFxuICAgIGNvbnRleHQsXG4gICAgc3ltYm9sLFxuICAgIGxvYyxcbiAgfToge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBjb250ZXh0OiBBU1R2Mi5GcmVlVmFyUmVzb2x1dGlvbjtcbiAgICBzeW1ib2w6IG51bWJlcjtcbiAgICBsb2M6IFNvdXJjZVNwYW47XG4gIH0pOiBBU1R2Mi5WYXJpYWJsZVJlZmVyZW5jZSB7XG4gICAgYXNzZXJ0KFxuICAgICAgbmFtZSAhPT0gJ3RoaXMnLFxuICAgICAgYFlvdSBjYWxsZWQgYnVpbGRlcnMuZnJlZVZhcigpIHdpdGggJ3RoaXMnLiBDYWxsIGJ1aWxkZXJzLnRoaXMgaW5zdGVhZGBcbiAgICApO1xuICAgIGFzc2VydChcbiAgICAgIG5hbWVbMF0gIT09ICdAJyxcbiAgICAgIGBZb3UgY2FsbGVkIGJ1aWxkZXJzLmZyZWVWYXIoKSB3aXRoICcke25hbWV9Jy4gQ2FsbCBidWlsZGVycy5hdCgnJHtuYW1lfScpIGluc3RlYWRgXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgQVNUdjIuRnJlZVZhclJlZmVyZW5jZSh7XG4gICAgICBuYW1lLFxuICAgICAgcmVzb2x1dGlvbjogY29udGV4dCxcbiAgICAgIHN5bWJvbCxcbiAgICAgIGxvYyxcbiAgICB9KTtcbiAgfVxuXG4gIGxvY2FsVmFyKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBzeW1ib2w6IG51bWJlcixcbiAgICBpc1RlbXBsYXRlTG9jYWw6IGJvb2xlYW4sXG4gICAgbG9jOiBTb3VyY2VTcGFuXG4gICk6IEFTVHYyLlZhcmlhYmxlUmVmZXJlbmNlIHtcbiAgICBhc3NlcnQobmFtZSAhPT0gJ3RoaXMnLCBgWW91IGNhbGxlZCBidWlsZGVycy52YXIoKSB3aXRoICd0aGlzJy4gQ2FsbCBidWlsZGVycy50aGlzIGluc3RlYWRgKTtcbiAgICBhc3NlcnQoXG4gICAgICBuYW1lWzBdICE9PSAnQCcsXG4gICAgICBgWW91IGNhbGxlZCBidWlsZGVycy52YXIoKSB3aXRoICcke25hbWV9Jy4gQ2FsbCBidWlsZGVycy5hdCgnJHtuYW1lfScpIGluc3RlYWRgXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgQVNUdjIuTG9jYWxWYXJSZWZlcmVuY2Uoe1xuICAgICAgbG9jLFxuICAgICAgbmFtZSxcbiAgICAgIGlzVGVtcGxhdGVMb2NhbCxcbiAgICAgIHN5bWJvbCxcbiAgICB9KTtcbiAgfVxuXG4gIHNleHAocGFydHM6IENhbGxQYXJ0cywgbG9jOiBTb3VyY2VTcGFuKTogQVNUdjIuQ2FsbEV4cHJlc3Npb24ge1xuICAgIHJldHVybiBuZXcgQVNUdjIuQ2FsbEV4cHJlc3Npb24oe1xuICAgICAgbG9jLFxuICAgICAgY2FsbGVlOiBwYXJ0cy5jYWxsZWUsXG4gICAgICBhcmdzOiBwYXJ0cy5hcmdzLFxuICAgIH0pO1xuICB9XG5cbiAgaW50ZXJwb2xhdGUocGFydHM6IEFTVHYyLkV4cHJlc3Npb25Ob2RlW10sIGxvYzogU291cmNlU3Bhbik6IEFTVHYyLkludGVycG9sYXRlRXhwcmVzc2lvbiB7XG4gICAgYXNzZXJ0UHJlc2VudChwYXJ0cyk7XG5cbiAgICByZXR1cm4gbmV3IEFTVHYyLkludGVycG9sYXRlRXhwcmVzc2lvbih7XG4gICAgICBsb2MsXG4gICAgICBwYXJ0cyxcbiAgICB9KTtcbiAgfVxuXG4gIGxpdGVyYWwodmFsdWU6IHN0cmluZywgbG9jOiBTb3VyY2VTcGFuKTogQVNUdjIuTGl0ZXJhbEV4cHJlc3Npb24gJiB7IHZhbHVlOiBzdHJpbmcgfTtcbiAgbGl0ZXJhbCh2YWx1ZTogbnVtYmVyLCBsb2M6IFNvdXJjZVNwYW4pOiBBU1R2Mi5MaXRlcmFsRXhwcmVzc2lvbiAmIHsgdmFsdWU6IG51bWJlciB9O1xuICBsaXRlcmFsKHZhbHVlOiBib29sZWFuLCBsb2M6IFNvdXJjZVNwYW4pOiBBU1R2Mi5MaXRlcmFsRXhwcmVzc2lvbiAmIHsgdmFsdWU6IGJvb2xlYW4gfTtcbiAgbGl0ZXJhbCh2YWx1ZTogbnVsbCwgbG9jOiBTb3VyY2VTcGFuKTogQVNUdjIuTGl0ZXJhbEV4cHJlc3Npb24gJiB7IHZhbHVlOiBudWxsIH07XG4gIGxpdGVyYWwodmFsdWU6IHVuZGVmaW5lZCwgbG9jOiBTb3VyY2VTcGFuKTogQVNUdjIuTGl0ZXJhbEV4cHJlc3Npb24gJiB7IHZhbHVlOiB1bmRlZmluZWQgfTtcbiAgbGl0ZXJhbChcbiAgICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWQsXG4gICAgbG9jOiBTb3VyY2VTcGFuXG4gICk6IEFTVHYyLkxpdGVyYWxFeHByZXNzaW9uO1xuICBsaXRlcmFsKFxuICAgIHZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgICBsb2M6IFNvdXJjZVNwYW5cbiAgKTogQVNUdjIuTGl0ZXJhbEV4cHJlc3Npb24ge1xuICAgIHJldHVybiBuZXcgQVNUdjIuTGl0ZXJhbEV4cHJlc3Npb24oe1xuICAgICAgbG9jLFxuICAgICAgdmFsdWUsXG4gICAgfSk7XG4gIH1cblxuICAvLyBTVEFURU1FTlRTIC8vXG5cbiAgYXBwZW5kKFxuICAgIHtcbiAgICAgIHRhYmxlLFxuICAgICAgdHJ1c3RpbmcsXG4gICAgICB2YWx1ZSxcbiAgICB9OiB7IHRhYmxlOiBTeW1ib2xUYWJsZTsgdHJ1c3Rpbmc6IGJvb2xlYW47IHZhbHVlOiBBU1R2Mi5FeHByZXNzaW9uTm9kZSB9LFxuICAgIGxvYzogU291cmNlU3BhblxuICApOiBBU1R2Mi5BcHBlbmRDb250ZW50IHtcbiAgICByZXR1cm4gbmV3IEFTVHYyLkFwcGVuZENvbnRlbnQoe1xuICAgICAgdGFibGUsXG4gICAgICB0cnVzdGluZyxcbiAgICAgIHZhbHVlLFxuICAgICAgbG9jLFxuICAgIH0pO1xuICB9XG5cbiAgbW9kaWZpZXIoeyBjYWxsZWUsIGFyZ3MgfTogQ2FsbFBhcnRzLCBsb2M6IFNvdXJjZVNwYW4pOiBBU1R2Mi5FbGVtZW50TW9kaWZpZXIge1xuICAgIHJldHVybiBuZXcgQVNUdjIuRWxlbWVudE1vZGlmaWVyKHtcbiAgICAgIGxvYyxcbiAgICAgIGNhbGxlZSxcbiAgICAgIGFyZ3MsXG4gICAgfSk7XG4gIH1cblxuICBuYW1lZEJsb2NrcyhibG9ja3M6IEFTVHYyLk5hbWVkQmxvY2tbXSwgbG9jOiBTb3VyY2VTcGFuKTogQVNUdjIuTmFtZWRCbG9ja3Mge1xuICAgIHJldHVybiBuZXcgQVNUdjIuTmFtZWRCbG9ja3Moe1xuICAgICAgbG9jLFxuICAgICAgYmxvY2tzLFxuICAgIH0pO1xuICB9XG5cbiAgYmxvY2tTdGF0ZW1lbnQoXG4gICAge1xuICAgICAgc3ltYm9scyxcbiAgICAgIHByb2dyYW0sXG4gICAgICBpbnZlcnNlID0gbnVsbCxcbiAgICAgIC4uLmNhbGxcbiAgICB9OiB7XG4gICAgICBzeW1ib2xzOiBTeW1ib2xUYWJsZTtcbiAgICAgIHByb2dyYW06IEFTVHYyLkJsb2NrO1xuICAgICAgaW52ZXJzZT86IEFTVHYyLkJsb2NrIHwgbnVsbDtcbiAgICB9ICYgQ2FsbFBhcnRzLFxuICAgIGxvYzogU291cmNlU3BhblxuICApOiBBU1R2Mi5JbnZva2VCbG9jayB7XG4gICAgbGV0IGJsb2Nrc0xvYyA9IHByb2dyYW0ubG9jO1xuICAgIGxldCBibG9ja3M6IFByZXNlbnRBcnJheTxBU1R2Mi5OYW1lZEJsb2NrPiA9IFtcbiAgICAgIHRoaXMubmFtZWRCbG9jayhTb3VyY2VTbGljZS5zeW50aGV0aWMoJ2RlZmF1bHQnKSwgcHJvZ3JhbSwgcHJvZ3JhbS5sb2MpLFxuICAgIF07XG4gICAgaWYgKGludmVyc2UpIHtcbiAgICAgIGJsb2Nrc0xvYyA9IGJsb2Nrc0xvYy5leHRlbmQoaW52ZXJzZS5sb2MpO1xuICAgICAgYmxvY2tzLnB1c2godGhpcy5uYW1lZEJsb2NrKFNvdXJjZVNsaWNlLnN5bnRoZXRpYygnZWxzZScpLCBpbnZlcnNlLCBpbnZlcnNlLmxvYykpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQVNUdjIuSW52b2tlQmxvY2soe1xuICAgICAgbG9jLFxuICAgICAgYmxvY2tzOiB0aGlzLm5hbWVkQmxvY2tzKGJsb2NrcywgYmxvY2tzTG9jKSxcbiAgICAgIGNhbGxlZTogY2FsbC5jYWxsZWUsXG4gICAgICBhcmdzOiBjYWxsLmFyZ3MsXG4gICAgfSk7XG4gIH1cblxuICBlbGVtZW50KG9wdGlvbnM6IEJ1aWxkQmFzZUVsZW1lbnQpOiBCdWlsZEVsZW1lbnQge1xuICAgIHJldHVybiBuZXcgQnVpbGRFbGVtZW50KG9wdGlvbnMpO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnVpbGRCYXNlRWxlbWVudCB7XG4gIHNlbGZDbG9zaW5nOiBib29sZWFuO1xuICBhdHRyczogQVNUdjIuSHRtbE9yU3BsYXRBdHRyW107XG4gIGNvbXBvbmVudEFyZ3M6IEFTVHYyLkNvbXBvbmVudEFyZ1tdO1xuICBtb2RpZmllcnM6IEFTVHYyLkVsZW1lbnRNb2RpZmllcltdO1xuICBjb21tZW50czogQVNUdjIuR2xpbW1lckNvbW1lbnRbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEJ1aWxkRWxlbWVudCB7XG4gIHJlYWRvbmx5IGJ1aWxkZXI6IEJ1aWxkZXI7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGJhc2U6IEJ1aWxkQmFzZUVsZW1lbnQpIHtcbiAgICB0aGlzLmJ1aWxkZXIgPSBuZXcgQnVpbGRlcigpO1xuICB9XG5cbiAgc2ltcGxlKHRhZzogU291cmNlU2xpY2UsIGJvZHk6IEFTVHYyLkNvbnRlbnROb2RlW10sIGxvYzogU291cmNlU3Bhbik6IEFTVHYyLlNpbXBsZUVsZW1lbnQge1xuICAgIHJldHVybiBuZXcgQVNUdjIuU2ltcGxlRWxlbWVudChcbiAgICAgIGFzc2lnbihcbiAgICAgICAge1xuICAgICAgICAgIHRhZyxcbiAgICAgICAgICBib2R5LFxuICAgICAgICAgIGNvbXBvbmVudEFyZ3M6IFtdLFxuICAgICAgICAgIGxvYyxcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5iYXNlXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIG5hbWVkKG5hbWU6IFNvdXJjZVNsaWNlLCBibG9jazogQVNUdjIuQmxvY2ssIGxvYzogU291cmNlU3Bhbik6IEFTVHYyLk5hbWVkQmxvY2sge1xuICAgIHJldHVybiBuZXcgQVNUdjIuTmFtZWRCbG9jayhcbiAgICAgIGFzc2lnbihcbiAgICAgICAge1xuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgYmxvY2ssXG4gICAgICAgICAgY29tcG9uZW50QXJnczogW10sXG4gICAgICAgICAgbG9jLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmJhc2VcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgc2VsZkNsb3NpbmdDb21wb25lbnQoY2FsbGVlOiBBU1R2Mi5FeHByZXNzaW9uTm9kZSwgbG9jOiBTb3VyY2VTcGFuKTogQVNUdjIuSW52b2tlQ29tcG9uZW50IHtcbiAgICByZXR1cm4gbmV3IEFTVHYyLkludm9rZUNvbXBvbmVudChcbiAgICAgIGFzc2lnbihcbiAgICAgICAge1xuICAgICAgICAgIGxvYyxcbiAgICAgICAgICBjYWxsZWUsXG4gICAgICAgICAgLy8gcG9pbnQgdGhlIGVtcHR5IG5hbWVkIGJsb2NrcyBhdCB0aGUgYC9gIHNlbGYtY2xvc2luZyB0YWdcbiAgICAgICAgICBibG9ja3M6IG5ldyBBU1R2Mi5OYW1lZEJsb2Nrcyh7XG4gICAgICAgICAgICBibG9ja3M6IFtdLFxuICAgICAgICAgICAgbG9jOiBsb2Muc2xpY2VFbmRDaGFycyh7IHNraXBFbmQ6IDEsIGNoYXJzOiAxIH0pLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmJhc2VcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgY29tcG9uZW50V2l0aERlZmF1bHRCbG9jayhcbiAgICBjYWxsZWU6IEFTVHYyLkV4cHJlc3Npb25Ob2RlLFxuICAgIGNoaWxkcmVuOiBBU1R2Mi5Db250ZW50Tm9kZVtdLFxuICAgIHN5bWJvbHM6IEJsb2NrU3ltYm9sVGFibGUsXG4gICAgbG9jOiBTb3VyY2VTcGFuXG4gICk6IEFTVHYyLkludm9rZUNvbXBvbmVudCB7XG4gICAgbGV0IGJsb2NrID0gdGhpcy5idWlsZGVyLmJsb2NrKHN5bWJvbHMsIGNoaWxkcmVuLCBsb2MpO1xuICAgIGxldCBuYW1lZEJsb2NrID0gdGhpcy5idWlsZGVyLm5hbWVkQmxvY2soU291cmNlU2xpY2Uuc3ludGhldGljKCdkZWZhdWx0JyksIGJsb2NrLCBsb2MpOyAvLyBCVUlMREVSLnNpbXBsZU5hbWVkQmxvY2soJ2RlZmF1bHQnLCBjaGlsZHJlbiwgc3ltYm9scywgbG9jKTtcblxuICAgIHJldHVybiBuZXcgQVNUdjIuSW52b2tlQ29tcG9uZW50KFxuICAgICAgYXNzaWduKFxuICAgICAgICB7XG4gICAgICAgICAgbG9jLFxuICAgICAgICAgIGNhbGxlZSxcbiAgICAgICAgICBibG9ja3M6IHRoaXMuYnVpbGRlci5uYW1lZEJsb2NrcyhbbmFtZWRCbG9ja10sIG5hbWVkQmxvY2subG9jKSxcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5iYXNlXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpdGhOYW1lZEJsb2NrcyhcbiAgICBjYWxsZWU6IEFTVHYyLkV4cHJlc3Npb25Ob2RlLFxuICAgIGJsb2NrczogUHJlc2VudEFycmF5PEFTVHYyLk5hbWVkQmxvY2s+LFxuICAgIGxvYzogU291cmNlU3BhblxuICApOiBBU1R2Mi5JbnZva2VDb21wb25lbnQge1xuICAgIHJldHVybiBuZXcgQVNUdjIuSW52b2tlQ29tcG9uZW50KFxuICAgICAgYXNzaWduKFxuICAgICAgICB7XG4gICAgICAgICAgbG9jLFxuICAgICAgICAgIGNhbGxlZSxcbiAgICAgICAgICBibG9ja3M6IHRoaXMuYnVpbGRlci5uYW1lZEJsb2NrcyhibG9ja3MsIFNwYW5MaXN0LnJhbmdlKGJsb2NrcykpLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmJhc2VcbiAgICAgIClcbiAgICApO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9