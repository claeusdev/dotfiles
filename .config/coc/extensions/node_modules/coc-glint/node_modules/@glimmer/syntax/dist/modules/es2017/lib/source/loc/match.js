var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
};

var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
};

var _whens, _map, _whens_1;

import { assert, isPresent } from '@glimmer/util';
/**
 * This file implements the DSL used by span and offset in places where they need to exhaustively
 * consider all combinations of states (Handlebars offsets, character offsets and invisible/broken
 * offsets).
 *
 * It's probably overkill, but it makes the code that uses it clear. It could be refactored or
 * removed.
 */

export const MatchAny = 'MATCH_ANY';
export const IsInvisible = 'IS_INVISIBLE';

class WhenList {
  constructor(whens) {
    _whens.set(this, void 0);

    __classPrivateFieldSet(this, _whens, whens);
  }

  first(kind) {
    for (let when of __classPrivateFieldGet(this, _whens)) {
      let value = when.match(kind);

      if (isPresent(value)) {
        return value[0];
      }
    }

    return null;
  }

}

_whens = new WeakMap();

class When {
  constructor() {
    _map.set(this, new Map());
  }

  get(pattern, or) {
    let value = __classPrivateFieldGet(this, _map).get(pattern);

    if (value) {
      return value;
    }

    value = or();

    __classPrivateFieldGet(this, _map).set(pattern, value);

    return value;
  }

  add(pattern, out) {
    __classPrivateFieldGet(this, _map).set(pattern, out);
  }

  match(kind) {
    let pattern = patternFor(kind);
    let out = [];

    let exact = __classPrivateFieldGet(this, _map).get(pattern);

    let fallback = __classPrivateFieldGet(this, _map).get(MatchAny);

    if (exact) {
      out.push(exact);
    }

    if (fallback) {
      out.push(fallback);
    }

    return out;
  }

}

_map = new WeakMap();
export function match(callback) {
  return callback(new Matcher()).check();
}

class Matcher {
  constructor() {
    _whens_1.set(this, new When());
  }
  /**
   * You didn't exhaustively match all possibilities.
   */


  check() {
    return (left, right) => this.matchFor(left.kind, right.kind)(left, right);
  }

  matchFor(left, right) {
    let nesteds = __classPrivateFieldGet(this, _whens_1).match(left);

    (false && assert(isPresent(nesteds), `no match defined for (${left}, ${right}) and no AnyMatch defined either`));
    let callback = new WhenList(nesteds).first(right);
    (false && assert(callback !== null, `no match defined for (${left}, ${right}) and no AnyMatch defined either`));
    return callback;
  }

  when(left, right, // eslint-disable-next-line @typescript-eslint/no-explicit-any
  callback) {
    __classPrivateFieldGet(this, _whens_1).get(left, () => new When()).add(right, callback);

    return this;
  }

}

_whens_1 = new WeakMap();

function patternFor(kind) {
  switch (kind) {
    case "Broken"
    /* Broken */
    :
    case "InternalsSynthetic"
    /* InternalsSynthetic */
    :
    case "NonExistent"
    /* NonExistent */
    :
      return IsInvisible;

    default:
      return kind;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,