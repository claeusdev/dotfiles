var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import { assert, assertPresent, assign } from '@glimmer/util';
import { SourceSlice } from '../source/slice';
import { SpanList } from '../source/span-list';
import * as ASTv2 from './api';
export class Builder {
  // TEMPLATE //
  template(symbols, body, loc) {
    return new ASTv2.Template({
      table: symbols,
      body,
      loc
    });
  } // INTERNAL (these nodes cannot be reached when doing general-purpose visiting) //


  block(symbols, body, loc) {
    return new ASTv2.Block({
      scope: symbols,
      body,
      loc
    });
  }

  namedBlock(name, block, loc) {
    return new ASTv2.NamedBlock({
      name,
      block,
      attrs: [],
      componentArgs: [],
      modifiers: [],
      loc
    });
  }

  simpleNamedBlock(name, block, loc) {
    return new BuildElement({
      selfClosing: false,
      attrs: [],
      componentArgs: [],
      modifiers: [],
      comments: []
    }).named(name, block, loc);
  }

  slice(chars, loc) {
    return new SourceSlice({
      loc,
      chars
    });
  }

  args(positional, named, loc) {
    return new ASTv2.Args({
      loc,
      positional,
      named
    });
  }

  positional(exprs, loc) {
    return new ASTv2.PositionalArguments({
      loc,
      exprs
    });
  }

  namedArgument(key, value) {
    return new ASTv2.NamedArgument({
      name: key,
      value
    });
  }

  named(entries, loc) {
    return new ASTv2.NamedArguments({
      loc,
      entries
    });
  }

  attr({
    name,
    value,
    trusting
  }, loc) {
    return new ASTv2.HtmlAttr({
      loc,
      name,
      value,
      trusting
    });
  }

  splatAttr(symbol, loc) {
    return new ASTv2.SplatAttr({
      symbol,
      loc
    });
  }

  arg({
    name,
    value,
    trusting
  }, loc) {
    return new ASTv2.ComponentArg({
      name,
      value,
      trusting,
      loc
    });
  } // EXPRESSIONS //


  path(head, tail, loc) {
    return new ASTv2.PathExpression({
      loc,
      ref: head,
      tail
    });
  }

  self(loc) {
    return new ASTv2.ThisReference({
      loc
    });
  }

  at(name, symbol, loc) {
    // the `@` should be included so we have a complete source range
    (false && assert(name[0] === '@', `call builders.at() with a string that starts with '@'`));
    return new ASTv2.ArgReference({
      loc,
      name: new SourceSlice({
        loc,
        chars: name
      }),
      symbol
    });
  }

  freeVar({
    name,
    context,
    symbol,
    loc
  }) {
    (false && assert(name !== 'this', `You called builders.freeVar() with 'this'. Call builders.this instead`));
    (false && assert(name[0] !== '@', `You called builders.freeVar() with '${name}'. Call builders.at('${name}') instead`));
    return new ASTv2.FreeVarReference({
      name,
      resolution: context,
      symbol,
      loc
    });
  }

  localVar(name, symbol, isTemplateLocal, loc) {
    (false && assert(name !== 'this', `You called builders.var() with 'this'. Call builders.this instead`));
    (false && assert(name[0] !== '@', `You called builders.var() with '${name}'. Call builders.at('${name}') instead`));
    return new ASTv2.LocalVarReference({
      loc,
      name,
      isTemplateLocal,
      symbol
    });
  }

  sexp(parts, loc) {
    return new ASTv2.CallExpression({
      loc,
      callee: parts.callee,
      args: parts.args
    });
  }

  interpolate(parts, loc) {
    assertPresent(parts);
    return new ASTv2.InterpolateExpression({
      loc,
      parts
    });
  }

  literal(value, loc) {
    return new ASTv2.LiteralExpression({
      loc,
      value
    });
  } // STATEMENTS //


  append({
    table,
    trusting,
    value
  }, loc) {
    return new ASTv2.AppendContent({
      table,
      trusting,
      value,
      loc
    });
  }

  modifier({
    callee,
    args
  }, loc) {
    return new ASTv2.ElementModifier({
      loc,
      callee,
      args
    });
  }

  namedBlocks(blocks, loc) {
    return new ASTv2.NamedBlocks({
      loc,
      blocks
    });
  }

  blockStatement(_a, loc) {
    var {
      symbols,
      program,
      inverse = null
    } = _a,
        call = __rest(_a, ["symbols", "program", "inverse"]);

    let blocksLoc = program.loc;
    let blocks = [this.namedBlock(SourceSlice.synthetic('default'), program, program.loc)];

    if (inverse) {
      blocksLoc = blocksLoc.extend(inverse.loc);
      blocks.push(this.namedBlock(SourceSlice.synthetic('else'), inverse, inverse.loc));
    }

    return new ASTv2.InvokeBlock({
      loc,
      blocks: this.namedBlocks(blocks, blocksLoc),
      callee: call.callee,
      args: call.args
    });
  }

  element(options) {
    return new BuildElement(options);
  }

}
export class BuildElement {
  constructor(base) {
    this.base = base;
    this.builder = new Builder();
  }

  simple(tag, body, loc) {
    return new ASTv2.SimpleElement(assign({
      tag,
      body,
      componentArgs: [],
      loc
    }, this.base));
  }

  named(name, block, loc) {
    return new ASTv2.NamedBlock(assign({
      name,
      block,
      componentArgs: [],
      loc
    }, this.base));
  }

  selfClosingComponent(callee, loc) {
    return new ASTv2.InvokeComponent(assign({
      loc,
      callee,
      // point the empty named blocks at the `/` self-closing tag
      blocks: new ASTv2.NamedBlocks({
        blocks: [],
        loc: loc.sliceEndChars({
          skipEnd: 1,
          chars: 1
        })
      })
    }, this.base));
  }

  componentWithDefaultBlock(callee, children, symbols, loc) {
    let block = this.builder.block(symbols, children, loc);
    let namedBlock = this.builder.namedBlock(SourceSlice.synthetic('default'), block, loc); // BUILDER.simpleNamedBlock('default', children, symbols, loc);

    return new ASTv2.InvokeComponent(assign({
      loc,
      callee,
      blocks: this.builder.namedBlocks([namedBlock], namedBlock.loc)
    }, this.base));
  }

  componentWithNamedBlocks(callee, blocks, loc) {
    return new ASTv2.InvokeComponent(assign({
      loc,
      callee,
      blocks: this.builder.namedBlocks(blocks, SpanList.range(blocks))
    }, this.base));
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,