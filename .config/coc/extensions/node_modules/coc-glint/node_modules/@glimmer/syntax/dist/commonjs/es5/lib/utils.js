"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseElementBlockParams = parseElementBlockParams;
exports.childrenFor = childrenFor;
exports.appendChild = appendChild;
exports.isHBSLiteral = isHBSLiteral;
exports.printLiteral = printLiteral;

var _syntaxError = require("./syntax-error");

// Regex to validate the identifier for block parameters.
// Based on the ID validation regex in Handlebars.
var ID_INVERSE_PATTERN = /[!"#%-,\.\/;->@\[-\^`\{-~]/; // Checks the element's attributes to see if it uses block params.
// If it does, registers the block params with the program and
// removes the corresponding attributes from the element.

function parseElementBlockParams(element) {
  var params = parseBlockParams(element);
  if (params) element.blockParams = params;
}

function parseBlockParams(element) {
  var l = element.attributes.length;
  var attrNames = [];

  for (var i = 0; i < l; i++) {
    attrNames.push(element.attributes[i].name);
  }

  var asIndex = attrNames.indexOf('as');

  if (asIndex !== -1 && l > asIndex && attrNames[asIndex + 1].charAt(0) === '|') {
    // Some basic validation, since we're doing the parsing ourselves
    var paramsString = attrNames.slice(asIndex).join(' ');

    if (paramsString.charAt(paramsString.length - 1) !== '|' || paramsString.match(/\|/g).length !== 2) {
      throw (0, _syntaxError.generateSyntaxError)("Invalid block parameters syntax, '" + paramsString + "'", element.loc);
    }

    var params = [];

    for (var _i = asIndex + 1; _i < l; _i++) {
      var param = attrNames[_i].replace(/\|/g, '');

      if (param !== '') {
        if (ID_INVERSE_PATTERN.test(param)) {
          throw (0, _syntaxError.generateSyntaxError)("Invalid identifier for block parameters, '" + param + "'", element.loc);
        }

        params.push(param);
      }
    }

    if (params.length === 0) {
      throw (0, _syntaxError.generateSyntaxError)('Cannot use zero block parameters', element.loc);
    }

    element.attributes = element.attributes.slice(0, asIndex);
    return params;
  }

  return null;
}

function childrenFor(node) {
  switch (node.type) {
    case 'Block':
    case 'Template':
      return node.body;

    case 'ElementNode':
      return node.children;
  }
}

function appendChild(parent, node) {
  childrenFor(parent).push(node);
}

function isHBSLiteral(path) {
  return path.type === 'StringLiteral' || path.type === 'BooleanLiteral' || path.type === 'NumberLiteral' || path.type === 'NullLiteral' || path.type === 'UndefinedLiteral';
}

function printLiteral(literal) {
  if (literal.type === 'UndefinedLiteral') {
    return 'undefined';
  } else {
    return JSON.stringify(literal.value);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFHQTs7QUFJQTtBQUNBO0FBRUEsSUFBSSxrQkFBa0IsR0FBdEIsNEJBQUEsQyxDQUVBO0FBQ0E7QUFDQTs7QUFFTSxTQUFBLHVCQUFBLENBQUEsT0FBQSxFQUE0RDtBQUNoRSxNQUFJLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBN0IsT0FBNkIsQ0FBN0I7QUFDQSxNQUFBLE1BQUEsRUFBWSxPQUFPLENBQVAsV0FBQSxHQUFBLE1BQUE7QUFDYjs7QUFFRCxTQUFBLGdCQUFBLENBQUEsT0FBQSxFQUFvRDtBQUNsRCxNQUFJLENBQUMsR0FBRyxPQUFPLENBQVAsVUFBQSxDQUFSLE1BQUE7QUFDQSxNQUFJLFNBQVMsR0FBYixFQUFBOztBQUVBLE9BQUssSUFBSSxDQUFDLEdBQVYsQ0FBQSxFQUFnQixDQUFDLEdBQWpCLENBQUEsRUFBdUIsQ0FBdkIsRUFBQSxFQUE0QjtBQUMxQixJQUFBLFNBQVMsQ0FBVCxJQUFBLENBQWUsT0FBTyxDQUFQLFVBQUEsQ0FBQSxDQUFBLEVBQWYsSUFBQTtBQUNEOztBQUVELE1BQUksT0FBTyxHQUFHLFNBQVMsQ0FBVCxPQUFBLENBQWQsSUFBYyxDQUFkOztBQUVBLE1BQUksT0FBTyxLQUFLLENBQVosQ0FBQSxJQUFrQixDQUFDLEdBQW5CLE9BQUEsSUFBaUMsU0FBUyxDQUFDLE9BQU8sR0FBakIsQ0FBUyxDQUFULENBQUEsTUFBQSxDQUFBLENBQUEsTUFBckMsR0FBQSxFQUErRTtBQUM3RTtBQUNBLFFBQUksWUFBWSxHQUFHLFNBQVMsQ0FBVCxLQUFBLENBQUEsT0FBQSxFQUFBLElBQUEsQ0FBbkIsR0FBbUIsQ0FBbkI7O0FBQ0EsUUFDRSxZQUFZLENBQVosTUFBQSxDQUFvQixZQUFZLENBQVosTUFBQSxHQUFwQixDQUFBLE1BQUEsR0FBQSxJQUNPLFlBQVksQ0FBWixLQUFBLENBQVAsS0FBTyxFQUFQLE1BQU8sS0FGVCxDQUFBLEVBR0U7QUFDQSxZQUFNLHNDQUNKLHVDQUFBLFlBQUEsR0FEdUIsR0FBbkIsRUFFSixPQUFPLENBRlQsR0FBTSxDQUFOO0FBSUQ7O0FBRUQsUUFBSSxNQUFNLEdBQVYsRUFBQTs7QUFDQSxTQUFLLElBQUksRUFBQyxHQUFHLE9BQU8sR0FBcEIsQ0FBQSxFQUEwQixFQUFDLEdBQTNCLENBQUEsRUFBaUMsRUFBakMsRUFBQSxFQUFzQztBQUNwQyxVQUFJLEtBQUssR0FBRyxTQUFTLENBQVQsRUFBUyxDQUFULENBQUEsT0FBQSxDQUFBLEtBQUEsRUFBWixFQUFZLENBQVo7O0FBQ0EsVUFBSSxLQUFLLEtBQVQsRUFBQSxFQUFrQjtBQUNoQixZQUFJLGtCQUFrQixDQUFsQixJQUFBLENBQUosS0FBSSxDQUFKLEVBQW9DO0FBQ2xDLGdCQUFNLHNDQUNKLCtDQUFBLEtBQUEsR0FEdUIsR0FBbkIsRUFFSixPQUFPLENBRlQsR0FBTSxDQUFOO0FBSUQ7O0FBQ0QsUUFBQSxNQUFNLENBQU4sSUFBQSxDQUFBLEtBQUE7QUFDRDtBQUNGOztBQUVELFFBQUksTUFBTSxDQUFOLE1BQUEsS0FBSixDQUFBLEVBQXlCO0FBQ3ZCLFlBQU0sc0NBQW1CLGtDQUFuQixFQUF3RCxPQUFPLENBQXJFLEdBQU0sQ0FBTjtBQUNEOztBQUVELElBQUEsT0FBTyxDQUFQLFVBQUEsR0FBcUIsT0FBTyxDQUFQLFVBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxFQUFyQixPQUFxQixDQUFyQjtBQUNBLFdBQUEsTUFBQTtBQUNEOztBQUVELFNBQUEsSUFBQTtBQUNEOztBQUVLLFNBQUEsV0FBQSxDQUFBLElBQUEsRUFDa0Q7QUFFdEQsVUFBUSxJQUFJLENBQVosSUFBQTtBQUNFLFNBQUEsT0FBQTtBQUNBLFNBQUEsVUFBQTtBQUNFLGFBQU8sSUFBSSxDQUFYLElBQUE7O0FBQ0YsU0FBQSxhQUFBO0FBQ0UsYUFBTyxJQUFJLENBQVgsUUFBQTtBQUxKO0FBT0Q7O0FBRUssU0FBQSxXQUFBLENBQUEsTUFBQSxFQUFBLElBQUEsRUFFaUI7QUFFckIsRUFBQSxXQUFXLENBQVgsTUFBVyxDQUFYLENBQUEsSUFBQSxDQUFBLElBQUE7QUFDRDs7QUFJSyxTQUFBLFlBQUEsQ0FBQSxJQUFBLEVBQ21DO0FBRXZDLFNBQ0UsSUFBSSxDQUFKLElBQUEsS0FBQSxlQUFBLElBQ0EsSUFBSSxDQUFKLElBQUEsS0FEQSxnQkFBQSxJQUVBLElBQUksQ0FBSixJQUFBLEtBRkEsZUFBQSxJQUdBLElBQUksQ0FBSixJQUFBLEtBSEEsYUFBQSxJQUlBLElBQUksQ0FBSixJQUFBLEtBTEYsa0JBQUE7QUFPRDs7QUFFSyxTQUFBLFlBQUEsQ0FBQSxPQUFBLEVBQTZDO0FBQ2pELE1BQUksT0FBTyxDQUFQLElBQUEsS0FBSixrQkFBQSxFQUF5QztBQUN2QyxXQUFBLFdBQUE7QUFERixHQUFBLE1BRU87QUFDTCxXQUFPLElBQUksQ0FBSixTQUFBLENBQWUsT0FBTyxDQUE3QixLQUFPLENBQVA7QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcblxuaW1wb3J0IHsgZ2VuZXJhdGVTeW50YXhFcnJvciB9IGZyb20gJy4vc3ludGF4LWVycm9yJztcbmltcG9ydCAqIGFzIEFTVHYxIGZyb20gJy4vdjEvYXBpJztcbmltcG9ydCAqIGFzIEhCUyBmcm9tICcuL3YxL2hhbmRsZWJhcnMtYXN0JztcblxuLy8gUmVnZXggdG8gdmFsaWRhdGUgdGhlIGlkZW50aWZpZXIgZm9yIGJsb2NrIHBhcmFtZXRlcnMuXG4vLyBCYXNlZCBvbiB0aGUgSUQgdmFsaWRhdGlvbiByZWdleCBpbiBIYW5kbGViYXJzLlxuXG5sZXQgSURfSU5WRVJTRV9QQVRURVJOID0gL1shXCIjJS0sXFwuXFwvOy0+QFxcWy1cXF5gXFx7LX5dLztcblxuLy8gQ2hlY2tzIHRoZSBlbGVtZW50J3MgYXR0cmlidXRlcyB0byBzZWUgaWYgaXQgdXNlcyBibG9jayBwYXJhbXMuXG4vLyBJZiBpdCBkb2VzLCByZWdpc3RlcnMgdGhlIGJsb2NrIHBhcmFtcyB3aXRoIHRoZSBwcm9ncmFtIGFuZFxuLy8gcmVtb3ZlcyB0aGUgY29ycmVzcG9uZGluZyBhdHRyaWJ1dGVzIGZyb20gdGhlIGVsZW1lbnQuXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUVsZW1lbnRCbG9ja1BhcmFtcyhlbGVtZW50OiBBU1R2MS5FbGVtZW50Tm9kZSk6IHZvaWQge1xuICBsZXQgcGFyYW1zID0gcGFyc2VCbG9ja1BhcmFtcyhlbGVtZW50KTtcbiAgaWYgKHBhcmFtcykgZWxlbWVudC5ibG9ja1BhcmFtcyA9IHBhcmFtcztcbn1cblxuZnVuY3Rpb24gcGFyc2VCbG9ja1BhcmFtcyhlbGVtZW50OiBBU1R2MS5FbGVtZW50Tm9kZSk6IE9wdGlvbjxzdHJpbmdbXT4ge1xuICBsZXQgbCA9IGVsZW1lbnQuYXR0cmlidXRlcy5sZW5ndGg7XG4gIGxldCBhdHRyTmFtZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIGF0dHJOYW1lcy5wdXNoKGVsZW1lbnQuYXR0cmlidXRlc1tpXS5uYW1lKTtcbiAgfVxuXG4gIGxldCBhc0luZGV4ID0gYXR0ck5hbWVzLmluZGV4T2YoJ2FzJyk7XG5cbiAgaWYgKGFzSW5kZXggIT09IC0xICYmIGwgPiBhc0luZGV4ICYmIGF0dHJOYW1lc1thc0luZGV4ICsgMV0uY2hhckF0KDApID09PSAnfCcpIHtcbiAgICAvLyBTb21lIGJhc2ljIHZhbGlkYXRpb24sIHNpbmNlIHdlJ3JlIGRvaW5nIHRoZSBwYXJzaW5nIG91cnNlbHZlc1xuICAgIGxldCBwYXJhbXNTdHJpbmcgPSBhdHRyTmFtZXMuc2xpY2UoYXNJbmRleCkuam9pbignICcpO1xuICAgIGlmIChcbiAgICAgIHBhcmFtc1N0cmluZy5jaGFyQXQocGFyYW1zU3RyaW5nLmxlbmd0aCAtIDEpICE9PSAnfCcgfHxcbiAgICAgIGV4cGVjdChwYXJhbXNTdHJpbmcubWF0Y2goL1xcfC9nKSwgYGJsb2NrIHBhcmFtcyBtdXN0IGV4aXN0IGhlcmVgKS5sZW5ndGggIT09IDJcbiAgICApIHtcbiAgICAgIHRocm93IGdlbmVyYXRlU3ludGF4RXJyb3IoXG4gICAgICAgIFwiSW52YWxpZCBibG9jayBwYXJhbWV0ZXJzIHN5bnRheCwgJ1wiICsgcGFyYW1zU3RyaW5nICsgXCInXCIsXG4gICAgICAgIGVsZW1lbnQubG9jXG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCBwYXJhbXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gYXNJbmRleCArIDE7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCBwYXJhbSA9IGF0dHJOYW1lc1tpXS5yZXBsYWNlKC9cXHwvZywgJycpO1xuICAgICAgaWYgKHBhcmFtICE9PSAnJykge1xuICAgICAgICBpZiAoSURfSU5WRVJTRV9QQVRURVJOLnRlc3QocGFyYW0pKSB7XG4gICAgICAgICAgdGhyb3cgZ2VuZXJhdGVTeW50YXhFcnJvcihcbiAgICAgICAgICAgIFwiSW52YWxpZCBpZGVudGlmaWVyIGZvciBibG9jayBwYXJhbWV0ZXJzLCAnXCIgKyBwYXJhbSArIFwiJ1wiLFxuICAgICAgICAgICAgZWxlbWVudC5sb2NcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcy5wdXNoKHBhcmFtKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgZ2VuZXJhdGVTeW50YXhFcnJvcignQ2Fubm90IHVzZSB6ZXJvIGJsb2NrIHBhcmFtZXRlcnMnLCBlbGVtZW50LmxvYyk7XG4gICAgfVxuXG4gICAgZWxlbWVudC5hdHRyaWJ1dGVzID0gZWxlbWVudC5hdHRyaWJ1dGVzLnNsaWNlKDAsIGFzSW5kZXgpO1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoaWxkcmVuRm9yKFxuICBub2RlOiBBU1R2MS5CbG9jayB8IEFTVHYxLlRlbXBsYXRlIHwgQVNUdjEuRWxlbWVudE5vZGVcbik6IEFTVHYxLlRvcExldmVsU3RhdGVtZW50W10ge1xuICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgIGNhc2UgJ0Jsb2NrJzpcbiAgICBjYXNlICdUZW1wbGF0ZSc6XG4gICAgICByZXR1cm4gbm9kZS5ib2R5O1xuICAgIGNhc2UgJ0VsZW1lbnROb2RlJzpcbiAgICAgIHJldHVybiBub2RlLmNoaWxkcmVuO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRDaGlsZChcbiAgcGFyZW50OiBBU1R2MS5CbG9jayB8IEFTVHYxLlRlbXBsYXRlIHwgQVNUdjEuRWxlbWVudE5vZGUsXG4gIG5vZGU6IEFTVHYxLlN0YXRlbWVudFxuKTogdm9pZCB7XG4gIGNoaWxkcmVuRm9yKHBhcmVudCkucHVzaChub2RlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSEJTTGl0ZXJhbChwYXRoOiBIQlMuRXhwcmVzc2lvbik6IHBhdGggaXMgSEJTLkxpdGVyYWw7XG5leHBvcnQgZnVuY3Rpb24gaXNIQlNMaXRlcmFsKHBhdGg6IEFTVHYxLkV4cHJlc3Npb24pOiBwYXRoIGlzIEFTVHYxLkxpdGVyYWw7XG5leHBvcnQgZnVuY3Rpb24gaXNIQlNMaXRlcmFsKFxuICBwYXRoOiBIQlMuRXhwcmVzc2lvbiB8IEFTVHYxLkV4cHJlc3Npb25cbik6IHBhdGggaXMgSEJTLkxpdGVyYWwgfCBBU1R2MS5MaXRlcmFsIHtcbiAgcmV0dXJuIChcbiAgICBwYXRoLnR5cGUgPT09ICdTdHJpbmdMaXRlcmFsJyB8fFxuICAgIHBhdGgudHlwZSA9PT0gJ0Jvb2xlYW5MaXRlcmFsJyB8fFxuICAgIHBhdGgudHlwZSA9PT0gJ051bWJlckxpdGVyYWwnIHx8XG4gICAgcGF0aC50eXBlID09PSAnTnVsbExpdGVyYWwnIHx8XG4gICAgcGF0aC50eXBlID09PSAnVW5kZWZpbmVkTGl0ZXJhbCdcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50TGl0ZXJhbChsaXRlcmFsOiBBU1R2MS5MaXRlcmFsKTogc3RyaW5nIHtcbiAgaWYgKGxpdGVyYWwudHlwZSA9PT0gJ1VuZGVmaW5lZExpdGVyYWwnKSB7XG4gICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShsaXRlcmFsLnZhbHVlKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==