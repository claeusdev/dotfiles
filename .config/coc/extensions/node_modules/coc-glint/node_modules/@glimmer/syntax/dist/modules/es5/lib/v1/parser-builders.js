import { assert } from '@glimmer/util';
import { PathExpressionImplV1 } from './legacy-interop';
var DEFAULT_STRIP = {
  close: false,
  open: false
};
/**
 * The Parser Builder differentiates from the public builder API by:
 *
 * 1. Offering fewer different ways to instantiate nodes
 * 2. Mandating source locations
 */

var Builders = /*#__PURE__*/function () {
  function Builders() {}

  var _proto = Builders.prototype;

  _proto.pos = function pos(line, column) {
    return {
      line: line,
      column: column
    };
  };

  _proto.blockItself = function blockItself(_ref) {
    var body = _ref.body,
        blockParams = _ref.blockParams,
        _ref$chained = _ref.chained,
        chained = _ref$chained === void 0 ? false : _ref$chained,
        loc = _ref.loc;
    return {
      type: 'Block',
      body: body || [],
      blockParams: blockParams || [],
      chained: chained,
      loc: loc
    };
  };

  _proto.template = function template(_ref2) {
    var body = _ref2.body,
        blockParams = _ref2.blockParams,
        loc = _ref2.loc;
    return {
      type: 'Template',
      body: body || [],
      blockParams: blockParams || [],
      loc: loc
    };
  };

  _proto.mustache = function mustache(_ref3) {
    var path = _ref3.path,
        params = _ref3.params,
        hash = _ref3.hash,
        trusting = _ref3.trusting,
        loc = _ref3.loc,
        _ref3$strip = _ref3.strip,
        strip = _ref3$strip === void 0 ? DEFAULT_STRIP : _ref3$strip;
    return {
      type: 'MustacheStatement',
      path: path,
      params: params,
      hash: hash,
      escaped: !trusting,
      trusting: trusting,
      loc: loc,
      strip: strip || {
        open: false,
        close: false
      }
    };
  };

  _proto.block = function block(_ref4) {
    var path = _ref4.path,
        params = _ref4.params,
        hash = _ref4.hash,
        defaultBlock = _ref4.defaultBlock,
        _ref4$elseBlock = _ref4.elseBlock,
        elseBlock = _ref4$elseBlock === void 0 ? null : _ref4$elseBlock,
        loc = _ref4.loc,
        _ref4$openStrip = _ref4.openStrip,
        openStrip = _ref4$openStrip === void 0 ? DEFAULT_STRIP : _ref4$openStrip,
        _ref4$inverseStrip = _ref4.inverseStrip,
        inverseStrip = _ref4$inverseStrip === void 0 ? DEFAULT_STRIP : _ref4$inverseStrip,
        _ref4$closeStrip = _ref4.closeStrip,
        closeStrip = _ref4$closeStrip === void 0 ? DEFAULT_STRIP : _ref4$closeStrip;
    return {
      type: 'BlockStatement',
      path: path,
      params: params,
      hash: hash,
      program: defaultBlock,
      inverse: elseBlock,
      loc: loc,
      openStrip: openStrip,
      inverseStrip: inverseStrip,
      closeStrip: closeStrip
    };
  };

  _proto.comment = function comment(value, loc) {
    return {
      type: 'CommentStatement',
      value: value,
      loc: loc
    };
  };

  _proto.mustacheComment = function mustacheComment(value, loc) {
    return {
      type: 'MustacheCommentStatement',
      value: value,
      loc: loc
    };
  };

  _proto.concat = function concat(parts, loc) {
    return {
      type: 'ConcatStatement',
      parts: parts,
      loc: loc
    };
  };

  _proto.element = function element(_ref5) {
    var tag = _ref5.tag,
        selfClosing = _ref5.selfClosing,
        attrs = _ref5.attrs,
        blockParams = _ref5.blockParams,
        modifiers = _ref5.modifiers,
        comments = _ref5.comments,
        children = _ref5.children,
        loc = _ref5.loc;
    return {
      type: 'ElementNode',
      tag: tag,
      selfClosing: selfClosing,
      attributes: attrs || [],
      blockParams: blockParams || [],
      modifiers: modifiers || [],
      comments: comments || [],
      children: children || [],
      loc: loc
    };
  };

  _proto.elementModifier = function elementModifier(_ref6) {
    var path = _ref6.path,
        params = _ref6.params,
        hash = _ref6.hash,
        loc = _ref6.loc;
    return {
      type: 'ElementModifierStatement',
      path: path,
      params: params,
      hash: hash,
      loc: loc
    };
  };

  _proto.attr = function attr(_ref7) {
    var name = _ref7.name,
        value = _ref7.value,
        loc = _ref7.loc;
    return {
      type: 'AttrNode',
      name: name,
      value: value,
      loc: loc
    };
  };

  _proto.text = function text(_ref8) {
    var chars = _ref8.chars,
        loc = _ref8.loc;
    return {
      type: 'TextNode',
      chars: chars,
      loc: loc
    };
  };

  _proto.sexpr = function sexpr(_ref9) {
    var path = _ref9.path,
        params = _ref9.params,
        hash = _ref9.hash,
        loc = _ref9.loc;
    return {
      type: 'SubExpression',
      path: path,
      params: params,
      hash: hash,
      loc: loc
    };
  };

  _proto.path = function path(_ref10) {
    var head = _ref10.head,
        tail = _ref10.tail,
        loc = _ref10.loc;

    var _headToString = headToString(head),
        originalHead = _headToString.original,
        headParts = _headToString.parts;

    var parts = [].concat(headParts, tail);
    var original = [].concat(originalHead, parts).join('.');
    return new PathExpressionImplV1(original, head, tail, loc);
  };

  _proto.head = function head(_head, loc) {
    if (_head[0] === '@') {
      return this.atName(_head, loc);
    } else if (_head === 'this') {
      return this["this"](loc);
    } else {
      return this["var"](_head, loc);
    }
  };

  _proto["this"] = function _this(loc) {
    return {
      type: 'ThisHead',
      loc: loc
    };
  };

  _proto.atName = function atName(name, loc) {
    // the `@` should be included so we have a complete source range
    false && assert(name[0] === '@', "call builders.at() with a string that starts with '@'");
    return {
      type: 'AtHead',
      name: name,
      loc: loc
    };
  };

  _proto["var"] = function _var(name, loc) {
    false && assert(name !== 'this', "You called builders.var() with 'this'. Call builders.this instead");
    false && assert(name[0] !== '@', "You called builders.var() with '" + name + "'. Call builders.at('" + name + "') instead");
    return {
      type: 'VarHead',
      name: name,
      loc: loc
    };
  };

  _proto.hash = function hash(pairs, loc) {
    return {
      type: 'Hash',
      pairs: pairs || [],
      loc: loc
    };
  };

  _proto.pair = function pair(_ref11) {
    var key = _ref11.key,
        value = _ref11.value,
        loc = _ref11.loc;
    return {
      type: 'HashPair',
      key: key,
      value: value,
      loc: loc
    };
  };

  _proto.literal = function literal(_ref12) {
    var type = _ref12.type,
        value = _ref12.value,
        loc = _ref12.loc;
    return {
      type: type,
      value: value,
      original: value,
      loc: loc
    };
  };

  _proto.undefined = function (_undefined) {
    function undefined() {
      return _undefined.apply(this, arguments);
    }

    undefined.toString = function () {
      return _undefined.toString();
    };

    return undefined;
  }(function () {
    return this.literal({
      type: 'UndefinedLiteral',
      value: undefined
    });
  });

  _proto["null"] = function _null() {
    return this.literal({
      type: 'NullLiteral',
      value: null
    });
  };

  _proto.string = function string(value, loc) {
    return this.literal({
      type: 'StringLiteral',
      value: value,
      loc: loc
    });
  };

  _proto["boolean"] = function boolean(value, loc) {
    return this.literal({
      type: 'BooleanLiteral',
      value: value,
      loc: loc
    });
  };

  _proto.number = function number(value, loc) {
    return this.literal({
      type: 'NumberLiteral',
      value: value,
      loc: loc
    });
  };

  return Builders;
}(); // Expressions


function headToString(head) {
  switch (head.type) {
    case 'AtHead':
      return {
        original: head.name,
        parts: [head.name]
      };

    case 'ThisHead':
      return {
        original: "this",
        parts: []
      };

    case 'VarHead':
      return {
        original: head.name,
        parts: [head.name]
      };
  }
}

export default new Builders();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,