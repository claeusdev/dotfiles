import * as ASTv2 from './api';
export function SexpSyntaxContext(node) {
  if (isSimpleCallee(node)) {
    return ASTv2.LooseModeResolution.namespaced("Helper"
    /* Helper */
    );
  } else {
    return null;
  }
}
export function ModifierSyntaxContext(node) {
  if (isSimpleCallee(node)) {
    return ASTv2.LooseModeResolution.namespaced("Modifier"
    /* Modifier */
    );
  } else {
    return null;
  }
}
export function BlockSyntaxContext(node) {
  if (isSimpleCallee(node)) {
    return ASTv2.LooseModeResolution.namespaced("Component"
    /* Component */
    );
  } else {
    return null;
  }
}
export function ComponentSyntaxContext(node) {
  if (isSimplePath(node)) {
    return ASTv2.LooseModeResolution.namespaced("Component"
    /* Component */
    );
  } else {
    return null;
  }
}
/**
 * This corresponds to append positions (text curlies or attribute
 * curlies). In strict mode, this also corresponds to arg curlies.
 */

export function AttrValueSyntaxContext(node) {
  let isSimple = isSimpleCallee(node);
  let isInvoke = isInvokeNode(node);

  if (isSimple) {
    return isInvoke ? ASTv2.LooseModeResolution.namespaced("Helper"
    /* Helper */
    ) : ASTv2.LooseModeResolution.attr();
  } else {
    return isInvoke ? ASTv2.STRICT_RESOLUTION : ASTv2.LooseModeResolution.fallback();
  }
}
/**
 * This corresponds to append positions (text curlies or attribute
 * curlies). In strict mode, this also corresponds to arg curlies.
 */

export function AppendSyntaxContext(node) {
  let isSimple = isSimpleCallee(node);
  let isInvoke = isInvokeNode(node);
  let trusting = node.trusting;

  if (isSimple) {
    return trusting ? ASTv2.LooseModeResolution.trustingAppend({
      invoke: isInvoke
    }) : ASTv2.LooseModeResolution.append({
      invoke: isInvoke
    });
  } else {
    return isInvoke ? ASTv2.STRICT_RESOLUTION : ASTv2.LooseModeResolution.fallback();
  }
} // UTILITIES

/**
 * A call node has a simple callee if its head is:
 *
 * - a `PathExpression`
 * - the `PathExpression`'s head is a `VarHead`
 * - it has no tail
 *
 * Simple heads:
 *
 * ```
 * {{x}}
 * {{x y}}
 * ```
 *
 * Not simple heads:
 *
 * ```
 * {{x.y}}
 * {{x.y z}}
 * {{@x}}
 * {{@x a}}
 * {{this}}
 * {{this a}}
 * ```
 */

function isSimpleCallee(node) {
  let path = node.path;
  return isSimplePath(path);
}

function isSimplePath(node) {
  if (node.type === 'PathExpression' && node.head.type === 'VarHead') {
    return node.tail.length === 0;
  } else {
    return false;
  }
}
/**
 * The call expression has at least one argument.
 */


function isInvokeNode(node) {
  return node.params.length > 0 || node.hash.pairs.length > 0;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdjItYS9sb29zZS1yZXNvbHV0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sS0FBSyxLQUFaLE1BQXVCLE9BQXZCO0FBWUEsT0FBTSxTQUFVLGlCQUFWLENBQTRCLElBQTVCLEVBQXFEO0FBQ3pELE1BQUksY0FBYyxDQUFDLElBQUQsQ0FBbEIsRUFBMEI7QUFDeEIsV0FBTyxLQUFLLENBQUMsbUJBQU4sQ0FBMEIsVUFBMUIsQ0FBb0M7QUFBQTtBQUFwQyxLQUFQO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBTyxJQUFQO0FBQ0Q7QUFDRjtBQUVELE9BQU0sU0FBVSxxQkFBVixDQUNKLElBREksRUFDZ0M7QUFFcEMsTUFBSSxjQUFjLENBQUMsSUFBRCxDQUFsQixFQUEwQjtBQUN4QixXQUFPLEtBQUssQ0FBQyxtQkFBTixDQUEwQixVQUExQixDQUFvQztBQUFBO0FBQXBDLEtBQVA7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPLElBQVA7QUFDRDtBQUNGO0FBRUQsT0FBTSxTQUFVLGtCQUFWLENBQTZCLElBQTdCLEVBQXVEO0FBQzNELE1BQUksY0FBYyxDQUFDLElBQUQsQ0FBbEIsRUFBMEI7QUFDeEIsV0FBTyxLQUFLLENBQUMsbUJBQU4sQ0FBMEIsVUFBMUIsQ0FBb0M7QUFBQTtBQUFwQyxLQUFQO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBTyxJQUFQO0FBQ0Q7QUFDRjtBQUVELE9BQU0sU0FBVSxzQkFBVixDQUFpQyxJQUFqQyxFQUEyRDtBQUMvRCxNQUFJLFlBQVksQ0FBQyxJQUFELENBQWhCLEVBQXdCO0FBQ3RCLFdBQU8sS0FBSyxDQUFDLG1CQUFOLENBQTBCLFVBQTFCLENBQW9DO0FBQUE7QUFBcEMsS0FBUDtBQUNELEdBRkQsTUFFTztBQUNMLFdBQU8sSUFBUDtBQUNEO0FBQ0Y7QUFFRDs7Ozs7QUFJQSxPQUFNLFNBQVUsc0JBQVYsQ0FBaUMsSUFBakMsRUFBOEQ7QUFDbEUsTUFBSSxRQUFRLEdBQUcsY0FBYyxDQUFDLElBQUQsQ0FBN0I7QUFDQSxNQUFJLFFBQVEsR0FBRyxZQUFZLENBQUMsSUFBRCxDQUEzQjs7QUFFQSxNQUFJLFFBQUosRUFBYztBQUNaLFdBQU8sUUFBUSxHQUNYLEtBQUssQ0FBQyxtQkFBTixDQUEwQixVQUExQixDQUFvQztBQUFBO0FBQXBDLEtBRFcsR0FFWCxLQUFLLENBQUMsbUJBQU4sQ0FBMEIsSUFBMUIsRUFGSjtBQUdELEdBSkQsTUFJTztBQUNMLFdBQU8sUUFBUSxHQUFHLEtBQUssQ0FBQyxpQkFBVCxHQUE2QixLQUFLLENBQUMsbUJBQU4sQ0FBMEIsUUFBMUIsRUFBNUM7QUFDRDtBQUNGO0FBRUQ7Ozs7O0FBSUEsT0FBTSxTQUFVLG1CQUFWLENBQThCLElBQTlCLEVBQTJEO0FBQy9ELE1BQUksUUFBUSxHQUFHLGNBQWMsQ0FBQyxJQUFELENBQTdCO0FBQ0EsTUFBSSxRQUFRLEdBQUcsWUFBWSxDQUFDLElBQUQsQ0FBM0I7QUFDQSxNQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBcEI7O0FBRUEsTUFBSSxRQUFKLEVBQWM7QUFDWixXQUFPLFFBQVEsR0FDWCxLQUFLLENBQUMsbUJBQU4sQ0FBMEIsY0FBMUIsQ0FBeUM7QUFBRSxNQUFBLE1BQU0sRUFBRTtBQUFWLEtBQXpDLENBRFcsR0FFWCxLQUFLLENBQUMsbUJBQU4sQ0FBMEIsTUFBMUIsQ0FBaUM7QUFBRSxNQUFBLE1BQU0sRUFBRTtBQUFWLEtBQWpDLENBRko7QUFHRCxHQUpELE1BSU87QUFDTCxXQUFPLFFBQVEsR0FBRyxLQUFLLENBQUMsaUJBQVQsR0FBNkIsS0FBSyxDQUFDLG1CQUFOLENBQTBCLFFBQTFCLEVBQTVDO0FBQ0Q7QUFDRixDLENBTUQ7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBLFNBQVMsY0FBVCxDQUF3QixJQUF4QixFQUEwQztBQUN4QyxNQUFJLElBQUksR0FBRyxJQUFJLENBQUMsSUFBaEI7QUFFQSxTQUFPLFlBQVksQ0FBQyxJQUFELENBQW5CO0FBQ0Q7O0FBRUQsU0FBUyxZQUFULENBQXNCLElBQXRCLEVBQTRDO0FBQzFDLE1BQUksSUFBSSxDQUFDLElBQUwsS0FBYyxnQkFBZCxJQUFrQyxJQUFJLENBQUMsSUFBTCxDQUFVLElBQVYsS0FBbUIsU0FBekQsRUFBb0U7QUFDbEUsV0FBTyxJQUFJLENBQUMsSUFBTCxDQUFVLE1BQVYsS0FBcUIsQ0FBNUI7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPLEtBQVA7QUFDRDtBQUNGO0FBRUQ7Ozs7O0FBR0EsU0FBUyxZQUFULENBQXNCLElBQXRCLEVBQXdDO0FBQ3RDLFNBQU8sSUFBSSxDQUFDLE1BQUwsQ0FBWSxNQUFaLEdBQXFCLENBQXJCLElBQTBCLElBQUksQ0FBQyxJQUFMLENBQVUsS0FBVixDQUFnQixNQUFoQixHQUF5QixDQUExRDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQVNUdjEgZnJvbSAnLi4vdjEvYXBpJztcbmltcG9ydCAqIGFzIEFTVHYyIGZyb20gJy4vYXBpJztcblxuZXhwb3J0IGludGVyZmFjZSBBc3RDYWxsUGFydHMge1xuICBwYXRoOiBBU1R2MS5FeHByZXNzaW9uO1xuICBwYXJhbXM6IEFTVHYxLkV4cHJlc3Npb25bXTtcbiAgaGFzaDogQVNUdjEuSGFzaDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWYXJQYXRoIGV4dGVuZHMgQVNUdjEuUGF0aEV4cHJlc3Npb24ge1xuICBoZWFkOiBBU1R2MS5WYXJIZWFkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU2V4cFN5bnRheENvbnRleHQobm9kZTogQVNUdjEuU3ViRXhwcmVzc2lvbik6IEFTVHYyLkZyZWVWYXJSZXNvbHV0aW9uIHwgbnVsbCB7XG4gIGlmIChpc1NpbXBsZUNhbGxlZShub2RlKSkge1xuICAgIHJldHVybiBBU1R2Mi5Mb29zZU1vZGVSZXNvbHV0aW9uLm5hbWVzcGFjZWQoQVNUdjIuRnJlZVZhck5hbWVzcGFjZS5IZWxwZXIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBNb2RpZmllclN5bnRheENvbnRleHQoXG4gIG5vZGU6IEFTVHYxLkVsZW1lbnRNb2RpZmllclN0YXRlbWVudFxuKTogQVNUdjIuRnJlZVZhclJlc29sdXRpb24gfCBudWxsIHtcbiAgaWYgKGlzU2ltcGxlQ2FsbGVlKG5vZGUpKSB7XG4gICAgcmV0dXJuIEFTVHYyLkxvb3NlTW9kZVJlc29sdXRpb24ubmFtZXNwYWNlZChBU1R2Mi5GcmVlVmFyTmFtZXNwYWNlLk1vZGlmaWVyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gQmxvY2tTeW50YXhDb250ZXh0KG5vZGU6IEFTVHYxLkJsb2NrU3RhdGVtZW50KTogQVNUdjIuRnJlZVZhclJlc29sdXRpb24gfCBudWxsIHtcbiAgaWYgKGlzU2ltcGxlQ2FsbGVlKG5vZGUpKSB7XG4gICAgcmV0dXJuIEFTVHYyLkxvb3NlTW9kZVJlc29sdXRpb24ubmFtZXNwYWNlZChBU1R2Mi5GcmVlVmFyTmFtZXNwYWNlLkNvbXBvbmVudCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENvbXBvbmVudFN5bnRheENvbnRleHQobm9kZTogQVNUdjEuUGF0aEV4cHJlc3Npb24pOiBBU1R2Mi5GcmVlVmFyUmVzb2x1dGlvbiB8IG51bGwge1xuICBpZiAoaXNTaW1wbGVQYXRoKG5vZGUpKSB7XG4gICAgcmV0dXJuIEFTVHYyLkxvb3NlTW9kZVJlc29sdXRpb24ubmFtZXNwYWNlZChBU1R2Mi5GcmVlVmFyTmFtZXNwYWNlLkNvbXBvbmVudCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGNvcnJlc3BvbmRzIHRvIGFwcGVuZCBwb3NpdGlvbnMgKHRleHQgY3VybGllcyBvciBhdHRyaWJ1dGVcbiAqIGN1cmxpZXMpLiBJbiBzdHJpY3QgbW9kZSwgdGhpcyBhbHNvIGNvcnJlc3BvbmRzIHRvIGFyZyBjdXJsaWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gQXR0clZhbHVlU3ludGF4Q29udGV4dChub2RlOiBBU1R2MS5NdXN0YWNoZVN0YXRlbWVudCk6IEFTVHYyLkZyZWVWYXJSZXNvbHV0aW9uIHtcbiAgbGV0IGlzU2ltcGxlID0gaXNTaW1wbGVDYWxsZWUobm9kZSk7XG4gIGxldCBpc0ludm9rZSA9IGlzSW52b2tlTm9kZShub2RlKTtcblxuICBpZiAoaXNTaW1wbGUpIHtcbiAgICByZXR1cm4gaXNJbnZva2VcbiAgICAgID8gQVNUdjIuTG9vc2VNb2RlUmVzb2x1dGlvbi5uYW1lc3BhY2VkKEFTVHYyLkZyZWVWYXJOYW1lc3BhY2UuSGVscGVyKVxuICAgICAgOiBBU1R2Mi5Mb29zZU1vZGVSZXNvbHV0aW9uLmF0dHIoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaXNJbnZva2UgPyBBU1R2Mi5TVFJJQ1RfUkVTT0xVVElPTiA6IEFTVHYyLkxvb3NlTW9kZVJlc29sdXRpb24uZmFsbGJhY2soKTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgY29ycmVzcG9uZHMgdG8gYXBwZW5kIHBvc2l0aW9ucyAodGV4dCBjdXJsaWVzIG9yIGF0dHJpYnV0ZVxuICogY3VybGllcykuIEluIHN0cmljdCBtb2RlLCB0aGlzIGFsc28gY29ycmVzcG9uZHMgdG8gYXJnIGN1cmxpZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBBcHBlbmRTeW50YXhDb250ZXh0KG5vZGU6IEFTVHYxLk11c3RhY2hlU3RhdGVtZW50KTogQVNUdjIuRnJlZVZhclJlc29sdXRpb24ge1xuICBsZXQgaXNTaW1wbGUgPSBpc1NpbXBsZUNhbGxlZShub2RlKTtcbiAgbGV0IGlzSW52b2tlID0gaXNJbnZva2VOb2RlKG5vZGUpO1xuICBsZXQgdHJ1c3RpbmcgPSBub2RlLnRydXN0aW5nO1xuXG4gIGlmIChpc1NpbXBsZSkge1xuICAgIHJldHVybiB0cnVzdGluZ1xuICAgICAgPyBBU1R2Mi5Mb29zZU1vZGVSZXNvbHV0aW9uLnRydXN0aW5nQXBwZW5kKHsgaW52b2tlOiBpc0ludm9rZSB9KVxuICAgICAgOiBBU1R2Mi5Mb29zZU1vZGVSZXNvbHV0aW9uLmFwcGVuZCh7IGludm9rZTogaXNJbnZva2UgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGlzSW52b2tlID8gQVNUdjIuU1RSSUNUX1JFU09MVVRJT04gOiBBU1R2Mi5Mb29zZU1vZGVSZXNvbHV0aW9uLmZhbGxiYWNrKCk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgUmVzb2x1dGlvbjxQIGV4dGVuZHMgQXN0Q2FsbFBhcnRzIHwgQVNUdjEuUGF0aEV4cHJlc3Npb24+ID0gKFxuICBjYWxsOiBQXG4pID0+IEFTVHYyLkZyZWVWYXJSZXNvbHV0aW9uIHwgbnVsbDtcblxuLy8gVVRJTElUSUVTXG5cbi8qKlxuICogQSBjYWxsIG5vZGUgaGFzIGEgc2ltcGxlIGNhbGxlZSBpZiBpdHMgaGVhZCBpczpcbiAqXG4gKiAtIGEgYFBhdGhFeHByZXNzaW9uYFxuICogLSB0aGUgYFBhdGhFeHByZXNzaW9uYCdzIGhlYWQgaXMgYSBgVmFySGVhZGBcbiAqIC0gaXQgaGFzIG5vIHRhaWxcbiAqXG4gKiBTaW1wbGUgaGVhZHM6XG4gKlxuICogYGBgXG4gKiB7e3h9fVxuICoge3t4IHl9fVxuICogYGBgXG4gKlxuICogTm90IHNpbXBsZSBoZWFkczpcbiAqXG4gKiBgYGBcbiAqIHt7eC55fX1cbiAqIHt7eC55IHp9fVxuICoge3tAeH19XG4gKiB7e0B4IGF9fVxuICoge3t0aGlzfX1cbiAqIHt7dGhpcyBhfX1cbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpc1NpbXBsZUNhbGxlZShub2RlOiBBc3RDYWxsUGFydHMpOiBib29sZWFuIHtcbiAgbGV0IHBhdGggPSBub2RlLnBhdGg7XG5cbiAgcmV0dXJuIGlzU2ltcGxlUGF0aChwYXRoKTtcbn1cblxuZnVuY3Rpb24gaXNTaW1wbGVQYXRoKG5vZGU6IEFTVHYxLkV4cHJlc3Npb24pOiBib29sZWFuIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gJ1BhdGhFeHByZXNzaW9uJyAmJiBub2RlLmhlYWQudHlwZSA9PT0gJ1ZhckhlYWQnKSB7XG4gICAgcmV0dXJuIG5vZGUudGFpbC5sZW5ndGggPT09IDA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogVGhlIGNhbGwgZXhwcmVzc2lvbiBoYXMgYXQgbGVhc3Qgb25lIGFyZ3VtZW50LlxuICovXG5mdW5jdGlvbiBpc0ludm9rZU5vZGUobm9kZTogQXN0Q2FsbFBhcnRzKTogYm9vbGVhbiB7XG4gIHJldHVybiBub2RlLnBhcmFtcy5sZW5ndGggPiAwIHx8IG5vZGUuaGFzaC5wYWlycy5sZW5ndGggPiAwO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==