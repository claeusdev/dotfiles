import { assert, assign, isPresent } from '@glimmer/util';
import Printer from '../generation/printer';
import { preprocess } from '../parser/tokenizer-event-handlers';
import { SourceSlice } from '../source/slice';
import { SpanList } from '../source/span-list';
import { SymbolTable } from '../symbol-table';
import { generateSyntaxError } from '../syntax-error';
import b from '../v1/parser-builders';
import * as ASTv2 from './api';
import { Builder } from './builders';
import { AppendSyntaxContext, AttrValueSyntaxContext, BlockSyntaxContext, ComponentSyntaxContext, ModifierSyntaxContext, SexpSyntaxContext } from './loose-resolution';
export function normalize(source, options = {}) {
  let ast = preprocess(source, options);
  let normalizeOptions = assign({
    strictMode: false,
    locals: []
  }, options);
  let top = SymbolTable.top(normalizeOptions.strictMode ? normalizeOptions.locals : []);
  let block = new BlockContext(source, normalizeOptions, top);
  let normalizer = new StatementNormalizer(block);
  return new TemplateChildren(block.loc(ast.loc), ast.body.map(b => normalizer.normalize(b)), block).assertTemplate(top);
}
/**
 * A `BlockContext` represents the block that a particular AST node is contained inside of.
 *
 * `BlockContext` is aware of template-wide options (such as strict mode), as well as the bindings
 * that are in-scope within that block.
 *
 * Concretely, it has the `PrecompileOptions` and current `SymbolTable`, and provides
 * facilities for working with those options.
 *
 * `BlockContext` is stateless.
 */

export class BlockContext {
  constructor(source, options, table) {
    this.source = source;
    this.options = options;
    this.table = table;
    this.builder = new Builder();
  }

  get strict() {
    return this.options.strictMode || false;
  }

  loc(loc) {
    return this.source.spanFor(loc);
  }

  resolutionFor(node, resolution) {
    if (this.strict) {
      return {
        resolution: ASTv2.STRICT_RESOLUTION
      };
    }

    if (this.isFreeVar(node)) {
      let r = resolution(node);

      if (r === null) {
        return {
          resolution: 'error',
          path: printPath(node),
          head: printHead(node)
        };
      }

      return {
        resolution: r
      };
    } else {
      return {
        resolution: ASTv2.STRICT_RESOLUTION
      };
    }
  }

  isFreeVar(callee) {
    if (callee.type === 'PathExpression') {
      if (callee.head.type !== 'VarHead') {
        return false;
      }

      return !this.table.has(callee.head.name);
    } else if (callee.path.type === 'PathExpression') {
      return this.isFreeVar(callee.path);
    } else {
      return false;
    }
  }

  hasBinding(name) {
    return this.table.has(name);
  }

  child(blockParams) {
    return new BlockContext(this.source, this.options, this.table.child(blockParams));
  }

  customizeComponentName(input) {
    if (this.options.customizeComponentName) {
      return this.options.customizeComponentName(input);
    } else {
      return input;
    }
  }

}
/**
 * An `ExpressionNormalizer` normalizes expressions within a block.
 *
 * `ExpressionNormalizer` is stateless.
 */

class ExpressionNormalizer {
  constructor(block) {
    this.block = block;
  }

  normalize(expr, resolution) {
    switch (expr.type) {
      case 'NullLiteral':
      case 'BooleanLiteral':
      case 'NumberLiteral':
      case 'StringLiteral':
      case 'UndefinedLiteral':
        return this.block.builder.literal(expr.value, this.block.loc(expr.loc));

      case 'PathExpression':
        return this.path(expr, resolution);

      case 'SubExpression':
        {
          let resolution = this.block.resolutionFor(expr, SexpSyntaxContext);

          if (resolution.resolution === 'error') {
            throw generateSyntaxError(`You attempted to invoke a path (\`${resolution.path}\`) but ${resolution.head} was not in scope`, expr.loc);
          }

          return this.block.builder.sexp(this.callParts(expr, resolution.resolution), this.block.loc(expr.loc));
        }
    }
  }

  path(expr, resolution) {
    let headOffsets = this.block.loc(expr.head.loc);
    let tail = []; // start with the head

    let offset = headOffsets;

    for (let part of expr.tail) {
      offset = offset.sliceStartChars({
        chars: part.length,
        skipStart: 1
      });
      tail.push(new SourceSlice({
        loc: offset,
        chars: part
      }));
    }

    return this.block.builder.path(this.ref(expr.head, resolution), tail, this.block.loc(expr.loc));
  }
  /**
   * The `callParts` method takes ASTv1.CallParts as well as a syntax context and normalizes
   * it to an ASTv2 CallParts.
   */


  callParts(parts, context) {
    let {
      path,
      params,
      hash
    } = parts;
    let callee = this.normalize(path, context);
    let paramList = params.map(p => this.normalize(p, ASTv2.ARGUMENT_RESOLUTION));
    let paramLoc = SpanList.range(paramList, callee.loc.collapse('end'));
    let namedLoc = this.block.loc(hash.loc);
    let argsLoc = SpanList.range([paramLoc, namedLoc]);
    let positional = this.block.builder.positional(params.map(p => this.normalize(p, ASTv2.ARGUMENT_RESOLUTION)), paramLoc);
    let named = this.block.builder.named(hash.pairs.map(p => this.namedArgument(p)), this.block.loc(hash.loc));
    return {
      callee,
      args: this.block.builder.args(positional, named, argsLoc)
    };
  }

  namedArgument(pair) {
    let offsets = this.block.loc(pair.loc);
    let keyOffsets = offsets.sliceStartChars({
      chars: pair.key.length
    });
    return this.block.builder.namedArgument(new SourceSlice({
      chars: pair.key,
      loc: keyOffsets
    }), this.normalize(pair.value, ASTv2.ARGUMENT_RESOLUTION));
  }
  /**
   * The `ref` method normalizes an `ASTv1.PathHead` into an `ASTv2.VariableReference`.
   * This method is extremely important, because it is responsible for normalizing free
   * variables into an an ASTv2.PathHead *with appropriate context*.
   *
   * The syntax context is originally determined by the syntactic position that this `PathHead`
   * came from, and is ultimately attached to the `ASTv2.VariableReference` here. In ASTv2,
   * the `VariableReference` node bears full responsibility for loose mode rules that control
   * the behavior of free variables.
   */


  ref(head, resolution) {
    let {
      block
    } = this;
    let {
      builder,
      table
    } = block;
    let offsets = block.loc(head.loc);

    switch (head.type) {
      case 'ThisHead':
        return builder.self(offsets);

      case 'AtHead':
        {
          let symbol = table.allocateNamed(head.name);
          return builder.at(head.name, symbol, offsets);
        }

      case 'VarHead':
        {
          if (block.hasBinding(head.name)) {
            let symbol = table.isRoot ? table.allocateTemplateLocal(head.name) : table.get(head.name);
            return block.builder.localVar(head.name, symbol, table.isRoot, offsets);
          } else {
            let symbol = block.table.allocateFree(head.name);
            return block.builder.freeVar({
              name: head.name,
              context: block.strict ? ASTv2.STRICT_RESOLUTION : resolution,
              symbol,
              loc: offsets
            });
          }
        }
    }
  }

}
/**
 * `TemplateNormalizer` normalizes top-level ASTv1 statements to ASTv2.
 */


class StatementNormalizer {
  constructor(block) {
    this.block = block;
  }

  normalize(node) {
    switch (node.type) {
      case 'PartialStatement':
        throw new Error(`Handlebars partial syntax ({{> ...}}) is not allowed in Glimmer`);

      case 'BlockStatement':
        return this.BlockStatement(node);

      case 'ElementNode':
        return new ElementNormalizer(this.block).ElementNode(node);

      case 'MustacheStatement':
        return this.MustacheStatement(node);
      // These are the same in ASTv2

      case 'MustacheCommentStatement':
        return this.MustacheCommentStatement(node);

      case 'CommentStatement':
        {
          let loc = this.block.loc(node.loc);
          return new ASTv2.HtmlComment({
            loc,
            text: loc.slice({
              skipStart: 4,
              skipEnd: 3
            }).toSlice(node.value)
          });
        }

      case 'TextNode':
        return new ASTv2.HtmlText({
          loc: this.block.loc(node.loc),
          chars: node.chars
        });
    }
  }

  MustacheCommentStatement(node) {
    let loc = this.block.loc(node.loc);
    let textLoc;

    if (loc.asString().slice(0, 5) === '{{!--') {
      textLoc = loc.slice({
        skipStart: 5,
        skipEnd: 4
      });
    } else {
      textLoc = loc.slice({
        skipStart: 3,
        skipEnd: 2
      });
    }

    return new ASTv2.GlimmerComment({
      loc,
      text: textLoc.toSlice(node.value)
    });
  }
  /**
   * Normalizes an ASTv1.MustacheStatement to an ASTv2.AppendStatement
   */


  MustacheStatement(mustache) {
    let {
      escaped
    } = mustache;
    let loc = this.block.loc(mustache.loc); // Normalize the call parts in AppendSyntaxContext

    let callParts = this.expr.callParts({
      path: mustache.path,
      params: mustache.params,
      hash: mustache.hash
    }, AppendSyntaxContext(mustache));
    let value = callParts.args.isEmpty() ? callParts.callee : this.block.builder.sexp(callParts, loc);
    return this.block.builder.append({
      table: this.block.table,
      trusting: !escaped,
      value
    }, loc);
  }
  /**
   * Normalizes a ASTv1.BlockStatement to an ASTv2.BlockStatement
   */


  BlockStatement(block) {
    let {
      program,
      inverse
    } = block;
    let loc = this.block.loc(block.loc);
    let resolution = this.block.resolutionFor(block, BlockSyntaxContext);

    if (resolution.resolution === 'error') {
      throw generateSyntaxError(`You attempted to invoke a path (\`{{#${resolution.path}}}\`) but ${resolution.head} was not in scope`, loc);
    }

    let callParts = this.expr.callParts(block, resolution.resolution);
    return this.block.builder.blockStatement(assign({
      symbols: this.block.table,
      program: this.Block(program),
      inverse: inverse ? this.Block(inverse) : null
    }, callParts), loc);
  }

  Block({
    body,
    loc,
    blockParams
  }) {
    let child = this.block.child(blockParams);
    let normalizer = new StatementNormalizer(child);
    return new BlockChildren(this.block.loc(loc), body.map(b => normalizer.normalize(b)), this.block).assertBlock(child.table);
  }

  get expr() {
    return new ExpressionNormalizer(this.block);
  }

}

class ElementNormalizer {
  constructor(ctx) {
    this.ctx = ctx;
  }
  /**
   * Normalizes an ASTv1.ElementNode to:
   *
   * - ASTv2.NamedBlock if the tag name begins with `:`
   * - ASTv2.Component if the tag name matches the component heuristics
   * - ASTv2.SimpleElement if the tag name doesn't match the component heuristics
   *
   * A tag name represents a component if:
   *
   * - it begins with `@`
   * - it is exactly `this` or begins with `this.`
   * - the part before the first `.` is a reference to an in-scope variable binding
   * - it begins with an uppercase character
   */


  ElementNode(element) {
    let {
      tag,
      selfClosing,
      comments
    } = element;
    let loc = this.ctx.loc(element.loc);
    let [tagHead, ...rest] = tag.split('.'); // the head, attributes and modifiers are in the current scope

    let path = this.classifyTag(tagHead, rest, element.loc);
    let attrs = element.attributes.filter(a => a.name[0] !== '@').map(a => this.attr(a));
    let args = element.attributes.filter(a => a.name[0] === '@').map(a => this.arg(a));
    let modifiers = element.modifiers.map(m => this.modifier(m)); // the element's block params are in scope for the children

    let child = this.ctx.child(element.blockParams);
    let normalizer = new StatementNormalizer(child);
    let childNodes = element.children.map(s => normalizer.normalize(s));
    let el = this.ctx.builder.element({
      selfClosing,
      attrs,
      componentArgs: args,
      modifiers,
      comments: comments.map(c => new StatementNormalizer(this.ctx).MustacheCommentStatement(c))
    });
    let children = new ElementChildren(el, loc, childNodes, this.ctx);
    let offsets = this.ctx.loc(element.loc);
    let tagOffsets = offsets.sliceStartChars({
      chars: tag.length,
      skipStart: 1
    });

    if (path === 'ElementHead') {
      if (tag[0] === ':') {
        return children.assertNamedBlock(tagOffsets.slice({
          skipStart: 1
        }).toSlice(tag.slice(1)), child.table);
      } else {
        return children.assertElement(tagOffsets.toSlice(tag), element.blockParams.length > 0);
      }
    }

    if (element.selfClosing) {
      return el.selfClosingComponent(path, loc);
    } else {
      let blocks = children.assertComponent(tag, child.table, element.blockParams.length > 0);
      return el.componentWithNamedBlocks(path, blocks, loc);
    }
  }

  modifier(m) {
    let resolution = this.ctx.resolutionFor(m, ModifierSyntaxContext);

    if (resolution.resolution === 'error') {
      throw generateSyntaxError(`You attempted to invoke a path (\`{{#${resolution.path}}}\`) but ${resolution.head} was not in scope`, m.loc);
    }

    let callParts = this.expr.callParts(m, resolution.resolution);
    return this.ctx.builder.modifier(callParts, this.ctx.loc(m.loc));
  }
  /**
   * This method handles attribute values that are curlies, as well as curlies nested inside of
   * interpolations:
   *
   * ```hbs
   * <a href={{url}} />
   * <a href="{{url}}.html" />
   * ```
   */


  mustacheAttr(mustache) {
    // Normalize the call parts in AttrValueSyntaxContext
    let sexp = this.ctx.builder.sexp(this.expr.callParts(mustache, AttrValueSyntaxContext(mustache)), this.ctx.loc(mustache.loc)); // If there are no params or hash, just return the function part as its own expression

    if (sexp.args.isEmpty()) {
      return sexp.callee;
    } else {
      return sexp;
    }
  }
  /**
   * attrPart is the narrowed down list of valid attribute values that are also
   * allowed as a concat part (you can't nest concats).
   */


  attrPart(part) {
    switch (part.type) {
      case 'MustacheStatement':
        return {
          expr: this.mustacheAttr(part),
          trusting: !part.escaped
        };

      case 'TextNode':
        return {
          expr: this.ctx.builder.literal(part.chars, this.ctx.loc(part.loc)),
          trusting: true
        };
    }
  }

  attrValue(part) {
    switch (part.type) {
      case 'ConcatStatement':
        {
          let parts = part.parts.map(p => this.attrPart(p).expr);
          return {
            expr: this.ctx.builder.interpolate(parts, this.ctx.loc(part.loc)),
            trusting: false
          };
        }

      default:
        return this.attrPart(part);
    }
  }

  attr(m) {
    (false && assert(m.name[0] !== '@', 'An attr name must not start with `@`'));

    if (m.name === '...attributes') {
      return this.ctx.builder.splatAttr(this.ctx.table.allocateBlock('attrs'), this.ctx.loc(m.loc));
    }

    let offsets = this.ctx.loc(m.loc);
    let nameSlice = offsets.sliceStartChars({
      chars: m.name.length
    }).toSlice(m.name);
    let value = this.attrValue(m.value);
    return this.ctx.builder.attr({
      name: nameSlice,
      value: value.expr,
      trusting: value.trusting
    }, offsets);
  }

  arg(arg) {
    (false && assert(arg.name[0] === '@', 'An arg name must start with `@`'));
    let offsets = this.ctx.loc(arg.loc);
    let nameSlice = offsets.sliceStartChars({
      chars: arg.name.length
    }).toSlice(arg.name);
    let value = this.attrValue(arg.value);
    return this.ctx.builder.arg({
      name: nameSlice,
      value: value.expr,
      trusting: value.trusting
    }, offsets);
  }
  /**
   * This function classifies the head of an ASTv1.Element into an ASTv2.PathHead (if the
   * element is a component) or `'ElementHead'` (if the element is a simple element).
   *
   * Rules:
   *
   * 1. If the variable is an `@arg`, return an `AtHead`
   * 2. If the variable is `this`, return a `ThisHead`
   * 3. If the variable is in the current scope:
   *   a. If the scope is the root scope, then return a Free `LocalVarHead`
   *   b. Else, return a standard `LocalVarHead`
   * 4. If the tag name is a path and the variable is not in the current scope, Syntax Error
   * 5. If the variable is uppercase return a FreeVar(ResolveAsComponentHead)
   * 6. Otherwise, return `'ElementHead'`
   */


  classifyTag(variable, tail, loc) {
    let uppercase = isUpperCase(variable);
    let inScope = this.ctx.hasBinding(variable); // Since the parser handed us the HTML element name as a string, we need
    // to convert it into an ASTv1 path so it can be processed using the
    // expression normalizer.

    let isComponent = variable[0] === '@' || variable === 'this' || inScope || uppercase;
    let variableLoc = loc.sliceStartChars({
      skipStart: 1,
      chars: variable.length
    });
    let tailLength = tail.reduce((accum, part) => accum + 1 + part.length, 0);
    let pathEnd = variableLoc.getEnd().move(tailLength);
    let pathLoc = variableLoc.withEnd(pathEnd);

    if (isComponent) {
      // If the component name is uppercase, the variable is not in scope,
      // and the template is not in strict mode, run the optional
      // `customizeComponentName` function provided as an option to the
      // precompiler.
      if (!this.ctx.strict && uppercase && !inScope) {
        variable = this.ctx.customizeComponentName(variable);
      }

      let path = b.path({
        head: b.head(variable, variableLoc),
        tail,
        loc: pathLoc
      });
      let resolution = this.ctx.resolutionFor(path, ComponentSyntaxContext);

      if (resolution.resolution === 'error') {
        throw generateSyntaxError(`You attempted to invoke a path (\`<${resolution.path}>\`) but ${resolution.head} was not in scope`, loc);
      }

      return new ExpressionNormalizer(this.ctx).normalize(path, resolution.resolution);
    } // If the tag name wasn't a valid component but contained a `.`, it's
    // a syntax error.


    if (tail.length > 0) {
      throw generateSyntaxError(`You used ${variable}.${tail.join('.')} as a tag name, but ${variable} is not in scope`, loc);
    }

    return 'ElementHead';
  }

  get expr() {
    return new ExpressionNormalizer(this.ctx);
  }

}

class Children {
  constructor(loc, children, block) {
    this.loc = loc;
    this.children = children;
    this.block = block;
    this.namedBlocks = children.filter(c => c instanceof ASTv2.NamedBlock);
    this.hasSemanticContent = Boolean(children.filter(c => {
      if (c instanceof ASTv2.NamedBlock) {
        return false;
      }

      switch (c.type) {
        case 'GlimmerComment':
        case 'HtmlComment':
          return false;

        case 'HtmlText':
          return !/^\s*$/.exec(c.chars);

        default:
          return true;
      }
    }).length);
    this.nonBlockChildren = children.filter(c => !(c instanceof ASTv2.NamedBlock));
  }

}

class TemplateChildren extends Children {
  assertTemplate(table) {
    if (isPresent(this.namedBlocks)) {
      throw generateSyntaxError(`Unexpected named block at the top-level of a template`, this.loc);
    }

    return this.block.builder.template(table, this.nonBlockChildren, this.block.loc(this.loc));
  }

}

class BlockChildren extends Children {
  assertBlock(table) {
    if (isPresent(this.namedBlocks)) {
      throw generateSyntaxError(`Unexpected named block nested in a normal block`, this.loc);
    }

    return this.block.builder.block(table, this.nonBlockChildren, this.loc);
  }

}

class ElementChildren extends Children {
  constructor(el, loc, children, block) {
    super(loc, children, block);
    this.el = el;
  }

  assertNamedBlock(name, table) {
    if (this.el.base.selfClosing) {
      throw generateSyntaxError(`<:${name}> is not a valid named block: named blocks cannot be self-closing`, this.loc);
    }

    if (isPresent(this.namedBlocks)) {
      throw generateSyntaxError(`Unexpected named block inside <:${name}> named block: named blocks cannot contain nested named blocks`, this.loc);
    }

    if (!isLowerCase(name.chars)) {
      throw generateSyntaxError(`<:${name}> is not a valid named block: \`${name}\` is uppercase, and named blocks must be lowercase`, this.loc);
    }

    let offsets = SpanList.range(this.nonBlockChildren, this.loc);
    return this.block.builder.namedBlock(name, this.block.builder.block(table, this.nonBlockChildren, offsets), this.loc);
  }

  assertElement(name, hasBlockParams) {
    if (hasBlockParams) {
      throw generateSyntaxError(`Unexpected block params in <${name}>: simple elements cannot have block params`, this.loc);
    }

    if (isPresent(this.namedBlocks)) {
      let names = this.namedBlocks.map(b => b.name);

      if (names.length === 1) {
        throw generateSyntaxError(`Syntax Error: Unexpected named block <:foo> inside <${name}> HTML element`, this.loc);
      } else {
        let printedNames = names.map(n => `<:${n.chars}>`).join(', ');
        throw generateSyntaxError(`Syntax Error: Unexpected named blocks inside <${name}> HTML element (${printedNames})`, this.loc);
      }
    }

    return this.el.simple(name, this.nonBlockChildren, this.loc);
  }

  assertComponent(name, table, hasBlockParams) {
    if (isPresent(this.namedBlocks) && this.hasSemanticContent) {
      throw generateSyntaxError(`Unexpected content inside <${name}> component invocation: when using named blocks, the tag cannot contain other content`, this.loc);
    }

    if (isPresent(this.namedBlocks)) {
      if (hasBlockParams) {
        throw generateSyntaxError(`Unexpected block params list on <${name}> component invocation: when passing named blocks, the invocation tag cannot take block params`, this.loc);
      }

      return this.namedBlocks;
    } else {
      return [this.block.builder.namedBlock(SourceSlice.synthetic('default'), this.block.builder.block(table, this.nonBlockChildren, this.loc), this.loc)];
    }
  }

}

function isUpperCase(tag) {
  return tag[0] === tag[0].toUpperCase() && tag[0] !== tag[0].toLowerCase();
}

function isLowerCase(tag) {
  return tag[0] === tag[0].toLowerCase() && tag[0] !== tag[0].toUpperCase();
}

function printPath(node) {
  if (node.type !== 'PathExpression' && node.path.type === 'PathExpression') {
    return printPath(node.path);
  } else {
    return new Printer({
      entityEncoding: 'raw'
    }).print(node);
  }
}

function printHead(node) {
  if (node.type === 'PathExpression') {
    switch (node.head.type) {
      case 'AtHead':
      case 'VarHead':
        return node.head.name;

      case 'ThisHead':
        return 'this';
    }
  } else if (node.path.type === 'PathExpression') {
    return printHead(node.path);
  } else {
    return new Printer({
      entityEncoding: 'raw'
    }).print(node);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdjItYS9ub3JtYWxpemUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBUyxNQUFULEVBQWlCLE1BQWpCLEVBQXlCLFNBQXpCLFFBQTBDLGVBQTFDO0FBRUEsT0FBTyxPQUFQLE1BQW9CLHVCQUFwQjtBQUNBLFNBQTRCLFVBQTVCLFFBQThDLG9DQUE5QztBQUVBLFNBQVMsV0FBVCxRQUE0QixpQkFBNUI7QUFHQSxTQUFTLFFBQVQsUUFBeUIscUJBQXpCO0FBQ0EsU0FBK0MsV0FBL0MsUUFBa0UsaUJBQWxFO0FBQ0EsU0FBUyxtQkFBVCxRQUFvQyxpQkFBcEM7QUFFQSxPQUFPLENBQVAsTUFBYyx1QkFBZDtBQUNBLE9BQU8sS0FBSyxLQUFaLE1BQXVCLE9BQXZCO0FBQ0EsU0FBdUIsT0FBdkIsUUFBaUQsWUFBakQ7QUFDQSxTQUNFLG1CQURGLEVBRUUsc0JBRkYsRUFHRSxrQkFIRixFQUlFLHNCQUpGLEVBS0UscUJBTEYsRUFPRSxpQkFQRixRQVFPLG9CQVJQO0FBVUEsT0FBTSxTQUFVLFNBQVYsQ0FBb0IsTUFBcEIsRUFBb0MsT0FBQSxHQUE2QixFQUFqRSxFQUFtRTtBQUN2RSxNQUFJLEdBQUcsR0FBRyxVQUFVLENBQUMsTUFBRCxFQUFTLE9BQVQsQ0FBcEI7QUFFQSxNQUFJLGdCQUFnQixHQUFHLE1BQU0sQ0FDM0I7QUFDRSxJQUFBLFVBQVUsRUFBRSxLQURkO0FBRUUsSUFBQSxNQUFNLEVBQUU7QUFGVixHQUQyQixFQUszQixPQUwyQixDQUE3QjtBQVFBLE1BQUksR0FBRyxHQUFHLFdBQVcsQ0FBQyxHQUFaLENBQWdCLGdCQUFnQixDQUFDLFVBQWpCLEdBQThCLGdCQUFnQixDQUFDLE1BQS9DLEdBQXdELEVBQXhFLENBQVY7QUFDQSxNQUFJLEtBQUssR0FBRyxJQUFJLFlBQUosQ0FBaUIsTUFBakIsRUFBeUIsZ0JBQXpCLEVBQTJDLEdBQTNDLENBQVo7QUFD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LEVBQW9DO0FBQ2xDLFlBQVEsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFsQjtBQUNFLFdBQUssUUFBTDtBQUNBLFdBQUssU0FBTDtBQUNFLGVBQU8sSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFqQjs7QUFDRixXQUFLLFVBQUw7QUFDRSxlQUFPLE1BQVA7QUFMSjtBQU9ELEdBUkQsTUFRTyxJQUFJLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBVixLQUFtQixnQkFBdkIsRUFBeUM7QUFDOUMsV0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQU4sQ0FBaEI7QUFDRCxHQUZNLE1BRUE7QUFDTCxXQUFPLElBQUksT0FBSixDQUFZO0FBQUUsTUFBQSxjQUFjLEVBQUU7QUFBbEIsS0FBWixFQUF1QyxLQUF2QyxDQUE2QyxJQUE3QyxDQUFQO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByZXNlbnRBcnJheSB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgYXNzZXJ0LCBhc3NpZ24sIGlzUHJlc2VudCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG5pbXBvcnQgUHJpbnRlciBmcm9tICcuLi9nZW5lcmF0aW9uL3ByaW50ZXInO1xuaW1wb3J0IHsgUHJlY29tcGlsZU9wdGlvbnMsIHByZXByb2Nlc3MgfSBmcm9tICcuLi9wYXJzZXIvdG9rZW5pemVyLWV2ZW50LWhhbmRsZXJzJztcbmltcG9ydCB7IFNvdXJjZUxvY2F0aW9uIH0gZnJvbSAnLi4vc291cmNlL2xvY2F0aW9uJztcbmltcG9ydCB7IFNvdXJjZVNsaWNlIH0gZnJvbSAnLi4vc291cmNlL3NsaWNlJztcbmltcG9ydCB7IFNvdXJjZSB9IGZyb20gJy4uL3NvdXJjZS9zb3VyY2UnO1xuaW1wb3J0IHsgU291cmNlU3BhbiB9IGZyb20gJy4uL3NvdXJjZS9zcGFuJztcbmltcG9ydCB7IFNwYW5MaXN0IH0gZnJvbSAnLi4vc291cmNlL3NwYW4tbGlzdCc7XG5pbXBvcnQgeyBCbG9ja1N5bWJvbFRhYmxlLCBQcm9ncmFtU3ltYm9sVGFibGUsIFN5bWJvbFRhYmxlIH0gZnJvbSAnLi4vc3ltYm9sLXRhYmxlJztcbmltcG9ydCB7IGdlbmVyYXRlU3ludGF4RXJyb3IgfSBmcm9tICcuLi9zeW50YXgtZXJyb3InO1xuaW1wb3J0ICogYXMgQVNUdjEgZnJvbSAnLi4vdjEvYXBpJztcbmltcG9ydCBiIGZyb20gJy4uL3YxL3BhcnNlci1idWlsZGVycyc7XG5pbXBvcnQgKiBhcyBBU1R2MiBmcm9tICcuL2FwaSc7XG5pbXBvcnQgeyBCdWlsZEVsZW1lbnQsIEJ1aWxkZXIsIENhbGxQYXJ0cyB9IGZyb20gJy4vYnVpbGRlcnMnO1xuaW1wb3J0IHtcbiAgQXBwZW5kU3ludGF4Q29udGV4dCxcbiAgQXR0clZhbHVlU3ludGF4Q29udGV4dCxcbiAgQmxvY2tTeW50YXhDb250ZXh0LFxuICBDb21wb25lbnRTeW50YXhDb250ZXh0LFxuICBNb2RpZmllclN5bnRheENvbnRleHQsXG4gIFJlc29sdXRpb24sXG4gIFNleHBTeW50YXhDb250ZXh0LFxufSBmcm9tICcuL2xvb3NlLXJlc29sdXRpb24nO1xuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKHNvdXJjZTogU291cmNlLCBvcHRpb25zOiBQcmVjb21waWxlT3B0aW9ucyA9IHt9KTogQVNUdjIuVGVtcGxhdGUge1xuICBsZXQgYXN0ID0gcHJlcHJvY2Vzcyhzb3VyY2UsIG9wdGlvbnMpO1xuXG4gIGxldCBub3JtYWxpemVPcHRpb25zID0gYXNzaWduKFxuICAgIHtcbiAgICAgIHN0cmljdE1vZGU6IGZhbHNlLFxuICAgICAgbG9jYWxzOiBbXSxcbiAgICB9LFxuICAgIG9wdGlvbnNcbiAgKTtcblxuICBsZXQgdG9wID0gU3ltYm9sVGFibGUudG9wKG5vcm1hbGl6ZU9wdGlvbnMuc3RyaWN0TW9kZSA/IG5vcm1hbGl6ZU9wdGlvbnMubG9jYWxzIDogW10pO1xuICBsZXQgYmxvY2sgPSBuZXcgQmxvY2tDb250ZXh0KHNvdXJjZSwgbm9ybWFsaXplT3B0aW9ucywgdG9wKTtcbiAgbGV0IG5vcm1hbGl6ZXIgPSBuZXcgU3RhdGVtZW50Tm9ybWFsaXplcihibG9jayk7XG5cbiAgcmV0dXJuIG5ldyBUZW1wbGF0ZUNoaWxkcmVuKFxuICAgIGJsb2NrLmxvYyhhc3QubG9jKSxcbiAgICBhc3QuYm9keS5tYXAoKGIpID0+IG5vcm1hbGl6ZXIubm9ybWFsaXplKGIpKSxcbiAgICBibG9ja1xuICApLmFzc2VydFRlbXBsYXRlKHRvcCk7XG59XG5cbi8qKlxuICogQSBgQmxvY2tDb250ZXh0YCByZXByZXNlbnRzIHRoZSBibG9jayB0aGF0IGEgcGFydGljdWxhciBBU1Qgbm9kZSBpcyBjb250YWluZWQgaW5zaWRlIG9mLlxuICpcbiAqIGBCbG9ja0NvbnRleHRgIGlzIGF3YXJlIG9mIHRlbXBsYXRlLXdpZGUgb3B0aW9ucyAoc3VjaCBhcyBzdHJpY3QgbW9kZSksIGFzIHdlbGwgYXMgdGhlIGJpbmRpbmdzXG4gKiB0aGF0IGFyZSBpbi1zY29wZSB3aXRoaW4gdGhhdCBibG9jay5cbiAqXG4gKiBDb25jcmV0ZWx5LCBpdCBoYXMgdGhlIGBQcmVjb21waWxlT3B0aW9uc2AgYW5kIGN1cnJlbnQgYFN5bWJvbFRhYmxlYCwgYW5kIHByb3ZpZGVzXG4gKiBmYWNpbGl0aWVzIGZvciB3b3JraW5nIHdpdGggdGhvc2Ugb3B0aW9ucy5cbiAqXG4gKiBgQmxvY2tDb250ZXh0YCBpcyBzdGF0ZWxlc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBCbG9ja0NvbnRleHQ8VGFibGUgZXh0ZW5kcyBTeW1ib2xUYWJsZSA9IFN5bWJvbFRhYmxlPiB7XG4gIHJlYWRvbmx5IGJ1aWxkZXI6IEJ1aWxkZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcmVhZG9ubHkgc291cmNlOiBTb3VyY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBQcmVjb21waWxlT3B0aW9ucyxcbiAgICByZWFkb25seSB0YWJsZTogVGFibGVcbiAgKSB7XG4gICAgdGhpcy5idWlsZGVyID0gbmV3IEJ1aWxkZXIoKTtcbiAgfVxuXG4gIGdldCBzdHJpY3QoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5zdHJpY3RNb2RlIHx8IGZhbHNlO1xuICB9XG5cbiAgbG9jKGxvYzogU291cmNlTG9jYXRpb24pOiBTb3VyY2VTcGFuIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2Uuc3BhbkZvcihsb2MpO1xuICB9XG5cbiAgcmVzb2x1dGlvbkZvcjxOIGV4dGVuZHMgQVNUdjEuQ2FsbE5vZGUgfCBBU1R2MS5QYXRoRXhwcmVzc2lvbj4oXG4gICAgbm9kZTogTixcbiAgICByZXNvbHV0aW9uOiBSZXNvbHV0aW9uPE4+XG4gICk6IHsgcmVzb2x1dGlvbjogQVNUdjIuRnJlZVZhclJlc29sdXRpb24gfSB8IHsgcmVzb2x1dGlvbjogJ2Vycm9yJzsgcGF0aDogc3RyaW5nOyBoZWFkOiBzdHJpbmcgfSB7XG4gICAgaWYgKHRoaXMuc3RyaWN0KSB7XG4gICAgICByZXR1cm4geyByZXNvbHV0aW9uOiBBU1R2Mi5TVFJJQ1RfUkVTT0xVVElPTiB9O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzRnJlZVZhcihub2RlKSkge1xuICAgICAgbGV0IHIgPSByZXNvbHV0aW9uKG5vZGUpO1xuXG4gICAgICBpZiAociA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlc29sdXRpb246ICdlcnJvcicsXG4gICAgICAgICAgcGF0aDogcHJpbnRQYXRoKG5vZGUpLFxuICAgICAgICAgIGhlYWQ6IHByaW50SGVhZChub2RlKSxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHsgcmVzb2x1dGlvbjogciB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4geyByZXNvbHV0aW9uOiBBU1R2Mi5TVFJJQ1RfUkVTT0xVVElPTiB9O1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaXNGcmVlVmFyKGNhbGxlZTogQVNUdjEuQ2FsbE5vZGUgfCBBU1R2MS5QYXRoRXhwcmVzc2lvbik6IGJvb2xlYW4ge1xuICAgIGlmIChjYWxsZWUudHlwZSA9PT0gJ1BhdGhFeHByZXNzaW9uJykge1xuICAgICAgaWYgKGNhbGxlZS5oZWFkLnR5cGUgIT09ICdWYXJIZWFkJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhdGhpcy50YWJsZS5oYXMoY2FsbGVlLmhlYWQubmFtZSk7XG4gICAgfSBlbHNlIGlmIChjYWxsZWUucGF0aC50eXBlID09PSAnUGF0aEV4cHJlc3Npb24nKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc0ZyZWVWYXIoY2FsbGVlLnBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaGFzQmluZGluZyhuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50YWJsZS5oYXMobmFtZSk7XG4gIH1cblxuICBjaGlsZChibG9ja1BhcmFtczogc3RyaW5nW10pOiBCbG9ja0NvbnRleHQ8QmxvY2tTeW1ib2xUYWJsZT4ge1xuICAgIHJldHVybiBuZXcgQmxvY2tDb250ZXh0KHRoaXMuc291cmNlLCB0aGlzLm9wdGlvbnMsIHRoaXMudGFibGUuY2hpbGQoYmxvY2tQYXJhbXMpKTtcbiAgfVxuXG4gIGN1c3RvbWl6ZUNvbXBvbmVudE5hbWUoaW5wdXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jdXN0b21pemVDb21wb25lbnROYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmN1c3RvbWl6ZUNvbXBvbmVudE5hbWUoaW5wdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQW4gYEV4cHJlc3Npb25Ob3JtYWxpemVyYCBub3JtYWxpemVzIGV4cHJlc3Npb25zIHdpdGhpbiBhIGJsb2NrLlxuICpcbiAqIGBFeHByZXNzaW9uTm9ybWFsaXplcmAgaXMgc3RhdGVsZXNzLlxuICovXG5jbGFzcyBFeHByZXNzaW9uTm9ybWFsaXplciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYmxvY2s6IEJsb2NrQ29udGV4dCkge31cblxuICAvKipcbiAgICogVGhlIGBub3JtYWxpemVgIG1ldGhvZCB0YWtlcyBhbiBhcmJpdHJhcnkgZXhwcmVzc2lvbiBhbmQgaXRzIG9yaWdpbmFsIHN5bnRheCBjb250ZXh0IGFuZFxuICAgKiBub3JtYWxpemVzIGl0IHRvIGFuIEFTVHYyIGV4cHJlc3Npb24uXG4gICAqXG4gICAqIEBzZWUge1N5bnRheENvbnRleHR9XG4gICAqL1xuICBub3JtYWxpemUoZXhwcjogQVNUdjEuTGl0ZXJhbCwgcmVzb2x1dGlvbjogQVNUdjIuRnJlZVZhclJlc29sdXRpb24pOiBBU1R2Mi5MaXRlcmFsRXhwcmVzc2lvbjtcbiAgbm9ybWFsaXplKFxuICAgIGV4cHI6IEFTVHYxLk1pbmltYWxQYXRoRXhwcmVzc2lvbixcbiAgICByZXNvbHV0aW9uOiBBU1R2Mi5GcmVlVmFyUmVzb2x1dGlvblxuICApOiBBU1R2Mi5QYXRoRXhwcmVzc2lvbjtcbiAgbm9ybWFsaXplKGV4cHI6IEFTVHYxLlN1YkV4cHJlc3Npb24sIHJlc29sdXRpb246IEFTVHYyLkZyZWVWYXJSZXNvbHV0aW9uKTogQVNUdjIuQ2FsbEV4cHJlc3Npb247XG4gIG5vcm1hbGl6ZShleHByOiBBU1R2MS5FeHByZXNzaW9uLCByZXNvbHV0aW9uOiBBU1R2Mi5GcmVlVmFyUmVzb2x1dGlvbik6IEFTVHYyLkV4cHJlc3Npb25Ob2RlO1xuICBub3JtYWxpemUoXG4gICAgZXhwcjogQVNUdjEuRXhwcmVzc2lvbiB8IEFTVHYxLk1pbmltYWxQYXRoRXhwcmVzc2lvbixcbiAgICByZXNvbHV0aW9uOiBBU1R2Mi5GcmVlVmFyUmVzb2x1dGlvblxuICApOiBBU1R2Mi5FeHByZXNzaW9uTm9kZSB7XG4gICAgc3dpdGNoIChleHByLnR5cGUpIHtcbiAgICAgIGNhc2UgJ051bGxMaXRlcmFsJzpcbiAgICAgIGNhc2UgJ0Jvb2xlYW5MaXRlcmFsJzpcbiAgICAgIGNhc2UgJ051bWJlckxpdGVyYWwnOlxuICAgICAgY2FzZSAnU3RyaW5nTGl0ZXJhbCc6XG4gICAgICBjYXNlICdVbmRlZmluZWRMaXRlcmFsJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvY2suYnVpbGRlci5saXRlcmFsKGV4cHIudmFsdWUsIHRoaXMuYmxvY2subG9jKGV4cHIubG9jKSk7XG4gICAgICBjYXNlICdQYXRoRXhwcmVzc2lvbic6XG4gICAgICAgIHJldHVybiB0aGlzLnBhdGgoZXhwciwgcmVzb2x1dGlvbik7XG4gICAgICBjYXNlICdTdWJFeHByZXNzaW9uJzoge1xuICAgICAgICBsZXQgcmVzb2x1dGlvbiA9IHRoaXMuYmxvY2sucmVzb2x1dGlvbkZvcihleHByLCBTZXhwU3ludGF4Q29udGV4dCk7XG5cbiAgICAgICAgaWYgKHJlc29sdXRpb24ucmVzb2x1dGlvbiA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgIHRocm93IGdlbmVyYXRlU3ludGF4RXJyb3IoXG4gICAgICAgICAgICBgWW91IGF0dGVtcHRlZCB0byBpbnZva2UgYSBwYXRoIChcXGAke3Jlc29sdXRpb24ucGF0aH1cXGApIGJ1dCAke3Jlc29sdXRpb24uaGVhZH0gd2FzIG5vdCBpbiBzY29wZWAsXG4gICAgICAgICAgICBleHByLmxvY1xuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5ibG9jay5idWlsZGVyLnNleHAoXG4gICAgICAgICAgdGhpcy5jYWxsUGFydHMoZXhwciwgcmVzb2x1dGlvbi5yZXNvbHV0aW9uKSxcbiAgICAgICAgICB0aGlzLmJsb2NrLmxvYyhleHByLmxvYylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHBhdGgoXG4gICAgZXhwcjogQVNUdjEuTWluaW1hbFBhdGhFeHByZXNzaW9uLFxuICAgIHJlc29sdXRpb246IEFTVHYyLkZyZWVWYXJSZXNvbHV0aW9uXG4gICk6IEFTVHYyLlBhdGhFeHByZXNzaW9uIHtcbiAgICBsZXQgaGVhZE9mZnNldHMgPSB0aGlzLmJsb2NrLmxvYyhleHByLmhlYWQubG9jKTtcblxuICAgIGxldCB0YWlsID0gW107XG5cbiAgICAvLyBzdGFydCB3aXRoIHRoZSBoZWFkXG4gICAgbGV0IG9mZnNldCA9IGhlYWRPZmZzZXRzO1xuXG4gICAgZm9yIChsZXQgcGFydCBvZiBleHByLnRhaWwpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldC5zbGljZVN0YXJ0Q2hhcnMoeyBjaGFyczogcGFydC5sZW5ndGgsIHNraXBTdGFydDogMSB9KTtcbiAgICAgIHRhaWwucHVzaChcbiAgICAgICAgbmV3IFNvdXJjZVNsaWNlKHtcbiAgICAgICAgICBsb2M6IG9mZnNldCxcbiAgICAgICAgICBjaGFyczogcGFydCxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYmxvY2suYnVpbGRlci5wYXRoKHRoaXMucmVmKGV4cHIuaGVhZCwgcmVzb2x1dGlvbiksIHRhaWwsIHRoaXMuYmxvY2subG9jKGV4cHIubG9jKSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGBjYWxsUGFydHNgIG1ldGhvZCB0YWtlcyBBU1R2MS5DYWxsUGFydHMgYXMgd2VsbCBhcyBhIHN5bnRheCBjb250ZXh0IGFuZCBub3JtYWxpemVzXG4gICAqIGl0IHRvIGFuIEFTVHYyIENhbGxQYXJ0cy5cbiAgICovXG4gIGNhbGxQYXJ0cyhwYXJ0czogQVNUdjEuQ2FsbFBhcnRzLCBjb250ZXh0OiBBU1R2Mi5GcmVlVmFyUmVzb2x1dGlvbik6IENhbGxQYXJ0cyB7XG4gICAgbGV0IHsgcGF0aCwgcGFyYW1zLCBoYXNoIH0gPSBwYXJ0cztcblxuICAgIGxldCBjYWxsZWUgPSB0aGlzLm5vcm1hbGl6ZShwYXRoLCBjb250ZXh0KTtcbiAgICBsZXQgcGFyYW1MaXN0ID0gcGFyYW1zLm1hcCgocCkgPT4gdGhpcy5ub3JtYWxpemUocCwgQVNUdjIuQVJHVU1FTlRfUkVTT0xVVElPTikpO1xuICAgIGxldCBwYXJhbUxvYyA9IFNwYW5MaXN0LnJhbmdlKHBhcmFtTGlzdCwgY2FsbGVlLmxvYy5jb2xsYXBzZSgnZW5kJykpO1xuICAgIGxldCBuYW1lZExvYyA9IHRoaXMuYmxvY2subG9jKGhhc2gubG9jKTtcbiAgICBsZXQgYXJnc0xvYyA9IFNwYW5MaXN0LnJhbmdlKFtwYXJhbUxvYywgbmFtZWRMb2NdKTtcblxuICAgIGxldCBwb3NpdGlvbmFsID0gdGhpcy5ibG9jay5idWlsZGVyLnBvc2l0aW9uYWwoXG4gICAgICBwYXJhbXMubWFwKChwKSA9PiB0aGlzLm5vcm1hbGl6ZShwLCBBU1R2Mi5BUkdVTUVOVF9SRVNPTFVUSU9OKSksXG4gICAgICBwYXJhbUxvY1xuICAgICk7XG5cbiAgICBsZXQgbmFtZWQgPSB0aGlzLmJsb2NrLmJ1aWxkZXIubmFtZWQoXG4gICAgICBoYXNoLnBhaXJzLm1hcCgocCkgPT4gdGhpcy5uYW1lZEFyZ3VtZW50KHApKSxcbiAgICAgIHRoaXMuYmxvY2subG9jKGhhc2gubG9jKVxuICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgY2FsbGVlLFxuICAgICAgYXJnczogdGhpcy5ibG9jay5idWlsZGVyLmFyZ3MocG9zaXRpb25hbCwgbmFtZWQsIGFyZ3NMb2MpLFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIG5hbWVkQXJndW1lbnQocGFpcjogQVNUdjEuSGFzaFBhaXIpOiBBU1R2Mi5OYW1lZEFyZ3VtZW50IHtcbiAgICBsZXQgb2Zmc2V0cyA9IHRoaXMuYmxvY2subG9jKHBhaXIubG9jKTtcblxuICAgIGxldCBrZXlPZmZzZXRzID0gb2Zmc2V0cy5zbGljZVN0YXJ0Q2hhcnMoeyBjaGFyczogcGFpci5rZXkubGVuZ3RoIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuYmxvY2suYnVpbGRlci5uYW1lZEFyZ3VtZW50KFxuICAgICAgbmV3IFNvdXJjZVNsaWNlKHsgY2hhcnM6IHBhaXIua2V5LCBsb2M6IGtleU9mZnNldHMgfSksXG4gICAgICB0aGlzLm5vcm1hbGl6ZShwYWlyLnZhbHVlLCBBU1R2Mi5BUkdVTUVOVF9SRVNPTFVUSU9OKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGByZWZgIG1ldGhvZCBub3JtYWxpemVzIGFuIGBBU1R2MS5QYXRoSGVhZGAgaW50byBhbiBgQVNUdjIuVmFyaWFibGVSZWZlcmVuY2VgLlxuICAgKiBUaGlzIG1ldGhvZCBpcyBleHRyZW1lbHkgaW1wb3J0YW50LCBiZWNhdXNlIGl0IGlzIHJlc3BvbnNpYmxlIGZvciBub3JtYWxpemluZyBmcmVlXG4gICAqIHZhcmlhYmxlcyBpbnRvIGFuIGFuIEFTVHYyLlBhdGhIZWFkICp3aXRoIGFwcHJvcHJpYXRlIGNvbnRleHQqLlxuICAgKlxuICAgKiBUaGUgc3ludGF4IGNvbnRleHQgaXMgb3JpZ2luYWxseSBkZXRlcm1pbmVkIGJ5IHRoZSBzeW50YWN0aWMgcG9zaXRpb24gdGhhdCB0aGlzIGBQYXRoSGVhZGBcbiAgICogY2FtZSBmcm9tLCBhbmQgaXMgdWx0aW1hdGVseSBhdHRhY2hlZCB0byB0aGUgYEFTVHYyLlZhcmlhYmxlUmVmZXJlbmNlYCBoZXJlLiBJbiBBU1R2MixcbiAgICogdGhlIGBWYXJpYWJsZVJlZmVyZW5jZWAgbm9kZSBiZWFycyBmdWxsIHJlc3BvbnNpYmlsaXR5IGZvciBsb29zZSBtb2RlIHJ1bGVzIHRoYXQgY29udHJvbFxuICAgKiB0aGUgYmVoYXZpb3Igb2YgZnJlZSB2YXJpYWJsZXMuXG4gICAqL1xuICBwcml2YXRlIHJlZihoZWFkOiBBU1R2MS5QYXRoSGVhZCwgcmVzb2x1dGlvbjogQVNUdjIuRnJlZVZhclJlc29sdXRpb24pOiBBU1R2Mi5WYXJpYWJsZVJlZmVyZW5jZSB7XG4gICAgbGV0IHsgYmxvY2sgfSA9IHRoaXM7XG4gICAgbGV0IHsgYnVpbGRlciwgdGFibGUgfSA9IGJsb2NrO1xuICAgIGxldCBvZmZzZXRzID0gYmxvY2subG9jKGhlYWQubG9jKTtcblxuICAgIHN3aXRjaCAoaGVhZC50eXBlKSB7XG4gICAgICBjYXNlICdUaGlzSGVhZCc6XG4gICAgICAgIHJldHVybiBidWlsZGVyLnNlbGYob2Zmc2V0cyk7XG4gICAgICBjYXNlICdBdEhlYWQnOiB7XG4gICAgICAgIGxldCBzeW1ib2wgPSB0YWJsZS5hbGxvY2F0ZU5hbWVkKGhlYWQubmFtZSk7XG4gICAgICAgIHJldHVybiBidWlsZGVyLmF0KGhlYWQubmFtZSwgc3ltYm9sLCBvZmZzZXRzKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ1ZhckhlYWQnOiB7XG4gICAgICAgIGlmIChibG9jay5oYXNCaW5kaW5nKGhlYWQubmFtZSkpIHtcbiAgICAgICAgICBsZXQgc3ltYm9sID0gdGFibGUuaXNSb290ID8gdGFibGUuYWxsb2NhdGVUZW1wbGF0ZUxvY2FsKGhlYWQubmFtZSkgOiB0YWJsZS5nZXQoaGVhZC5uYW1lKTtcblxuICAgICAgICAgIHJldHVybiBibG9jay5idWlsZGVyLmxvY2FsVmFyKGhlYWQubmFtZSwgc3ltYm9sLCB0YWJsZS5pc1Jvb3QsIG9mZnNldHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBzeW1ib2wgPSBibG9jay50YWJsZS5hbGxvY2F0ZUZyZWUoaGVhZC5uYW1lKTtcbiAgICAgICAgICByZXR1cm4gYmxvY2suYnVpbGRlci5mcmVlVmFyKHtcbiAgICAgICAgICAgIG5hbWU6IGhlYWQubmFtZSxcbiAgICAgICAgICAgIGNvbnRleHQ6IGJsb2NrLnN0cmljdCA/IEFTVHYyLlNUUklDVF9SRVNPTFVUSU9OIDogcmVzb2x1dGlvbixcbiAgICAgICAgICAgIHN5bWJvbCxcbiAgICAgICAgICAgIGxvYzogb2Zmc2V0cyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIGBUZW1wbGF0ZU5vcm1hbGl6ZXJgIG5vcm1hbGl6ZXMgdG9wLWxldmVsIEFTVHYxIHN0YXRlbWVudHMgdG8gQVNUdjIuXG4gKi9cbmNsYXNzIFN0YXRlbWVudE5vcm1hbGl6ZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGJsb2NrOiBCbG9ja0NvbnRleHQpIHt9XG5cbiAgbm9ybWFsaXplKG5vZGU6IEFTVHYxLlN0YXRlbWVudCk6IEFTVHYyLkNvbnRlbnROb2RlIHwgQVNUdjIuTmFtZWRCbG9jayB7XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgIGNhc2UgJ1BhcnRpYWxTdGF0ZW1lbnQnOlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhhbmRsZWJhcnMgcGFydGlhbCBzeW50YXggKHt7PiAuLi59fSkgaXMgbm90IGFsbG93ZWQgaW4gR2xpbW1lcmApO1xuICAgICAgY2FzZSAnQmxvY2tTdGF0ZW1lbnQnOlxuICAgICAgICByZXR1cm4gdGhpcy5CbG9ja1N0YXRlbWVudChub2RlKTtcbiAgICAgIGNhc2UgJ0VsZW1lbnROb2RlJzpcbiAgICAgICAgcmV0dXJuIG5ldyBFbGVtZW50Tm9ybWFsaXplcih0aGlzLmJsb2NrKS5FbGVtZW50Tm9kZShub2RlKTtcbiAgICAgIGNhc2UgJ011c3RhY2hlU3RhdGVtZW50JzpcbiAgICAgICAgcmV0dXJuIHRoaXMuTXVzdGFjaGVTdGF0ZW1lbnQobm9kZSk7XG5cbiAgICAgIC8vIFRoZXNlIGFyZSB0aGUgc2FtZSBpbiBBU1R2MlxuICAgICAgY2FzZSAnTXVzdGFjaGVDb21tZW50U3RhdGVtZW50JzpcbiAgICAgICAgcmV0dXJuIHRoaXMuTXVzdGFjaGVDb21tZW50U3RhdGVtZW50KG5vZGUpO1xuXG4gICAgICBjYXNlICdDb21tZW50U3RhdGVtZW50Jzoge1xuICAgICAgICBsZXQgbG9jID0gdGhpcy5ibG9jay5sb2Mobm9kZS5sb2MpO1xuICAgICAgICByZXR1cm4gbmV3IEFTVHYyLkh0bWxDb21tZW50KHtcbiAgICAgICAgICBsb2MsXG4gICAgICAgICAgdGV4dDogbG9jLnNsaWNlKHsgc2tpcFN0YXJ0OiA0LCBza2lwRW5kOiAzIH0pLnRvU2xpY2Uobm9kZS52YWx1ZSksXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjYXNlICdUZXh0Tm9kZSc6XG4gICAgICAgIHJldHVybiBuZXcgQVNUdjIuSHRtbFRleHQoe1xuICAgICAgICAgIGxvYzogdGhpcy5ibG9jay5sb2Mobm9kZS5sb2MpLFxuICAgICAgICAgIGNoYXJzOiBub2RlLmNoYXJzLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBNdXN0YWNoZUNvbW1lbnRTdGF0ZW1lbnQobm9kZTogQVNUdjEuTXVzdGFjaGVDb21tZW50U3RhdGVtZW50KTogQVNUdjIuR2xpbW1lckNvbW1lbnQge1xuICAgIGxldCBsb2MgPSB0aGlzLmJsb2NrLmxvYyhub2RlLmxvYyk7XG4gICAgbGV0IHRleHRMb2M6IFNvdXJjZVNwYW47XG5cbiAgICBpZiAobG9jLmFzU3RyaW5nKCkuc2xpY2UoMCwgNSkgPT09ICd7eyEtLScpIHtcbiAgICAgIHRleHRMb2MgPSBsb2Muc2xpY2UoeyBza2lwU3RhcnQ6IDUsIHNraXBFbmQ6IDQgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRleHRMb2MgPSBsb2Muc2xpY2UoeyBza2lwU3RhcnQ6IDMsIHNraXBFbmQ6IDIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBU1R2Mi5HbGltbWVyQ29tbWVudCh7XG4gICAgICBsb2MsXG4gICAgICB0ZXh0OiB0ZXh0TG9jLnRvU2xpY2Uobm9kZS52YWx1ZSksXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTm9ybWFsaXplcyBhbiBBU1R2MS5NdXN0YWNoZVN0YXRlbWVudCB0byBhbiBBU1R2Mi5BcHBlbmRTdGF0ZW1lbnRcbiAgICovXG4gIE11c3RhY2hlU3RhdGVtZW50KG11c3RhY2hlOiBBU1R2MS5NdXN0YWNoZVN0YXRlbWVudCk6IEFTVHYyLkFwcGVuZENvbnRlbnQge1xuICAgIGxldCB7IGVzY2FwZWQgfSA9IG11c3RhY2hlO1xuICAgIGxldCBsb2MgPSB0aGlzLmJsb2NrLmxvYyhtdXN0YWNoZS5sb2MpO1xuXG4gICAgLy8gTm9ybWFsaXplIHRoZSBjYWxsIHBhcnRzIGluIEFwcGVuZFN5bnRheENvbnRleHRcbiAgICBsZXQgY2FsbFBhcnRzID0gdGhpcy5leHByLmNhbGxQYXJ0cyhcbiAgICAgIHtcbiAgICAgICAgcGF0aDogbXVzdGFjaGUucGF0aCxcbiAgICAgICAgcGFyYW1zOiBtdXN0YWNoZS5wYXJhbXMsXG4gICAgICAgIGhhc2g6IG11c3RhY2hlLmhhc2gsXG4gICAgICB9LFxuICAgICAgQXBwZW5kU3ludGF4Q29udGV4dChtdXN0YWNoZSlcbiAgICApO1xuXG4gICAgbGV0IHZhbHVlID0gY2FsbFBhcnRzLmFyZ3MuaXNFbXB0eSgpXG4gICAgICA/IGNhbGxQYXJ0cy5jYWxsZWVcbiAgICAgIDogdGhpcy5ibG9jay5idWlsZGVyLnNleHAoY2FsbFBhcnRzLCBsb2MpO1xuXG4gICAgcmV0dXJuIHRoaXMuYmxvY2suYnVpbGRlci5hcHBlbmQoXG4gICAgICB7XG4gICAgICAgIHRhYmxlOiB0aGlzLmJsb2NrLnRhYmxlLFxuICAgICAgICB0cnVzdGluZzogIWVzY2FwZWQsXG4gICAgICAgIHZhbHVlLFxuICAgICAgfSxcbiAgICAgIGxvY1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogTm9ybWFsaXplcyBhIEFTVHYxLkJsb2NrU3RhdGVtZW50IHRvIGFuIEFTVHYyLkJsb2NrU3RhdGVtZW50XG4gICAqL1xuICBCbG9ja1N0YXRlbWVudChibG9jazogQVNUdjEuQmxvY2tTdGF0ZW1lbnQpOiBBU1R2Mi5JbnZva2VCbG9jayB7XG4gICAgbGV0IHsgcHJvZ3JhbSwgaW52ZXJzZSB9ID0gYmxvY2s7XG4gICAgbGV0IGxvYyA9IHRoaXMuYmxvY2subG9jKGJsb2NrLmxvYyk7XG5cbiAgICBsZXQgcmVzb2x1dGlvbiA9IHRoaXMuYmxvY2sucmVzb2x1dGlvbkZvcihibG9jaywgQmxvY2tTeW50YXhDb250ZXh0KTtcblxuICAgIGlmIChyZXNvbHV0aW9uLnJlc29sdXRpb24gPT09ICdlcnJvcicpIHtcbiAgICAgIHRocm93IGdlbmVyYXRlU3ludGF4RXJyb3IoXG4gICAgICAgIGBZb3UgYXR0ZW1wdGVkIHRvIGludm9rZSBhIHBhdGggKFxcYHt7IyR7cmVzb2x1dGlvbi5wYXRofX19XFxgKSBidXQgJHtyZXNvbHV0aW9uLmhlYWR9IHdhcyBub3QgaW4gc2NvcGVgLFxuICAgICAgICBsb2NcbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IGNhbGxQYXJ0cyA9IHRoaXMuZXhwci5jYWxsUGFydHMoYmxvY2ssIHJlc29sdXRpb24ucmVzb2x1dGlvbik7XG5cbiAgICByZXR1cm4gdGhpcy5ibG9jay5idWlsZGVyLmJsb2NrU3RhdGVtZW50KFxuICAgICAgYXNzaWduKFxuICAgICAgICB7XG4gICAgICAgICAgc3ltYm9sczogdGhpcy5ibG9jay50YWJsZSxcbiAgICAgICAgICBwcm9ncmFtOiB0aGlzLkJsb2NrKHByb2dyYW0pLFxuICAgICAgICAgIGludmVyc2U6IGludmVyc2UgPyB0aGlzLkJsb2NrKGludmVyc2UpIDogbnVsbCxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsbFBhcnRzXG4gICAgICApLFxuICAgICAgbG9jXG4gICAgKTtcbiAgfVxuXG4gIEJsb2NrKHsgYm9keSwgbG9jLCBibG9ja1BhcmFtcyB9OiBBU1R2MS5CbG9jayk6IEFTVHYyLkJsb2NrIHtcbiAgICBsZXQgY2hpbGQgPSB0aGlzLmJsb2NrLmNoaWxkKGJsb2NrUGFyYW1zKTtcbiAgICBsZXQgbm9ybWFsaXplciA9IG5ldyBTdGF0ZW1lbnROb3JtYWxpemVyKGNoaWxkKTtcbiAgICByZXR1cm4gbmV3IEJsb2NrQ2hpbGRyZW4oXG4gICAgICB0aGlzLmJsb2NrLmxvYyhsb2MpLFxuICAgICAgYm9keS5tYXAoKGIpID0+IG5vcm1hbGl6ZXIubm9ybWFsaXplKGIpKSxcbiAgICAgIHRoaXMuYmxvY2tcbiAgICApLmFzc2VydEJsb2NrKGNoaWxkLnRhYmxlKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IGV4cHIoKTogRXhwcmVzc2lvbk5vcm1hbGl6ZXIge1xuICAgIHJldHVybiBuZXcgRXhwcmVzc2lvbk5vcm1hbGl6ZXIodGhpcy5ibG9jayk7XG4gIH1cbn1cblxuY2xhc3MgRWxlbWVudE5vcm1hbGl6ZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGN0eDogQmxvY2tDb250ZXh0KSB7fVxuXG4gIC8qKlxuICAgKiBOb3JtYWxpemVzIGFuIEFTVHYxLkVsZW1lbnROb2RlIHRvOlxuICAgKlxuICAgKiAtIEFTVHYyLk5hbWVkQmxvY2sgaWYgdGhlIHRhZyBuYW1lIGJlZ2lucyB3aXRoIGA6YFxuICAgKiAtIEFTVHYyLkNvbXBvbmVudCBpZiB0aGUgdGFnIG5hbWUgbWF0Y2hlcyB0aGUgY29tcG9uZW50IGhldXJpc3RpY3NcbiAgICogLSBBU1R2Mi5TaW1wbGVFbGVtZW50IGlmIHRoZSB0YWcgbmFtZSBkb2Vzbid0IG1hdGNoIHRoZSBjb21wb25lbnQgaGV1cmlzdGljc1xuICAgKlxuICAgKiBBIHRhZyBuYW1lIHJlcHJlc2VudHMgYSBjb21wb25lbnQgaWY6XG4gICAqXG4gICAqIC0gaXQgYmVnaW5zIHdpdGggYEBgXG4gICAqIC0gaXQgaXMgZXhhY3RseSBgdGhpc2Agb3IgYmVnaW5zIHdpdGggYHRoaXMuYFxuICAgKiAtIHRoZSBwYXJ0IGJlZm9yZSB0aGUgZmlyc3QgYC5gIGlzIGEgcmVmZXJlbmNlIHRvIGFuIGluLXNjb3BlIHZhcmlhYmxlIGJpbmRpbmdcbiAgICogLSBpdCBiZWdpbnMgd2l0aCBhbiB1cHBlcmNhc2UgY2hhcmFjdGVyXG4gICAqL1xuICBFbGVtZW50Tm9kZShlbGVtZW50OiBBU1R2MS5FbGVtZW50Tm9kZSk6IEFTVHYyLkVsZW1lbnROb2RlIHtcbiAgICBsZXQgeyB0YWcsIHNlbGZDbG9zaW5nLCBjb21tZW50cyB9ID0gZWxlbWVudDtcbiAgICBsZXQgbG9jID0gdGhpcy5jdHgubG9jKGVsZW1lbnQubG9jKTtcblxuICAgIGxldCBbdGFnSGVhZCwgLi4ucmVzdF0gPSB0YWcuc3BsaXQoJy4nKTtcblxuICAgIC8vIHRoZSBoZWFkLCBhdHRyaWJ1dGVzIGFuZCBtb2RpZmllcnMgYXJlIGluIHRoZSBjdXJyZW50IHNjb3BlXG4gICAgbGV0IHBhdGggPSB0aGlzLmNsYXNzaWZ5VGFnKHRhZ0hlYWQsIHJlc3QsIGVsZW1lbnQubG9jKTtcblxuICAgIGxldCBhdHRycyA9IGVsZW1lbnQuYXR0cmlidXRlcy5maWx0ZXIoKGEpID0+IGEubmFtZVswXSAhPT0gJ0AnKS5tYXAoKGEpID0+IHRoaXMuYXR0cihhKSk7XG4gICAgbGV0IGFyZ3MgPSBlbGVtZW50LmF0dHJpYnV0ZXMuZmlsdGVyKChhKSA9PiBhLm5hbWVbMF0gPT09ICdAJykubWFwKChhKSA9PiB0aGlzLmFyZyhhKSk7XG5cbiAgICBsZXQgbW9kaWZpZXJzID0gZWxlbWVudC5tb2RpZmllcnMubWFwKChtKSA9PiB0aGlzLm1vZGlmaWVyKG0pKTtcblxuICAgIC8vIHRoZSBlbGVtZW50J3MgYmxvY2sgcGFyYW1zIGFyZSBpbiBzY29wZSBmb3IgdGhlIGNoaWxkcmVuXG4gICAgbGV0IGNoaWxkID0gdGhpcy5jdHguY2hpbGQoZWxlbWVudC5ibG9ja1BhcmFtcyk7XG4gICAgbGV0IG5vcm1hbGl6ZXIgPSBuZXcgU3RhdGVtZW50Tm9ybWFsaXplcihjaGlsZCk7XG5cbiAgICBsZXQgY2hpbGROb2RlcyA9IGVsZW1lbnQuY2hpbGRyZW4ubWFwKChzKSA9PiBub3JtYWxpemVyLm5vcm1hbGl6ZShzKSk7XG5cbiAgICBsZXQgZWwgPSB0aGlzLmN0eC5idWlsZGVyLmVsZW1lbnQoe1xuICAgICAgc2VsZkNsb3NpbmcsXG4gICAgICBhdHRycyxcbiAgICAgIGNvbXBvbmVudEFyZ3M6IGFyZ3MsXG4gICAgICBtb2RpZmllcnMsXG4gICAgICBjb21tZW50czogY29tbWVudHMubWFwKChjKSA9PiBuZXcgU3RhdGVtZW50Tm9ybWFsaXplcih0aGlzLmN0eCkuTXVzdGFjaGVDb21tZW50U3RhdGVtZW50KGMpKSxcbiAgICB9KTtcblxuICAgIGxldCBjaGlsZHJlbiA9IG5ldyBFbGVtZW50Q2hpbGRyZW4oZWwsIGxvYywgY2hpbGROb2RlcywgdGhpcy5jdHgpO1xuXG4gICAgbGV0IG9mZnNldHMgPSB0aGlzLmN0eC5sb2MoZWxlbWVudC5sb2MpO1xuICAgIGxldCB0YWdPZmZzZXRzID0gb2Zmc2V0cy5zbGljZVN0YXJ0Q2hhcnMoeyBjaGFyczogdGFnLmxlbmd0aCwgc2tpcFN0YXJ0OiAxIH0pO1xuXG4gICAgaWYgKHBhdGggPT09ICdFbGVtZW50SGVhZCcpIHtcbiAgICAgIGlmICh0YWdbMF0gPT09ICc6Jykge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW4uYXNzZXJ0TmFtZWRCbG9jayhcbiAgICAgICAgICB0YWdPZmZzZXRzLnNsaWNlKHsgc2tpcFN0YXJ0OiAxIH0pLnRvU2xpY2UodGFnLnNsaWNlKDEpKSxcbiAgICAgICAgICBjaGlsZC50YWJsZVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuLmFzc2VydEVsZW1lbnQodGFnT2Zmc2V0cy50b1NsaWNlKHRhZyksIGVsZW1lbnQuYmxvY2tQYXJhbXMubGVuZ3RoID4gMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQuc2VsZkNsb3NpbmcpIHtcbiAgICAgIHJldHVybiBlbC5zZWxmQ2xvc2luZ0NvbXBvbmVudChwYXRoLCBsb2MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgYmxvY2tzID0gY2hpbGRyZW4uYXNzZXJ0Q29tcG9uZW50KHRhZywgY2hpbGQudGFibGUsIGVsZW1lbnQuYmxvY2tQYXJhbXMubGVuZ3RoID4gMCk7XG4gICAgICByZXR1cm4gZWwuY29tcG9uZW50V2l0aE5hbWVkQmxvY2tzKHBhdGgsIGJsb2NrcywgbG9jKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG1vZGlmaWVyKG06IEFTVHYxLkVsZW1lbnRNb2RpZmllclN0YXRlbWVudCk6IEFTVHYyLkVsZW1lbnRNb2RpZmllciB7XG4gICAgbGV0IHJlc29sdXRpb24gPSB0aGlzLmN0eC5yZXNvbHV0aW9uRm9yKG0sIE1vZGlmaWVyU3ludGF4Q29udGV4dCk7XG5cbiAgICBpZiAocmVzb2x1dGlvbi5yZXNvbHV0aW9uID09PSAnZXJyb3InKSB7XG4gICAgICB0aHJvdyBnZW5lcmF0ZVN5bnRheEVycm9yKFxuICAgICAgICBgWW91IGF0dGVtcHRlZCB0byBpbnZva2UgYSBwYXRoIChcXGB7eyMke3Jlc29sdXRpb24ucGF0aH19fVxcYCkgYnV0ICR7cmVzb2x1dGlvbi5oZWFkfSB3YXMgbm90IGluIHNjb3BlYCxcbiAgICAgICAgbS5sb2NcbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IGNhbGxQYXJ0cyA9IHRoaXMuZXhwci5jYWxsUGFydHMobSwgcmVzb2x1dGlvbi5yZXNvbHV0aW9uKTtcbiAgICByZXR1cm4gdGhpcy5jdHguYnVpbGRlci5tb2RpZmllcihjYWxsUGFydHMsIHRoaXMuY3R4LmxvYyhtLmxvYykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGhhbmRsZXMgYXR0cmlidXRlIHZhbHVlcyB0aGF0IGFyZSBjdXJsaWVzLCBhcyB3ZWxsIGFzIGN1cmxpZXMgbmVzdGVkIGluc2lkZSBvZlxuICAgKiBpbnRlcnBvbGF0aW9uczpcbiAgICpcbiAgICogYGBgaGJzXG4gICAqIDxhIGhyZWY9e3t1cmx9fSAvPlxuICAgKiA8YSBocmVmPVwie3t1cmx9fS5odG1sXCIgLz5cbiAgICogYGBgXG4gICAqL1xuICBwcml2YXRlIG11c3RhY2hlQXR0cihtdXN0YWNoZTogQVNUdjEuTXVzdGFjaGVTdGF0ZW1lbnQpOiBBU1R2Mi5FeHByZXNzaW9uTm9kZSB7XG4gICAgLy8gTm9ybWFsaXplIHRoZSBjYWxsIHBhcnRzIGluIEF0dHJWYWx1ZVN5bnRheENvbnRleHRcbiAgICBsZXQgc2V4cCA9IHRoaXMuY3R4LmJ1aWxkZXIuc2V4cChcbiAgICAgIHRoaXMuZXhwci5jYWxsUGFydHMobXVzdGFjaGUsIEF0dHJWYWx1ZVN5bnRheENvbnRleHQobXVzdGFjaGUpKSxcbiAgICAgIHRoaXMuY3R4LmxvYyhtdXN0YWNoZS5sb2MpXG4gICAgKTtcblxuICAgIC8vIElmIHRoZXJlIGFyZSBubyBwYXJhbXMgb3IgaGFzaCwganVzdCByZXR1cm4gdGhlIGZ1bmN0aW9uIHBhcnQgYXMgaXRzIG93biBleHByZXNzaW9uXG4gICAgaWYgKHNleHAuYXJncy5pc0VtcHR5KCkpIHtcbiAgICAgIHJldHVybiBzZXhwLmNhbGxlZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHNleHA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIGF0dHJQYXJ0IGlzIHRoZSBuYXJyb3dlZCBkb3duIGxpc3Qgb2YgdmFsaWQgYXR0cmlidXRlIHZhbHVlcyB0aGF0IGFyZSBhbHNvXG4gICAqIGFsbG93ZWQgYXMgYSBjb25jYXQgcGFydCAoeW91IGNhbid0IG5lc3QgY29uY2F0cykuXG4gICAqL1xuICBwcml2YXRlIGF0dHJQYXJ0KFxuICAgIHBhcnQ6IEFTVHYxLk11c3RhY2hlU3RhdGVtZW50IHwgQVNUdjEuVGV4dE5vZGVcbiAgKTogeyBleHByOiBBU1R2Mi5FeHByZXNzaW9uTm9kZTsgdHJ1c3Rpbmc6IGJvb2xlYW4gfSB7XG4gICAgc3dpdGNoIChwYXJ0LnR5cGUpIHtcbiAgICAgIGNhc2UgJ011c3RhY2hlU3RhdGVtZW50JzpcbiAgICAgICAgcmV0dXJuIHsgZXhwcjogdGhpcy5tdXN0YWNoZUF0dHIocGFydCksIHRydXN0aW5nOiAhcGFydC5lc2NhcGVkIH07XG4gICAgICBjYXNlICdUZXh0Tm9kZSc6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXhwcjogdGhpcy5jdHguYnVpbGRlci5saXRlcmFsKHBhcnQuY2hhcnMsIHRoaXMuY3R4LmxvYyhwYXJ0LmxvYykpLFxuICAgICAgICAgIHRydXN0aW5nOiB0cnVlLFxuICAgICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXR0clZhbHVlKFxuICAgIHBhcnQ6IEFTVHYxLk11c3RhY2hlU3RhdGVtZW50IHwgQVNUdjEuVGV4dE5vZGUgfCBBU1R2MS5Db25jYXRTdGF0ZW1lbnRcbiAgKTogeyBleHByOiBBU1R2Mi5FeHByZXNzaW9uTm9kZTsgdHJ1c3Rpbmc6IGJvb2xlYW4gfSB7XG4gICAgc3dpdGNoIChwYXJ0LnR5cGUpIHtcbiAgICAgIGNhc2UgJ0NvbmNhdFN0YXRlbWVudCc6IHtcbiAgICAgICAgbGV0IHBhcnRzID0gcGFydC5wYXJ0cy5tYXAoKHApID0+IHRoaXMuYXR0clBhcnQocCkuZXhwcik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXhwcjogdGhpcy5jdHguYnVpbGRlci5pbnRlcnBvbGF0ZShwYXJ0cywgdGhpcy5jdHgubG9jKHBhcnQubG9jKSksXG4gICAgICAgICAgdHJ1c3Rpbmc6IGZhbHNlLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0clBhcnQocGFydCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhdHRyKG06IEFTVHYxLkF0dHJOb2RlKTogQVNUdjIuSHRtbE9yU3BsYXRBdHRyIHtcbiAgICBhc3NlcnQobS5uYW1lWzBdICE9PSAnQCcsICdBbiBhdHRyIG5hbWUgbXVzdCBub3Qgc3RhcnQgd2l0aCBgQGAnKTtcblxuICAgIGlmIChtLm5hbWUgPT09ICcuLi5hdHRyaWJ1dGVzJykge1xuICAgICAgcmV0dXJuIHRoaXMuY3R4LmJ1aWxkZXIuc3BsYXRBdHRyKHRoaXMuY3R4LnRhYmxlLmFsbG9jYXRlQmxvY2soJ2F0dHJzJyksIHRoaXMuY3R4LmxvYyhtLmxvYykpO1xuICAgIH1cblxuICAgIGxldCBvZmZzZXRzID0gdGhpcy5jdHgubG9jKG0ubG9jKTtcbiAgICBsZXQgbmFtZVNsaWNlID0gb2Zmc2V0cy5zbGljZVN0YXJ0Q2hhcnMoeyBjaGFyczogbS5uYW1lLmxlbmd0aCB9KS50b1NsaWNlKG0ubmFtZSk7XG5cbiAgICBsZXQgdmFsdWUgPSB0aGlzLmF0dHJWYWx1ZShtLnZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5jdHguYnVpbGRlci5hdHRyKFxuICAgICAgeyBuYW1lOiBuYW1lU2xpY2UsIHZhbHVlOiB2YWx1ZS5leHByLCB0cnVzdGluZzogdmFsdWUudHJ1c3RpbmcgfSxcbiAgICAgIG9mZnNldHNcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBhcmcoYXJnOiBBU1R2MS5BdHRyTm9kZSk6IEFTVHYyLkNvbXBvbmVudEFyZyB7XG4gICAgYXNzZXJ0KGFyZy5uYW1lWzBdID09PSAnQCcsICdBbiBhcmcgbmFtZSBtdXN0IHN0YXJ0IHdpdGggYEBgJyk7XG5cbiAgICBsZXQgb2Zmc2V0cyA9IHRoaXMuY3R4LmxvYyhhcmcubG9jKTtcbiAgICBsZXQgbmFtZVNsaWNlID0gb2Zmc2V0cy5zbGljZVN0YXJ0Q2hhcnMoeyBjaGFyczogYXJnLm5hbWUubGVuZ3RoIH0pLnRvU2xpY2UoYXJnLm5hbWUpO1xuXG4gICAgbGV0IHZhbHVlID0gdGhpcy5hdHRyVmFsdWUoYXJnLnZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5jdHguYnVpbGRlci5hcmcoXG4gICAgICB7IG5hbWU6IG5hbWVTbGljZSwgdmFsdWU6IHZhbHVlLmV4cHIsIHRydXN0aW5nOiB2YWx1ZS50cnVzdGluZyB9LFxuICAgICAgb2Zmc2V0c1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBjbGFzc2lmaWVzIHRoZSBoZWFkIG9mIGFuIEFTVHYxLkVsZW1lbnQgaW50byBhbiBBU1R2Mi5QYXRoSGVhZCAoaWYgdGhlXG4gICAqIGVsZW1lbnQgaXMgYSBjb21wb25lbnQpIG9yIGAnRWxlbWVudEhlYWQnYCAoaWYgdGhlIGVsZW1lbnQgaXMgYSBzaW1wbGUgZWxlbWVudCkuXG4gICAqXG4gICAqIFJ1bGVzOlxuICAgKlxuICAgKiAxLiBJZiB0aGUgdmFyaWFibGUgaXMgYW4gYEBhcmdgLCByZXR1cm4gYW4gYEF0SGVhZGBcbiAgICogMi4gSWYgdGhlIHZhcmlhYmxlIGlzIGB0aGlzYCwgcmV0dXJuIGEgYFRoaXNIZWFkYFxuICAgKiAzLiBJZiB0aGUgdmFyaWFibGUgaXMgaW4gdGhlIGN1cnJlbnQgc2NvcGU6XG4gICAqICAgYS4gSWYgdGhlIHNjb3BlIGlzIHRoZSByb290IHNjb3BlLCB0aGVuIHJldHVybiBhIEZyZWUgYExvY2FsVmFySGVhZGBcbiAgICogICBiLiBFbHNlLCByZXR1cm4gYSBzdGFuZGFyZCBgTG9jYWxWYXJIZWFkYFxuICAgKiA0LiBJZiB0aGUgdGFnIG5hbWUgaXMgYSBwYXRoIGFuZCB0aGUgdmFyaWFibGUgaXMgbm90IGluIHRoZSBjdXJyZW50IHNjb3BlLCBTeW50YXggRXJyb3JcbiAgICogNS4gSWYgdGhlIHZhcmlhYmxlIGlzIHVwcGVyY2FzZSByZXR1cm4gYSBGcmVlVmFyKFJlc29sdmVBc0NvbXBvbmVudEhlYWQpXG4gICAqIDYuIE90aGVyd2lzZSwgcmV0dXJuIGAnRWxlbWVudEhlYWQnYFxuICAgKi9cbiAgcHJpdmF0ZSBjbGFzc2lmeVRhZyhcbiAgICB2YXJpYWJsZTogc3RyaW5nLFxuICAgIHRhaWw6IHN0cmluZ1tdLFxuICAgIGxvYzogU291cmNlU3BhblxuICApOiBBU1R2Mi5FeHByZXNzaW9uTm9kZSB8ICdFbGVtZW50SGVhZCcge1xuICAgIGxldCB1cHBlcmNhc2UgPSBpc1VwcGVyQ2FzZSh2YXJpYWJsZSk7XG4gICAgbGV0IGluU2NvcGUgPSB0aGlzLmN0eC5oYXNCaW5kaW5nKHZhcmlhYmxlKTtcblxuICAgIC8vIFNpbmNlIHRoZSBwYXJzZXIgaGFuZGVkIHVzIHRoZSBIVE1MIGVsZW1lbnQgbmFtZSBhcyBhIHN0cmluZywgd2UgbmVlZFxuICAgIC8vIHRvIGNvbnZlcnQgaXQgaW50byBhbiBBU1R2MSBwYXRoIHNvIGl0IGNhbiBiZSBwcm9jZXNzZWQgdXNpbmcgdGhlXG4gICAgLy8gZXhwcmVzc2lvbiBub3JtYWxpemVyLlxuICAgIGxldCBpc0NvbXBvbmVudCA9IHZhcmlhYmxlWzBdID09PSAnQCcgfHwgdmFyaWFibGUgPT09ICd0aGlzJyB8fCBpblNjb3BlIHx8IHVwcGVyY2FzZTtcblxuICAgIGxldCB2YXJpYWJsZUxvYyA9IGxvYy5zbGljZVN0YXJ0Q2hhcnMoeyBza2lwU3RhcnQ6IDEsIGNoYXJzOiB2YXJpYWJsZS5sZW5ndGggfSk7XG5cbiAgICBsZXQgdGFpbExlbmd0aCA9IHRhaWwucmVkdWNlKChhY2N1bSwgcGFydCkgPT4gYWNjdW0gKyAxICsgcGFydC5sZW5ndGgsIDApO1xuICAgIGxldCBwYXRoRW5kID0gdmFyaWFibGVMb2MuZ2V0RW5kKCkubW92ZSh0YWlsTGVuZ3RoKTtcbiAgICBsZXQgcGF0aExvYyA9IHZhcmlhYmxlTG9jLndpdGhFbmQocGF0aEVuZCk7XG5cbiAgICBpZiAoaXNDb21wb25lbnQpIHtcbiAgICAgIC8vIElmIHRoZSBjb21wb25lbnQgbmFtZSBpcyB1cHBlcmNhc2UsIHRoZSB2YXJpYWJsZSBpcyBub3QgaW4gc2NvcGUsXG4gICAgICAvLyBhbmQgdGhlIHRlbXBsYXRlIGlzIG5vdCBpbiBzdHJpY3QgbW9kZSwgcnVuIHRoZSBvcHRpb25hbFxuICAgICAgLy8gYGN1c3RvbWl6ZUNvbXBvbmVudE5hbWVgIGZ1bmN0aW9uIHByb3ZpZGVkIGFzIGFuIG9wdGlvbiB0byB0aGVcbiAgICAgIC8vIHByZWNvbXBpbGVyLlxuICAgICAgaWYgKCF0aGlzLmN0eC5zdHJpY3QgJiYgdXBwZXJjYXNlICYmICFpblNjb3BlKSB7XG4gICAgICAgIHZhcmlhYmxlID0gdGhpcy5jdHguY3VzdG9taXplQ29tcG9uZW50TmFtZSh2YXJpYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGxldCBwYXRoID0gYi5wYXRoKHtcbiAgICAgICAgaGVhZDogYi5oZWFkKHZhcmlhYmxlLCB2YXJpYWJsZUxvYyksXG4gICAgICAgIHRhaWwsXG4gICAgICAgIGxvYzogcGF0aExvYyxcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgcmVzb2x1dGlvbiA9IHRoaXMuY3R4LnJlc29sdXRpb25Gb3IocGF0aCwgQ29tcG9uZW50U3ludGF4Q29udGV4dCk7XG5cbiAgICAgIGlmIChyZXNvbHV0aW9uLnJlc29sdXRpb24gPT09ICdlcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZ2VuZXJhdGVTeW50YXhFcnJvcihcbiAgICAgICAgICBgWW91IGF0dGVtcHRlZCB0byBpbnZva2UgYSBwYXRoIChcXGA8JHtyZXNvbHV0aW9uLnBhdGh9PlxcYCkgYnV0ICR7cmVzb2x1dGlvbi5oZWFkfSB3YXMgbm90IGluIHNjb3BlYCxcbiAgICAgICAgICBsb2NcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBFeHByZXNzaW9uTm9ybWFsaXplcih0aGlzLmN0eCkubm9ybWFsaXplKHBhdGgsIHJlc29sdXRpb24ucmVzb2x1dGlvbik7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHRhZyBuYW1lIHdhc24ndCBhIHZhbGlkIGNvbXBvbmVudCBidXQgY29udGFpbmVkIGEgYC5gLCBpdCdzXG4gICAgLy8gYSBzeW50YXggZXJyb3IuXG4gICAgaWYgKHRhaWwubGVuZ3RoID4gMCkge1xuICAgICAgdGhyb3cgZ2VuZXJhdGVTeW50YXhFcnJvcihcbiAgICAgICAgYFlvdSB1c2VkICR7dmFyaWFibGV9LiR7dGFpbC5qb2luKCcuJyl9IGFzIGEgdGFnIG5hbWUsIGJ1dCAke3ZhcmlhYmxlfSBpcyBub3QgaW4gc2NvcGVgLFxuICAgICAgICBsb2NcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuICdFbGVtZW50SGVhZCc7XG4gIH1cblxuICBwcml2YXRlIGdldCBleHByKCk6IEV4cHJlc3Npb25Ob3JtYWxpemVyIHtcbiAgICByZXR1cm4gbmV3IEV4cHJlc3Npb25Ob3JtYWxpemVyKHRoaXMuY3R4KTtcbiAgfVxufVxuXG5jbGFzcyBDaGlsZHJlbiB7XG4gIHJlYWRvbmx5IG5hbWVkQmxvY2tzOiBBU1R2Mi5OYW1lZEJsb2NrW107XG4gIHJlYWRvbmx5IGhhc1NlbWFudGljQ29udGVudDogYm9vbGVhbjtcbiAgcmVhZG9ubHkgbm9uQmxvY2tDaGlsZHJlbjogQVNUdjIuQ29udGVudE5vZGVbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSBsb2M6IFNvdXJjZVNwYW4sXG4gICAgcmVhZG9ubHkgY2hpbGRyZW46IChBU1R2Mi5Db250ZW50Tm9kZSB8IEFTVHYyLk5hbWVkQmxvY2spW10sXG4gICAgcmVhZG9ubHkgYmxvY2s6IEJsb2NrQ29udGV4dFxuICApIHtcbiAgICB0aGlzLm5hbWVkQmxvY2tzID0gY2hpbGRyZW4uZmlsdGVyKChjKTogYyBpcyBBU1R2Mi5OYW1lZEJsb2NrID0+IGMgaW5zdGFuY2VvZiBBU1R2Mi5OYW1lZEJsb2NrKTtcbiAgICB0aGlzLmhhc1NlbWFudGljQ29udGVudCA9IEJvb2xlYW4oXG4gICAgICBjaGlsZHJlbi5maWx0ZXIoKGMpOiBjIGlzIEFTVHYyLkNvbnRlbnROb2RlID0+IHtcbiAgICAgICAgaWYgKGMgaW5zdGFuY2VvZiBBU1R2Mi5OYW1lZEJsb2NrKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoYy50eXBlKSB7XG4gICAgICAgICAgY2FzZSAnR2xpbW1lckNvbW1lbnQnOlxuICAgICAgICAgIGNhc2UgJ0h0bWxDb21tZW50JzpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjYXNlICdIdG1sVGV4dCc6XG4gICAgICAgICAgICByZXR1cm4gIS9eXFxzKiQvLmV4ZWMoYy5jaGFycyk7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KS5sZW5ndGhcbiAgICApO1xuICAgIHRoaXMubm9uQmxvY2tDaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihcbiAgICAgIChjKTogYyBpcyBBU1R2Mi5Db250ZW50Tm9kZSA9PiAhKGMgaW5zdGFuY2VvZiBBU1R2Mi5OYW1lZEJsb2NrKVxuICAgICk7XG4gIH1cbn1cblxuY2xhc3MgVGVtcGxhdGVDaGlsZHJlbiBleHRlbmRzIENoaWxkcmVuIHtcbiAgYXNzZXJ0VGVtcGxhdGUodGFibGU6IFByb2dyYW1TeW1ib2xUYWJsZSk6IEFTVHYyLlRlbXBsYXRlIHtcbiAgICBpZiAoaXNQcmVzZW50KHRoaXMubmFtZWRCbG9ja3MpKSB7XG4gICAgICB0aHJvdyBnZW5lcmF0ZVN5bnRheEVycm9yKGBVbmV4cGVjdGVkIG5hbWVkIGJsb2NrIGF0IHRoZSB0b3AtbGV2ZWwgb2YgYSB0ZW1wbGF0ZWAsIHRoaXMubG9jKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5ibG9jay5idWlsZGVyLnRlbXBsYXRlKHRhYmxlLCB0aGlzLm5vbkJsb2NrQ2hpbGRyZW4sIHRoaXMuYmxvY2subG9jKHRoaXMubG9jKSk7XG4gIH1cbn1cblxuY2xhc3MgQmxvY2tDaGlsZHJlbiBleHRlbmRzIENoaWxkcmVuIHtcbiAgYXNzZXJ0QmxvY2sodGFibGU6IEJsb2NrU3ltYm9sVGFibGUpOiBBU1R2Mi5CbG9jayB7XG4gICAgaWYgKGlzUHJlc2VudCh0aGlzLm5hbWVkQmxvY2tzKSkge1xuICAgICAgdGhyb3cgZ2VuZXJhdGVTeW50YXhFcnJvcihgVW5leHBlY3RlZCBuYW1lZCBibG9jayBuZXN0ZWQgaW4gYSBub3JtYWwgYmxvY2tgLCB0aGlzLmxvYyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYmxvY2suYnVpbGRlci5ibG9jayh0YWJsZSwgdGhpcy5ub25CbG9ja0NoaWxkcmVuLCB0aGlzLmxvYyk7XG4gIH1cbn1cblxuY2xhc3MgRWxlbWVudENoaWxkcmVuIGV4dGVuZHMgQ2hpbGRyZW4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsOiBCdWlsZEVsZW1lbnQsXG4gICAgbG9jOiBTb3VyY2VTcGFuLFxuICAgIGNoaWxkcmVuOiAoQVNUdjIuQ29udGVudE5vZGUgfCBBU1R2Mi5OYW1lZEJsb2NrKVtdLFxuICAgIGJsb2NrOiBCbG9ja0NvbnRleHRcbiAgKSB7XG4gICAgc3VwZXIobG9jLCBjaGlsZHJlbiwgYmxvY2spO1xuICB9XG5cbiAgYXNzZXJ0TmFtZWRCbG9jayhuYW1lOiBTb3VyY2VTbGljZSwgdGFibGU6IEJsb2NrU3ltYm9sVGFibGUpOiBBU1R2Mi5OYW1lZEJsb2NrIHtcbiAgICBpZiAodGhpcy5lbC5iYXNlLnNlbGZDbG9zaW5nKSB7XG4gICAgICB0aHJvdyBnZW5lcmF0ZVN5bnRheEVycm9yKFxuICAgICAgICBgPDoke25hbWV9PiBpcyBub3QgYSB2YWxpZCBuYW1lZCBibG9jazogbmFtZWQgYmxvY2tzIGNhbm5vdCBiZSBzZWxmLWNsb3NpbmdgLFxuICAgICAgICB0aGlzLmxvY1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoaXNQcmVzZW50KHRoaXMubmFtZWRCbG9ja3MpKSB7XG4gICAgICB0aHJvdyBnZW5lcmF0ZVN5bnRheEVycm9yKFxuICAgICAgICBgVW5leHBlY3RlZCBuYW1lZCBibG9jayBpbnNpZGUgPDoke25hbWV9PiBuYW1lZCBibG9jazogbmFtZWQgYmxvY2tzIGNhbm5vdCBjb250YWluIG5lc3RlZCBuYW1lZCBibG9ja3NgLFxuICAgICAgICB0aGlzLmxvY1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzTG93ZXJDYXNlKG5hbWUuY2hhcnMpKSB7XG4gICAgICB0aHJvdyBnZW5lcmF0ZVN5bnRheEVycm9yKFxuICAgICAgICBgPDoke25hbWV9PiBpcyBub3QgYSB2YWxpZCBuYW1lZCBibG9jazogXFxgJHtuYW1lfVxcYCBpcyB1cHBlcmNhc2UsIGFuZCBuYW1lZCBibG9ja3MgbXVzdCBiZSBsb3dlcmNhc2VgLFxuICAgICAgICB0aGlzLmxvY1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBsZXQgb2Zmc2V0cyA9IFNwYW5MaXN0LnJhbmdlKHRoaXMubm9uQmxvY2tDaGlsZHJlbiwgdGhpcy5sb2MpO1xuXG4gICAgcmV0dXJuIHRoaXMuYmxvY2suYnVpbGRlci5uYW1lZEJsb2NrKFxuICAgICAgbmFtZSxcbiAgICAgIHRoaXMuYmxvY2suYnVpbGRlci5ibG9jayh0YWJsZSwgdGhpcy5ub25CbG9ja0NoaWxkcmVuLCBvZmZzZXRzKSxcbiAgICAgIHRoaXMubG9jXG4gICAgKTtcbiAgfVxuXG4gIGFzc2VydEVsZW1lbnQobmFtZTogU291cmNlU2xpY2UsIGhhc0Jsb2NrUGFyYW1zOiBib29sZWFuKTogQVNUdjIuU2ltcGxlRWxlbWVudCB7XG4gICAgaWYgKGhhc0Jsb2NrUGFyYW1zKSB7XG4gICAgICB0aHJvdyBnZW5lcmF0ZVN5bnRheEVycm9yKFxuICAgICAgICBgVW5leHBlY3RlZCBibG9jayBwYXJhbXMgaW4gPCR7bmFtZX0+OiBzaW1wbGUgZWxlbWVudHMgY2Fubm90IGhhdmUgYmxvY2sgcGFyYW1zYCxcbiAgICAgICAgdGhpcy5sb2NcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGlzUHJlc2VudCh0aGlzLm5hbWVkQmxvY2tzKSkge1xuICAgICAgbGV0IG5hbWVzID0gdGhpcy5uYW1lZEJsb2Nrcy5tYXAoKGIpID0+IGIubmFtZSk7XG5cbiAgICAgIGlmIChuYW1lcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdGhyb3cgZ2VuZXJhdGVTeW50YXhFcnJvcihcbiAgICAgICAgICBgU3ludGF4IEVycm9yOiBVbmV4cGVjdGVkIG5hbWVkIGJsb2NrIDw6Zm9vPiBpbnNpZGUgPCR7bmFtZX0+IEhUTUwgZWxlbWVudGAsXG4gICAgICAgICAgdGhpcy5sb2NcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBwcmludGVkTmFtZXMgPSBuYW1lcy5tYXAoKG4pID0+IGA8OiR7bi5jaGFyc30+YCkuam9pbignLCAnKTtcbiAgICAgICAgdGhyb3cgZ2VuZXJhdGVTeW50YXhFcnJvcihcbiAgICAgICAgICBgU3ludGF4IEVycm9yOiBVbmV4cGVjdGVkIG5hbWVkIGJsb2NrcyBpbnNpZGUgPCR7bmFtZX0+IEhUTUwgZWxlbWVudCAoJHtwcmludGVkTmFtZXN9KWAsXG4gICAgICAgICAgdGhpcy5sb2NcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lbC5zaW1wbGUobmFtZSwgdGhpcy5ub25CbG9ja0NoaWxkcmVuLCB0aGlzLmxvYyk7XG4gIH1cblxuICBhc3NlcnRDb21wb25lbnQoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHRhYmxlOiBCbG9ja1N5bWJvbFRhYmxlLFxuICAgIGhhc0Jsb2NrUGFyYW1zOiBib29sZWFuXG4gICk6IFByZXNlbnRBcnJheTxBU1R2Mi5OYW1lZEJsb2NrPiB7XG4gICAgaWYgKGlzUHJlc2VudCh0aGlzLm5hbWVkQmxvY2tzKSAmJiB0aGlzLmhhc1NlbWFudGljQ29udGVudCkge1xuICAgICAgdGhyb3cgZ2VuZXJhdGVTeW50YXhFcnJvcihcbiAgICAgICAgYFVuZXhwZWN0ZWQgY29udGVudCBpbnNpZGUgPCR7bmFtZX0+IGNvbXBvbmVudCBpbnZvY2F0aW9uOiB3aGVuIHVzaW5nIG5hbWVkIGJsb2NrcywgdGhlIHRhZyBjYW5ub3QgY29udGFpbiBvdGhlciBjb250ZW50YCxcbiAgICAgICAgdGhpcy5sb2NcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGlzUHJlc2VudCh0aGlzLm5hbWVkQmxvY2tzKSkge1xuICAgICAgaWYgKGhhc0Jsb2NrUGFyYW1zKSB7XG4gICAgICAgIHRocm93IGdlbmVyYXRlU3ludGF4RXJyb3IoXG4gICAgICAgICAgYFVuZXhwZWN0ZWQgYmxvY2sgcGFyYW1zIGxpc3Qgb24gPCR7bmFtZX0+IGNvbXBvbmVudCBpbnZvY2F0aW9uOiB3aGVuIHBhc3NpbmcgbmFtZWQgYmxvY2tzLCB0aGUgaW52b2NhdGlvbiB0YWcgY2Fubm90IHRha2UgYmxvY2sgcGFyYW1zYCxcbiAgICAgICAgICB0aGlzLmxvY1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubmFtZWRCbG9ja3M7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHRoaXMuYmxvY2suYnVpbGRlci5uYW1lZEJsb2NrKFxuICAgICAgICAgIFNvdXJjZVNsaWNlLnN5bnRoZXRpYygnZGVmYXVsdCcpLFxuICAgICAgICAgIHRoaXMuYmxvY2suYnVpbGRlci5ibG9jayh0YWJsZSwgdGhpcy5ub25CbG9ja0NoaWxkcmVuLCB0aGlzLmxvYyksXG4gICAgICAgICAgdGhpcy5sb2NcbiAgICAgICAgKSxcbiAgICAgIF07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzVXBwZXJDYXNlKHRhZzogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiB0YWdbMF0gPT09IHRhZ1swXS50b1VwcGVyQ2FzZSgpICYmIHRhZ1swXSAhPT0gdGFnWzBdLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIGlzTG93ZXJDYXNlKHRhZzogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiB0YWdbMF0gPT09IHRhZ1swXS50b0xvd2VyQ2FzZSgpICYmIHRhZ1swXSAhPT0gdGFnWzBdLnRvVXBwZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIHByaW50UGF0aChub2RlOiBBU1R2MS5QYXRoRXhwcmVzc2lvbiB8IEFTVHYxLkNhbGxOb2RlKTogc3RyaW5nIHtcbiAgaWYgKG5vZGUudHlwZSAhPT0gJ1BhdGhFeHByZXNzaW9uJyAmJiBub2RlLnBhdGgudHlwZSA9PT0gJ1BhdGhFeHByZXNzaW9uJykge1xuICAgIHJldHVybiBwcmludFBhdGgobm9kZS5wYXRoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IFByaW50ZXIoeyBlbnRpdHlFbmNvZGluZzogJ3JhdycgfSkucHJpbnQobm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJpbnRIZWFkKG5vZGU6IEFTVHYxLlBhdGhFeHByZXNzaW9uIHwgQVNUdjEuQ2FsbE5vZGUpOiBzdHJpbmcge1xuICBpZiAobm9kZS50eXBlID09PSAnUGF0aEV4cHJlc3Npb24nKSB7XG4gICAgc3dpdGNoIChub2RlLmhlYWQudHlwZSkge1xuICAgICAgY2FzZSAnQXRIZWFkJzpcbiAgICAgIGNhc2UgJ1ZhckhlYWQnOlxuICAgICAgICByZXR1cm4gbm9kZS5oZWFkLm5hbWU7XG4gICAgICBjYXNlICdUaGlzSGVhZCc6XG4gICAgICAgIHJldHVybiAndGhpcyc7XG4gICAgfVxuICB9IGVsc2UgaWYgKG5vZGUucGF0aC50eXBlID09PSAnUGF0aEV4cHJlc3Npb24nKSB7XG4gICAgcmV0dXJuIHByaW50SGVhZChub2RlLnBhdGgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgUHJpbnRlcih7IGVudGl0eUVuY29kaW5nOiAncmF3JyB9KS5wcmludChub2RlKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==