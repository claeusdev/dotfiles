function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
};

var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
};

var _whens, _map, _whens_1;

import { assert, isPresent } from '@glimmer/util';
/**
 * This file implements the DSL used by span and offset in places where they need to exhaustively
 * consider all combinations of states (Handlebars offsets, character offsets and invisible/broken
 * offsets).
 *
 * It's probably overkill, but it makes the code that uses it clear. It could be refactored or
 * removed.
 */

export var MatchAny = 'MATCH_ANY';
export var IsInvisible = 'IS_INVISIBLE';

var WhenList = /*#__PURE__*/function () {
  function WhenList(whens) {
    _whens.set(this, void 0);

    __classPrivateFieldSet(this, _whens, whens);
  }

  var _proto = WhenList.prototype;

  _proto.first = function first(kind) {
    for (var _iterator = _createForOfIteratorHelperLoose(__classPrivateFieldGet(this, _whens)), _step; !(_step = _iterator()).done;) {
      var when = _step.value;
      var value = when.match(kind);

      if (isPresent(value)) {
        return value[0];
      }
    }

    return null;
  };

  return WhenList;
}();

_whens = new WeakMap();

var When = /*#__PURE__*/function () {
  function When() {
    _map.set(this, new Map());
  }

  var _proto2 = When.prototype;

  _proto2.get = function get(pattern, or) {
    var value = __classPrivateFieldGet(this, _map).get(pattern);

    if (value) {
      return value;
    }

    value = or();

    __classPrivateFieldGet(this, _map).set(pattern, value);

    return value;
  };

  _proto2.add = function add(pattern, out) {
    __classPrivateFieldGet(this, _map).set(pattern, out);
  };

  _proto2.match = function match(kind) {
    var pattern = patternFor(kind);
    var out = [];

    var exact = __classPrivateFieldGet(this, _map).get(pattern);

    var fallback = __classPrivateFieldGet(this, _map).get(MatchAny);

    if (exact) {
      out.push(exact);
    }

    if (fallback) {
      out.push(fallback);
    }

    return out;
  };

  return When;
}();

_map = new WeakMap();
export function match(callback) {
  return callback(new Matcher()).check();
}

var Matcher = /*#__PURE__*/function () {
  function Matcher() {
    _whens_1.set(this, new When());
  }
  /**
   * You didn't exhaustively match all possibilities.
   */


  var _proto3 = Matcher.prototype;

  _proto3.check = function check() {
    var _this = this;

    return function (left, right) {
      return _this.matchFor(left.kind, right.kind)(left, right);
    };
  };

  _proto3.matchFor = function matchFor(left, right) {
    var nesteds = __classPrivateFieldGet(this, _whens_1).match(left);

    false && assert(isPresent(nesteds), "no match defined for (" + left + ", " + right + ") and no AnyMatch defined either");
    var callback = new WhenList(nesteds).first(right);
    false && assert(callback !== null, "no match defined for (" + left + ", " + right + ") and no AnyMatch defined either");
    return callback;
  };

  _proto3.when = function when(left, right, // eslint-disable-next-line @typescript-eslint/no-explicit-any
  callback) {
    __classPrivateFieldGet(this, _whens_1).get(left, function () {
      return new When();
    }).add(right, callback);

    return this;
  };

  return Matcher;
}();

_whens_1 = new WeakMap();

function patternFor(kind) {
  switch (kind) {
    case "Broken"
    /* Broken */
    :
    case "InternalsSynthetic"
    /* InternalsSynthetic */
    :
    case "NonExistent"
    /* NonExistent */
    :
      return IsInvisible;

    default:
      return kind;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,