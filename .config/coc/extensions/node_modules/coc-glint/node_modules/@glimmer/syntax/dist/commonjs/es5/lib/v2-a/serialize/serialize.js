"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContentSerializer = exports.ExprSerializer = exports.RefSerializer = void 0;

var _slice = require("../../source/slice");

var RefSerializer = /*#__PURE__*/function () {
  function RefSerializer() {}

  var _proto = RefSerializer.prototype;

  _proto.arg = function arg(ref) {
    return {
      type: 'Arg',
      loc: ref.loc.serialize(),
      name: ref.name.serialize()
    };
  };

  _proto.free = function free(ref) {
    return {
      type: 'Free',
      loc: ref.loc.serialize(),
      resolution: ref.resolution.serialize(),
      name: ref.name
    };
  };

  _proto.local = function local(ref) {
    return {
      type: 'Local',
      loc: ref.loc.serialize(),
      name: ref.name
    };
  };

  _proto.self = function self(ref) {
    return {
      type: 'This',
      loc: ref.loc.serialize()
    };
  };

  return RefSerializer;
}();

exports.RefSerializer = RefSerializer;
var REF = new RefSerializer();

var ExprSerializer = /*#__PURE__*/function () {
  function ExprSerializer() {}

  var _proto2 = ExprSerializer.prototype;

  _proto2.literal = function literal(_literal) {
    return {
      type: 'Literal',
      loc: _literal.loc.serialize(),
      value: _literal.value
    };
  };

  _proto2.path = function path(_path) {
    return {
      type: 'Path',
      loc: _path.loc.serialize(),
      ref: visit.ref(_path.ref),
      tail: _path.tail.map(function (t) {
        return t.serialize();
      })
    };
  };

  _proto2.call = function call(_call) {
    return {
      type: 'Call',
      loc: _call.loc.serialize(),
      callee: visit.expr(_call.callee),
      args: ARGS.args(_call.args)
    };
  };

  _proto2.interpolate = function interpolate(_interpolate) {
    return {
      type: 'Interpolate',
      loc: _interpolate.loc.serialize(),
      parts: _interpolate.parts.map(function (p) {
        return visit.expr(p);
      })
    };
  };

  return ExprSerializer;
}();

exports.ExprSerializer = ExprSerializer;
var EXPR = new ExprSerializer();

var ArgsSerializer = /*#__PURE__*/function () {
  function ArgsSerializer() {}

  var _proto3 = ArgsSerializer.prototype;

  _proto3.args = function args(_args) {
    return {
      loc: _args.loc.serialize(),
      positional: this.positional(_args.positional),
      named: this.named(_args.named)
    };
  };

  _proto3.positional = function positional(_positional) {
    return {
      loc: _positional.loc.serialize(),
      exprs: _positional.exprs.map(function (p) {
        return visit.expr(p);
      })
    };
  };

  _proto3.named = function named(_named) {
    var _this = this;

    return {
      loc: _named.loc.serialize(),
      entries: _named.entries.map(function (e) {
        return _this.entry(e);
      })
    };
  };

  _proto3.entry = function entry(_entry) {
    return [_entry.name.serialize(), visit.expr(_entry.value)];
  };

  return ArgsSerializer;
}();

var ARGS = new ArgsSerializer();

var ContentSerializer = /*#__PURE__*/function () {
  function ContentSerializer() {}

  var _proto4 = ContentSerializer.prototype;

  _proto4.append = function append(node) {
    return {
      type: 'Append',
      loc: node.loc.serialize(),
      value: visit.expr(node.value),
      trusting: node.trusting
    };
  };

  _proto4.glimmerComment = function glimmerComment(node) {
    return {
      type: 'GlimmerComment',
      loc: node.loc.serialize(),
      text: node.text.serialize()
    };
  };

  _proto4.htmlComment = function htmlComment(node) {
    return {
      type: 'HtmlComment',
      loc: node.loc.serialize(),
      text: node.text.serialize()
    };
  };

  _proto4.htmlText = function htmlText(node) {
    return {
      type: 'HtmlText',
      loc: node.loc.serialize(),
      chars: node.chars
    };
  };

  _proto4.invokeBlock = function invokeBlock(node) {
    var args = ARGS.args(node.args);
    var callee = visit.expr(node.callee);
    return {
      type: 'InvokeBlock',
      loc: node.loc.serialize(),
      args: args,
      callee: callee,
      blocks: INTERNAL.namedBlocks(node.blocks)
    };
  };

  _proto4.invokeComponent = function invokeComponent(node) {
    return {
      type: 'InvokeComponent',
      loc: node.loc.serialize(),
      callee: visit.expr(node.callee),
      blocks: INTERNAL.namedBlocks(node.blocks),
      attrs: node.attrs.map(function (a) {
        return visit.attr(a);
      }),
      componentArgs: node.componentArgs.map(function (a) {
        return ATTRS.arg(a);
      }),
      modifiers: node.modifiers.map(function (m) {
        return ATTRS.modifier(m);
      })
    };
  };

  _proto4.simpleElement = function simpleElement(node) {
    return {
      type: 'SimpleElement',
      loc: node.loc.serialize(),
      tag: node.tag.serialize(),
      body: node.body.map(function (b) {
        return visit.content(b);
      }),
      attrs: node.attrs.map(function (a) {
        return visit.attr(a);
      }),
      componentArgs: node.componentArgs.map(function (a) {
        return ATTRS.arg(a);
      }),
      modifiers: node.modifiers.map(function (m) {
        return ATTRS.modifier(m);
      })
    };
  };

  return ContentSerializer;
}();

exports.ContentSerializer = ContentSerializer;
var CONTENT = new ContentSerializer();

var AttrBlockSerializer = /*#__PURE__*/function () {
  function AttrBlockSerializer() {}

  var _proto5 = AttrBlockSerializer.prototype;

  _proto5.modifier = function modifier(node) {
    return {
      loc: node.loc.serialize(),
      callee: visit.expr(node.callee),
      args: ARGS.args(node.args)
    };
  };

  _proto5.arg = function arg(node) {
    return this.anyAttr(node);
  };

  _proto5.anyAttr = function anyAttr(node) {
    return {
      loc: node.loc.serialize(),
      name: node.name.serialize(),
      value: visit.expr(node.value),
      trusting: node.trusting
    };
  };

  return AttrBlockSerializer;
}();

var ATTRS = new AttrBlockSerializer();

var InternalSerializer = /*#__PURE__*/function () {
  function InternalSerializer() {}

  var _proto6 = InternalSerializer.prototype;

  _proto6.block = function block(node) {
    return {
      loc: node.loc.serialize(),
      body: node.body.map(function (b) {
        return visit.content(b);
      }),
      table: node.scope.locals
    };
  };

  _proto6.namedBlock = function namedBlock(node) {
    return {
      name: node.name.serialize(),
      block: INTERNAL.block(node.block)
    };
  };

  _proto6.namedBlocks = function namedBlocks(node) {
    return {
      blocks: node.blocks.map(function (b) {
        return INTERNAL.namedBlock(b);
      }),
      loc: node.loc.serialize()
    };
  };

  return InternalSerializer;
}();

var INTERNAL = new InternalSerializer();
var visit = {
  expr: function expr(_expr) {
    switch (_expr.type) {
      case 'Literal':
        return EXPR.literal(_expr);

      case 'Path':
        return EXPR.path(_expr);

      case 'Call':
        return EXPR.call(_expr);

      case 'Interpolate':
        return EXPR.interpolate(_expr);
    }
  },
  attr: function attr(node) {
    if (node.type === 'SplatAttr') {
      return new _slice.SourceSlice({
        loc: node.loc,
        chars: '...attributes'
      }).serialize();
    } else {
      return ATTRS.anyAttr(node);
    }
  },
  ref: function ref(_ref) {
    switch (_ref.type) {
      case 'Arg':
        return REF.arg(_ref);

      case 'Free':
        return REF.free(_ref);

      case 'Local':
        return REF.local(_ref);

      case 'This':
        return REF.self(_ref);
    }
  },
  content: function content(node) {
    switch (node.type) {
      case 'AppendContent':
        return CONTENT.append(node);

      case 'GlimmerComment':
        return CONTENT.glimmerComment(node);

      case 'HtmlComment':
        return CONTENT.htmlComment(node);

      case 'HtmlText':
        return CONTENT.htmlText(node);

      case 'InvokeBlock':
        return CONTENT.invokeBlock(node);

      case 'InvokeComponent':
        return CONTENT.invokeComponent(node);

      case 'SimpleElement':
        return CONTENT.simpleElement(node);
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,