"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.span = exports.HbsSpan = exports.SourceSpan = void 0;

var _env = require("@glimmer/env");

var _util = require("@glimmer/util");

var _location = require("../location");

var _slice = require("../slice");

var _match = require("./match");

var _offset = require("./offset");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var __classPrivateFieldGet = void 0 && (void 0).__classPrivateFieldGet || function (receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
};

var __classPrivateFieldSet = void 0 && (void 0).__classPrivateFieldSet || function (receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
};

var _locPosSpan, _charPosSpan, _providedHbsLoc; // eslint-disable-next-line import/no-extraneous-dependencies


/**
 * A `SourceSpan` object represents a span of characters inside of a template source.
 *
 * There are three kinds of `SourceSpan` objects:
 *
 * - `ConcreteSourceSpan`, which contains byte offsets
 * - `LazySourceSpan`, which contains `SourceLocation`s from the Handlebars AST, which can be
 *   converted to byte offsets on demand.
 * - `InvisibleSourceSpan`, which represent source strings that aren't present in the source,
 *   because:
 *     - they were created synthetically
 *     - their location is nonsensical (the span is broken)
 *     - they represent nothing in the source (this currently happens only when a bug in the
 *       upstream Handlebars parser fails to assign a location to empty blocks)
 *
 * At a high level, all `SourceSpan` objects provide:
 *
 * - byte offsets
 * - source in column and line format
 *
 * And you can do these operations on `SourceSpan`s:
 *
 * - collapse it to a `SourceSpan` representing its starting or ending position
 * - slice out some characters, optionally skipping some characters at the beginning or end
 * - create a new `SourceSpan` with a different starting or ending offset
 *
 * All SourceSpan objects implement `SourceLocation`, for compatibility. All SourceSpan
 * objects have a `toJSON` that emits `SourceLocation`, also for compatibility.
 *
 * For compatibility, subclasses of `AbstractSourceSpan` must implement `locDidUpdate`, which
 * happens when an AST plugin attempts to modify the `start` or `end` of a span directly.
 *
 * The goal is to avoid creating any problems for use-cases like AST Explorer.
 */
var SourceSpan = /*#__PURE__*/function () {
  function SourceSpan(data) {
    this.data = data;
    this.isInvisible = data.kind !== "CharPosition"
    /* CharPosition */
    && data.kind !== "HbsPosition"
    /* HbsPosition */
    ;
  }

  SourceSpan.load = function load(source, serialized) {
    if (typeof serialized === 'number') {
      return SourceSpan.forCharPositions(source, serialized, serialized);
    } else if (typeof serialized === 'string') {
      return SourceSpan.synthetic(serialized);
    } else if (Array.isArray(serialized)) {
      return SourceSpan.forCharPositions(source, serialized[0], serialized[1]);
    } else if (serialized === "NonExistent"
    /* NonExistent */
    ) {
        return SourceSpan.NON_EXISTENT;
      } else if (serialized === "Broken"
    /* Broken */
    ) {
        return SourceSpan.broken(_location.BROKEN_LOCATION);
      }

    (0, _util.assertNever)(serialized);
  };

  SourceSpan.forHbsLoc = function forHbsLoc(source, loc) {
    var start = new _offset.HbsPosition(source, loc.start);
    var end = new _offset.HbsPosition(source, loc.end);
    return new HbsSpan(source, {
      start: start,
      end: end
    }, loc).wrap();
  };

  SourceSpan.forCharPositions = function forCharPositions(source, startPos, endPos) {
    var start = new _offset.CharPosition(source, startPos);
    var end = new _offset.CharPosition(source, endPos);
    return new CharPositionSpan(source, {
      start: start,
      end: end
    }).wrap();
  };

  SourceSpan.synthetic = function synthetic(chars) {
    return new InvisibleSpan("InternalsSynthetic"
    /* InternalsSynthetic */
    , _location.NON_EXISTENT_LOCATION, chars).wrap();
  };

  SourceSpan.broken = function broken(pos) {
    if (pos === void 0) {
      pos = _location.BROKEN_LOCATION;
    }

    return new InvisibleSpan("Broken"
    /* Broken */
    , pos).wrap();
  };

  var _proto = SourceSpan.prototype;

  _proto.getStart = function getStart() {
    return this.data.getStart().wrap();
  };

  _proto.getEnd = function getEnd() {
    return this.data.getEnd().wrap();
  };
  /**
   * Support converting ASTv1 nodes into a serialized format using JSON.stringify.
   */


  _proto.toJSON = function toJSON() {
    return this.loc;
  }
  /**
   * Create a new span with the current span's end and a new beginning.
   */
  ;

  _proto.withStart = function withStart(other) {
    return span(other.data, this.data.getEnd());
  }
  /**
   * Create a new span with the current span's beginning and a new ending.
   */
  ;

  _proto.withEnd = function withEnd(other) {
    return span(this.data.getStart(), other.data);
  };

  _proto.asString = function asString() {
    return this.data.asString();
  }
  /**
   * Convert this `SourceSpan` into a `SourceSlice`. In debug mode, this method optionally checks
   * that the byte offsets represented by this `SourceSpan` actually correspond to the expected
   * string.
   */
  ;

  _proto.toSlice = function toSlice(expected) {
    var chars = this.data.asString();

    if (_env.DEBUG) {
      if (expected !== undefined && chars !== expected) {
        // eslint-disable-next-line no-console
        console.warn("unexpectedly found " + JSON.stringify(chars) + " when slicing source, but expected " + JSON.stringify(expected));
      }
    }

    return new _slice.SourceSlice({
      loc: this,
      chars: expected || chars
    });
  }
  /**
   * For compatibility with SourceLocation in AST plugins
   *
   * @deprecated use startPosition instead
   */
  ;

  _proto.collapse = function collapse(where) {
    switch (where) {
      case 'start':
        return this.getStart().collapsed();

      case 'end':
        return this.getEnd().collapsed();
    }
  };

  _proto.extend = function extend(other) {
    return span(this.data.getStart(), other.data.getEnd());
  };

  _proto.serialize = function serialize() {
    return this.data.serialize();
  };

  _proto.slice = function slice(_ref) {
    var _ref$skipStart = _ref.skipStart,
        skipStart = _ref$skipStart === void 0 ? 0 : _ref$skipStart,
        _ref$skipEnd = _ref.skipEnd,
        skipEnd = _ref$skipEnd === void 0 ? 0 : _ref$skipEnd;
    return span(this.getStart().move(skipStart).data, this.getEnd().move(-skipEnd).data);
  };

  _proto.sliceStartChars = function sliceStartChars(_ref2) {
    var _ref2$skipStart = _ref2.skipStart,
        skipStart = _ref2$skipStart === void 0 ? 0 : _ref2$skipStart,
        chars = _ref2.chars;
    return span(this.getStart().move(skipStart).data, this.getStart().move(skipStart + chars).data);
  };

  _proto.sliceEndChars = function sliceEndChars(_ref3) {
    var _ref3$skipEnd = _ref3.skipEnd,
        skipEnd = _ref3$skipEnd === void 0 ? 0 : _ref3$skipEnd,
        chars = _ref3.chars;
    return span(this.getEnd().move(skipEnd - chars).data, this.getStart().move(-skipEnd).data);
  };

  _createClass(SourceSpan, [{
    key: "loc",
    get: function get() {
      var span = this.data.toHbsSpan();
      return span === null ? _location.BROKEN_LOCATION : span.toHbsLoc();
    }
  }, {
    key: "module",
    get: function get() {
      return this.data.getModule();
    }
    /**
     * Get the starting `SourcePosition` for this `SourceSpan`, lazily computing it if needed.
     */

  }, {
    key: "startPosition",
    get: function get() {
      return this.loc.start;
    }
    /**
     * Get the ending `SourcePosition` for this `SourceSpan`, lazily computing it if needed.
     */

  }, {
    key: "endPosition",
    get: function get() {
      return this.loc.end;
    }
  }, {
    key: "start",
    get: function get() {
      return this.loc.start;
    }
    /**
     * For compatibility with SourceLocation in AST plugins
     *
     * @deprecated use withStart instead
     */
    ,
    set: function set(position) {
      this.data.locDidUpdate({
        start: position
      });
    }
    /**
     * For compatibility with SourceLocation in AST plugins
     *
     * @deprecated use endPosition instead
     */

  }, {
    key: "end",
    get: function get() {
      return this.loc.end;
    }
    /**
     * For compatibility with SourceLocation in AST plugins
     *
     * @deprecated use withEnd instead
     */
    ,
    set: function set(position) {
      this.data.locDidUpdate({
        end: position
      });
    }
    /**
     * For compatibility with SourceLocation in AST plugins
     *
     * @deprecated use module instead
     */

  }, {
    key: "source",
    get: function get() {
      return this.module;
    }
  }], [{
    key: "NON_EXISTENT",
    get: function get() {
      return new InvisibleSpan("NonExistent"
      /* NonExistent */
      , _location.NON_EXISTENT_LOCATION).wrap();
    }
  }]);

  return SourceSpan;
}();

exports.SourceSpan = SourceSpan;

var CharPositionSpan = /*#__PURE__*/function () {
  function CharPositionSpan(source, charPositions) {
    this.source = source;
    this.charPositions = charPositions;
    this.kind = "CharPosition"
    /* CharPosition */
    ;

    _locPosSpan.set(this, null);
  }

  var _proto2 = CharPositionSpan.prototype;

  _proto2.wrap = function wrap() {
    return new SourceSpan(this);
  };

  _proto2.asString = function asString() {
    return this.source.slice(this.charPositions.start.charPos, this.charPositions.end.charPos);
  };

  _proto2.getModule = function getModule() {
    return this.source.module;
  };

  _proto2.getStart = function getStart() {
    return this.charPositions.start;
  };

  _proto2.getEnd = function getEnd() {
    return this.charPositions.end;
  };

  _proto2.locDidUpdate = function locDidUpdate() {
    if (false
    /* LOCAL_DEBUG */
    ) {
        // eslint-disable-next-line no-console
        console.warn("updating a location that came from a CharPosition span doesn't work reliably. Don't try to update locations after the plugin phase");
      }
  };

  _proto2.toHbsSpan = function toHbsSpan() {
    var locPosSpan = __classPrivateFieldGet(this, _locPosSpan);

    if (locPosSpan === null) {
      var start = this.charPositions.start.toHbsPos();
      var end = this.charPositions.end.toHbsPos();

      if (start === null || end === null) {
        locPosSpan = __classPrivateFieldSet(this, _locPosSpan, _offset.BROKEN);
      } else {
        locPosSpan = __classPrivateFieldSet(this, _locPosSpan, new HbsSpan(this.source, {
          start: start,
          end: end
        }));
      }
    }

    return locPosSpan === _offset.BROKEN ? null : locPosSpan;
  };

  _proto2.serialize = function serialize() {
    var _this$charPositions = this.charPositions,
        start = _this$charPositions.start.charPos,
        end = _this$charPositions.end.charPos;

    if (start === end) {
      return start;
    } else {
      return [start, end];
    }
  };

  _proto2.toCharPosSpan = function toCharPosSpan() {
    return this;
  };

  return CharPositionSpan;
}();

_locPosSpan = new WeakMap();

var HbsSpan = /*#__PURE__*/function () {
  function HbsSpan(source, hbsPositions, providedHbsLoc) {
    if (providedHbsLoc === void 0) {
      providedHbsLoc = null;
    }

    this.source = source;
    this.hbsPositions = hbsPositions;
    this.kind = "HbsPosition"
    /* HbsPosition */
    ;

    _charPosSpan.set(this, null); // the source location from Handlebars + AST Plugins -- could be wrong


    _providedHbsLoc.set(this, void 0);

    __classPrivateFieldSet(this, _providedHbsLoc, providedHbsLoc);
  }

  var _proto3 = HbsSpan.prototype;

  _proto3.serialize = function serialize() {
    var charPos = this.toCharPosSpan();
    return charPos === null ? "Broken"
    /* Broken */
    : charPos.wrap().serialize();
  };

  _proto3.wrap = function wrap() {
    return new SourceSpan(this);
  };

  _proto3.updateProvided = function updateProvided(pos, edge) {
    if (__classPrivateFieldGet(this, _providedHbsLoc)) {
      __classPrivateFieldGet(this, _providedHbsLoc)[edge] = pos;
    } // invalidate computed character offsets


    __classPrivateFieldSet(this, _charPosSpan, null);

    __classPrivateFieldSet(this, _providedHbsLoc, {
      start: pos,
      end: pos
    });
  };

  _proto3.locDidUpdate = function locDidUpdate(_ref4) {
    var start = _ref4.start,
        end = _ref4.end;

    if (start !== undefined) {
      this.updateProvided(start, 'start');
      this.hbsPositions.start = new _offset.HbsPosition(this.source, start, null);
    }

    if (end !== undefined) {
      this.updateProvided(end, 'end');
      this.hbsPositions.end = new _offset.HbsPosition(this.source, end, null);
    }
  };

  _proto3.asString = function asString() {
    var span = this.toCharPosSpan();
    return span === null ? '' : span.asString();
  };

  _proto3.getModule = function getModule() {
    return this.source.module;
  };

  _proto3.getStart = function getStart() {
    return this.hbsPositions.start;
  };

  _proto3.getEnd = function getEnd() {
    return this.hbsPositions.end;
  };

  _proto3.toHbsLoc = function toHbsLoc() {
    return {
      start: this.hbsPositions.start.hbsPos,
      end: this.hbsPositions.end.hbsPos
    };
  };

  _proto3.toHbsSpan = function toHbsSpan() {
    return this;
  };

  _proto3.toCharPosSpan = function toCharPosSpan() {
    var charPosSpan = __classPrivateFieldGet(this, _charPosSpan);

    if (charPosSpan === null) {
      var start = this.hbsPositions.start.toCharPos();
      var end = this.hbsPositions.end.toCharPos();

      if (start && end) {
        charPosSpan = __classPrivateFieldSet(this, _charPosSpan, new CharPositionSpan(this.source, {
          start: start,
          end: end
        }));
      } else {
        charPosSpan = __classPrivateFieldSet(this, _charPosSpan, _offset.BROKEN);
        return null;
      }
    }

    return charPosSpan === _offset.BROKEN ? null : charPosSpan;
  };

  return HbsSpan;
}();

exports.HbsSpan = HbsSpan;
_charPosSpan = new WeakMap(), _providedHbsLoc = new WeakMap();

var InvisibleSpan = /*#__PURE__*/function () {
  function InvisibleSpan(kind, // whatever was provided, possibly broken
  loc, // if the span represents a synthetic string
  string) {
    if (string === void 0) {
      string = null;
    }

    this.kind = kind;
    this.loc = loc;
    this.string = string;
  }

  var _proto4 = InvisibleSpan.prototype;

  _proto4.serialize = function serialize() {
    switch (this.kind) {
      case "Broken"
      /* Broken */
      :
      case "NonExistent"
      /* NonExistent */
      :
        return this.kind;

      case "InternalsSynthetic"
      /* InternalsSynthetic */
      :
        return this.string || '';
    }
  };

  _proto4.wrap = function wrap() {
    return new SourceSpan(this);
  };

  _proto4.asString = function asString() {
    return this.string || '';
  };

  _proto4.locDidUpdate = function locDidUpdate(_ref5) {
    var start = _ref5.start,
        end = _ref5.end;

    if (start !== undefined) {
      this.loc.start = start;
    }

    if (end !== undefined) {
      this.loc.end = end;
    }
  };

  _proto4.getModule = function getModule() {
    // TODO: Make this reflect the actual module this span originated from
    return 'an unknown module';
  };

  _proto4.getStart = function getStart() {
    return new _offset.InvisiblePosition(this.kind, this.loc.start);
  };

  _proto4.getEnd = function getEnd() {
    return new _offset.InvisiblePosition(this.kind, this.loc.end);
  };

  _proto4.toCharPosSpan = function toCharPosSpan() {
    return this;
  };

  _proto4.toHbsSpan = function toHbsSpan() {
    return null;
  };

  _proto4.toHbsLoc = function toHbsLoc() {
    return _location.BROKEN_LOCATION;
  };

  return InvisibleSpan;
}();

var span = (0, _match.match)(function (m) {
  return m.when("HbsPosition"
  /* HbsPosition */
  , "HbsPosition"
  /* HbsPosition */
  , function (left, right) {
    return new HbsSpan(left.source, {
      start: left,
      end: right
    }).wrap();
  }).when("CharPosition"
  /* CharPosition */
  , "CharPosition"
  /* CharPosition */
  , function (left, right) {
    return new CharPositionSpan(left.source, {
      start: left,
      end: right
    }).wrap();
  }).when("CharPosition"
  /* CharPosition */
  , "HbsPosition"
  /* HbsPosition */
  , function (left, right) {
    var rightCharPos = right.toCharPos();

    if (rightCharPos === null) {
      return new InvisibleSpan("Broken"
      /* Broken */
      , _location.BROKEN_LOCATION).wrap();
    } else {
      return span(left, rightCharPos);
    }
  }).when("HbsPosition"
  /* HbsPosition */
  , "CharPosition"
  /* CharPosition */
  , function (left, right) {
    var leftCharPos = left.toCharPos();

    if (leftCharPos === null) {
      return new InvisibleSpan("Broken"
      /* Broken */
      , _location.BROKEN_LOCATION).wrap();
    } else {
      return span(leftCharPos, right);
    }
  }).when(_match.IsInvisible, _match.MatchAny, function (left) {
    return new InvisibleSpan(left.kind, _location.BROKEN_LOCATION).wrap();
  }).when(_match.MatchAny, _match.IsInvisible, function (_, right) {
    return new InvisibleSpan(right.kind, _location.BROKEN_LOCATION).wrap();
  });
});
exports.span = span;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,