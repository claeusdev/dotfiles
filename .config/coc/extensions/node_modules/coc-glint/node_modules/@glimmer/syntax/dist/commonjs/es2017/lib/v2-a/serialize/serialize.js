"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContentSerializer = exports.ExprSerializer = exports.RefSerializer = void 0;

var _slice = require("../../source/slice");

class RefSerializer {
  arg(ref) {
    return {
      type: 'Arg',
      loc: ref.loc.serialize(),
      name: ref.name.serialize()
    };
  }

  free(ref) {
    return {
      type: 'Free',
      loc: ref.loc.serialize(),
      resolution: ref.resolution.serialize(),
      name: ref.name
    };
  }

  local(ref) {
    return {
      type: 'Local',
      loc: ref.loc.serialize(),
      name: ref.name
    };
  }

  self(ref) {
    return {
      type: 'This',
      loc: ref.loc.serialize()
    };
  }

}

exports.RefSerializer = RefSerializer;
const REF = new RefSerializer();

class ExprSerializer {
  literal(literal) {
    return {
      type: 'Literal',
      loc: literal.loc.serialize(),
      value: literal.value
    };
  }

  path(path) {
    return {
      type: 'Path',
      loc: path.loc.serialize(),
      ref: visit.ref(path.ref),
      tail: path.tail.map(t => t.serialize())
    };
  }

  call(call) {
    return {
      type: 'Call',
      loc: call.loc.serialize(),
      callee: visit.expr(call.callee),
      args: ARGS.args(call.args)
    };
  }

  interpolate(interpolate) {
    return {
      type: 'Interpolate',
      loc: interpolate.loc.serialize(),
      parts: interpolate.parts.map(p => visit.expr(p))
    };
  }

}

exports.ExprSerializer = ExprSerializer;
const EXPR = new ExprSerializer();

class ArgsSerializer {
  args(args) {
    return {
      loc: args.loc.serialize(),
      positional: this.positional(args.positional),
      named: this.named(args.named)
    };
  }

  positional(positional) {
    return {
      loc: positional.loc.serialize(),
      exprs: positional.exprs.map(p => visit.expr(p))
    };
  }

  named(named) {
    return {
      loc: named.loc.serialize(),
      entries: named.entries.map(e => this.entry(e))
    };
  }

  entry(entry) {
    return [entry.name.serialize(), visit.expr(entry.value)];
  }

}

const ARGS = new ArgsSerializer();

class ContentSerializer {
  append(node) {
    return {
      type: 'Append',
      loc: node.loc.serialize(),
      value: visit.expr(node.value),
      trusting: node.trusting
    };
  }

  glimmerComment(node) {
    return {
      type: 'GlimmerComment',
      loc: node.loc.serialize(),
      text: node.text.serialize()
    };
  }

  htmlComment(node) {
    return {
      type: 'HtmlComment',
      loc: node.loc.serialize(),
      text: node.text.serialize()
    };
  }

  htmlText(node) {
    return {
      type: 'HtmlText',
      loc: node.loc.serialize(),
      chars: node.chars
    };
  }

  invokeBlock(node) {
    let args = ARGS.args(node.args);
    let callee = visit.expr(node.callee);
    return {
      type: 'InvokeBlock',
      loc: node.loc.serialize(),
      args,
      callee,
      blocks: INTERNAL.namedBlocks(node.blocks)
    };
  }

  invokeComponent(node) {
    return {
      type: 'InvokeComponent',
      loc: node.loc.serialize(),
      callee: visit.expr(node.callee),
      blocks: INTERNAL.namedBlocks(node.blocks),
      attrs: node.attrs.map(a => visit.attr(a)),
      componentArgs: node.componentArgs.map(a => ATTRS.arg(a)),
      modifiers: node.modifiers.map(m => ATTRS.modifier(m))
    };
  }

  simpleElement(node) {
    return {
      type: 'SimpleElement',
      loc: node.loc.serialize(),
      tag: node.tag.serialize(),
      body: node.body.map(b => visit.content(b)),
      attrs: node.attrs.map(a => visit.attr(a)),
      componentArgs: node.componentArgs.map(a => ATTRS.arg(a)),
      modifiers: node.modifiers.map(m => ATTRS.modifier(m))
    };
  }

}

exports.ContentSerializer = ContentSerializer;
const CONTENT = new ContentSerializer();

class AttrBlockSerializer {
  modifier(node) {
    return {
      loc: node.loc.serialize(),
      callee: visit.expr(node.callee),
      args: ARGS.args(node.args)
    };
  }

  arg(node) {
    return this.anyAttr(node);
  }

  anyAttr(node) {
    return {
      loc: node.loc.serialize(),
      name: node.name.serialize(),
      value: visit.expr(node.value),
      trusting: node.trusting
    };
  }

}

const ATTRS = new AttrBlockSerializer();

class InternalSerializer {
  block(node) {
    return {
      loc: node.loc.serialize(),
      body: node.body.map(b => visit.content(b)),
      table: node.scope.locals
    };
  }

  namedBlock(node) {
    return {
      name: node.name.serialize(),
      block: INTERNAL.block(node.block)
    };
  }

  namedBlocks(node) {
    return {
      blocks: node.blocks.map(b => INTERNAL.namedBlock(b)),
      loc: node.loc.serialize()
    };
  }

}

const INTERNAL = new InternalSerializer();
const visit = {
  expr(expr) {
    switch (expr.type) {
      case 'Literal':
        return EXPR.literal(expr);

      case 'Path':
        return EXPR.path(expr);

      case 'Call':
        return EXPR.call(expr);

      case 'Interpolate':
        return EXPR.interpolate(expr);
    }
  },

  attr(node) {
    if (node.type === 'SplatAttr') {
      return new _slice.SourceSlice({
        loc: node.loc,
        chars: '...attributes'
      }).serialize();
    } else {
      return ATTRS.anyAttr(node);
    }
  },

  ref(ref) {
    switch (ref.type) {
      case 'Arg':
        return REF.arg(ref);

      case 'Free':
        return REF.free(ref);

      case 'Local':
        return REF.local(ref);

      case 'This':
        return REF.self(ref);
    }
  },

  content(node) {
    switch (node.type) {
      case 'AppendContent':
        return CONTENT.append(node);

      case 'GlimmerComment':
        return CONTENT.glimmerComment(node);

      case 'HtmlComment':
        return CONTENT.htmlComment(node);

      case 'HtmlText':
        return CONTENT.htmlText(node);

      case 'InvokeBlock':
        return CONTENT.invokeBlock(node);

      case 'InvokeComponent':
        return CONTENT.invokeComponent(node);

      case 'SimpleElement':
        return CONTENT.simpleElement(node);
    }
  }

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,