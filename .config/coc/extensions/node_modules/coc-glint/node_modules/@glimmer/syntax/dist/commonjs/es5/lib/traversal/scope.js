"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TransformScope = void 0;

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function getLocalName(node) {
  switch (node.type) {
    case 'ElementNode':
      // unfortunately the ElementNode stores `tag` as a string
      // if that changes in glimmer-vm this will need to be updated
      return node.tag.split('.')[0];

    case 'SubExpression':
    case 'MustacheStatement':
    case 'BlockStatement':
      return getLocalName(node.path);

    case 'UndefinedLiteral':
    case 'NullLiteral':
    case 'BooleanLiteral':
    case 'StringLiteral':
    case 'NumberLiteral':
    case 'TextNode':
    case 'Template':
    case 'Block':
    case 'CommentStatement':
    case 'MustacheCommentStatement':
    case 'PartialStatement':
    case 'ElementModifierStatement':
    case 'AttrNode':
    case 'ConcatStatement':
    case 'Program':
    case 'Hash':
    case 'HashPair':
      return undefined;

    case 'PathExpression':
    default:
      return node.parts.length ? node.parts[0] : undefined;
  }
}

function getLocals(node) {
  switch (node.type) {
    case 'ElementNode':
    case 'Program':
    case 'Block':
    case 'Template':
      return node.blockParams;

    case 'BlockStatement':
      return node.program.blockParams;

    default:
      return undefined;
  }
}

var TransformScope = /*#__PURE__*/function () {
  function TransformScope(locals) {
    this.locals = locals;
    this.hasPartial = false;
    this.usedLocals = {};

    for (var _iterator = _createForOfIteratorHelperLoose(locals), _step; !(_step = _iterator()).done;) {
      var local = _step.value;
      this.usedLocals[local] = false;
    }
  }

  var _proto = TransformScope.prototype;

  _proto.child = function child(node) {
    var locals = getLocals(node);
    return locals ? new ChildTransformScope(locals, this) : this;
  };

  _proto.usePartial = function usePartial() {
    this.hasPartial = true;
  };

  return TransformScope;
}();

exports.TransformScope = TransformScope;

var RootTransformScope = /*#__PURE__*/function (_TransformScope) {
  _inheritsLoose(RootTransformScope, _TransformScope);

  function RootTransformScope(node) {
    var _a;

    var locals = (_a = getLocals(node)) !== null && _a !== void 0 ? _a : [];
    return _TransformScope.call(this, locals) || this;
  }

  var _proto2 = RootTransformScope.prototype;

  _proto2.useLocal = function useLocal(node) {
    var name = getLocalName(node);

    if (name && name in this.usedLocals) {
      this.usedLocals[name] = true;
    }
  };

  _proto2.isLocal = function isLocal(name) {
    return this.locals.indexOf(name) !== -1;
  };

  _proto2.currentUnusedLocals = function currentUnusedLocals() {
    var _this = this;

    if (!this.hasPartial && this.locals.length > 0) {
      return this.locals.filter(function (local) {
        return !_this.usedLocals[local];
      });
    }

    return false;
  };

  return RootTransformScope;
}(TransformScope);

exports.default = RootTransformScope;

var ChildTransformScope = /*#__PURE__*/function (_TransformScope2) {
  _inheritsLoose(ChildTransformScope, _TransformScope2);

  function ChildTransformScope(locals, parent) {
    var _this2;

    _this2 = _TransformScope2.call(this, locals) || this;
    _this2.parent = parent;
    return _this2;
  }

  var _proto3 = ChildTransformScope.prototype;

  _proto3.useLocal = function useLocal(node) {
    var name = getLocalName(node);

    if (name && name in this.usedLocals) {
      this.usedLocals[name] = true;
    } else {
      this.parent.useLocal(node);
    }
  };

  _proto3.isLocal = function isLocal(name) {
    return this.locals.indexOf(name) !== -1 || this.parent.isLocal(name);
  };

  _proto3.currentUnusedLocals = function currentUnusedLocals() {
    if (!this.hasPartial && this.locals.length > 0) {
      // We only care about the last local, because if it is used then it implies
      // usage of the others (specifically when in a child block, |foo bar|)
      if (!this.usedLocals[this.locals[this.locals.length - 1]]) {
        return [this.locals[this.locals.length - 1]];
      }
    }

    return false;
  };

  return ChildTransformScope;
}(TransformScope);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,