var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
};

var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
};

var _hasEval;

import { dict, unreachable } from '@glimmer/util';
export class SymbolTable {
  static top(locals) {
    return new ProgramSymbolTable(locals);
  }

  child(locals) {
    let symbols = locals.map(name => this.allocate(name));
    return new BlockSymbolTable(this, locals, symbols);
  }

}
export class ProgramSymbolTable extends SymbolTable {
  constructor(templateLocals) {
    super();
    this.templateLocals = templateLocals;
    this.isRoot = true;
    this.symbols = [];
    this.upvars = [];
    this.size = 1;
    this.named = dict();
    this.blocks = dict();
    this.usedTemplateLocals = [];

    _hasEval.set(this, false);
  }

  setHasEval() {
    __classPrivateFieldSet(this, _hasEval, true);
  }

  get hasEval() {
    return __classPrivateFieldGet(this, _hasEval);
  }

  has(name) {
    return this.templateLocals.indexOf(name) !== -1;
  }

  get(_name) {
    throw unreachable();
  }

  getLocalsMap() {
    return dict();
  }

  getEvalInfo() {
    let locals = this.getLocalsMap();
    return Object.keys(locals).map(symbol => locals[symbol]);
  }

  allocateFree(name) {
    let index = this.upvars.indexOf(name);

    if (index !== -1) {
      return index;
    }

    index = this.upvars.length;
    this.upvars.push(name);
    return index;
  }

  allocateTemplateLocal(name) {
    let index = this.usedTemplateLocals.indexOf(name);

    if (index !== -1) {
      return index;
    }

    index = this.upvars.length;
    this.usedTemplateLocals.push(name);
    return index;
  }

  allocateNamed(name) {
    let named = this.named[name];

    if (!named) {
      named = this.named[name] = this.allocate(name);
    }

    return named;
  }

  allocateBlock(name) {
    if (name === 'inverse') {
      name = 'else';
    }

    let block = this.blocks[name];

    if (!block) {
      block = this.blocks[name] = this.allocate(`&${name}`);
    }

    return block;
  }

  allocate(identifier) {
    this.symbols.push(identifier);
    return this.size++;
  }

}
_hasEval = new WeakMap();
export class BlockSymbolTable extends SymbolTable {
  constructor(parent, symbols, slots) {
    super();
    this.parent = parent;
    this.symbols = symbols;
    this.slots = slots;
    this.isRoot = false;
  }

  get locals() {
    return this.symbols;
  }

  has(name) {
    return this.symbols.indexOf(name) !== -1 || this.parent.has(name);
  }

  get(name) {
    let slot = this.symbols.indexOf(name);
    return slot === -1 ? this.parent.get(name) : this.slots[slot];
  }

  getLocalsMap() {
    let dict = this.parent.getLocalsMap();
    this.symbols.forEach(symbol => dict[symbol] = this.get(symbol));
    return dict;
  }

  getEvalInfo() {
    let locals = this.getLocalsMap();
    return Object.keys(locals).map(symbol => locals[symbol]);
  }

  setHasEval() {
    this.parent.setHasEval();
  }

  allocateFree(name) {
    return this.parent.allocateFree(name);
  }

  allocateTemplateLocal(name) {
    return this.parent.allocateTemplateLocal(name);
  }

  allocateNamed(name) {
    return this.parent.allocateNamed(name);
  }

  allocateBlock(name) {
    return this.parent.allocateBlock(name);
  }

  allocate(identifier) {
    return this.parent.allocate(identifier);
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,