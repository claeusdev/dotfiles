var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
};

var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
};

var _span;

import { SourceSpan } from './span';
export var SpanList = /*#__PURE__*/function () {
  function SpanList(span) {
    if (span === void 0) {
      span = [];
    }

    _span.set(this, void 0);

    __classPrivateFieldSet(this, _span, span);
  }

  SpanList.range = function range(span, fallback) {
    if (fallback === void 0) {
      fallback = SourceSpan.NON_EXISTENT;
    }

    return new SpanList(span.map(loc)).getRangeOffset(fallback);
  };

  var _proto = SpanList.prototype;

  _proto.add = function add(offset) {
    __classPrivateFieldGet(this, _span).push(offset);
  };

  _proto.getRangeOffset = function getRangeOffset(fallback) {
    if (__classPrivateFieldGet(this, _span).length === 0) {
      return fallback;
    } else {
      var first = __classPrivateFieldGet(this, _span)[0];

      var last = __classPrivateFieldGet(this, _span)[__classPrivateFieldGet(this, _span).length - 1];

      return first.extend(last);
    }
  };

  return SpanList;
}();
_span = new WeakMap();
export function loc(span) {
  if (Array.isArray(span)) {
    var first = span[0];
    var last = span[span.length - 1];
    return loc(first).extend(loc(last));
  } else if (span instanceof SourceSpan) {
    return span;
  } else {
    return span.loc;
  }
}
export function hasSpan(span) {
  if (Array.isArray(span) && span.length === 0) {
    return false;
  }

  return true;
}
export function maybeLoc(location, fallback) {
  if (hasSpan(location)) {
    return loc(location);
  } else {
    return fallback;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvc291cmNlL3NwYW4tbGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSUEsU0FBQSxVQUFBLFFBQUEsUUFBQTtBQU9BLFdBQU0sUUFBTjtBQVNFLG9CQUFZLElBQVosRUFBbUM7QUFBQSxRQUF2QixJQUF1QjtBQUF2QixNQUFBLElBQXVCLEdBQW5DLEVBQW1DO0FBQUE7O0FBRm5DLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBOztBQUdFLElBQUEsc0JBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsQ0FBQTtBQUNEOztBQVhILFdBR0UsS0FIRixHQUdFLGVBQUEsSUFBQSxFQUFvQyxRQUFwQyxFQUFrRjtBQUFBLFFBQTlDLFFBQThDO0FBQTlDLE1BQUEsUUFBOEMsR0FBdkIsVUFBVSxDQUFyRSxZQUFrRjtBQUFBOztBQUNoRixXQUFPLElBQUEsUUFBQSxDQUFhLElBQUksQ0FBSixHQUFBLENBQWIsR0FBYSxDQUFiLEVBQUEsY0FBQSxDQUFQLFFBQU8sQ0FBUDtBQUNELEdBTEg7O0FBQUE7O0FBQUEsU0FhRSxHQWJGLEdBYUUsYUFBRyxNQUFILEVBQXNCO0FBQ3BCLElBQUEsc0JBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLE1BQUE7QUFDRCxHQWZIOztBQUFBLFNBaUJFLGNBakJGLEdBaUJFLHdCQUFjLFFBQWQsRUFBbUM7QUFDakMsUUFBSSxzQkFBQSxDQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsQ0FBQSxNQUFBLEtBQUosQ0FBQSxFQUE2QjtBQUMzQixhQUFBLFFBQUE7QUFERixLQUFBLE1BRU87QUFDTCxVQUFJLEtBQUssR0FBRyxzQkFBQSxDQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsQ0FBWixDQUFZLENBQVo7O0FBQ0EsVUFBSSxJQUFJLEdBQUcsc0JBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLENBQVcsc0JBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLENBQUEsTUFBQSxHQUF0QixDQUFXLENBQVg7O0FBRUEsYUFBTyxLQUFLLENBQUwsTUFBQSxDQUFQLElBQU8sQ0FBUDtBQUNEO0FBQ0YsR0ExQkg7O0FBQUE7QUFBQTs7QUErQkEsT0FBTSxTQUFBLEdBQUEsQ0FBQSxJQUFBLEVBQWlDO0FBQ3JDLE1BQUksS0FBSyxDQUFMLE9BQUEsQ0FBSixJQUFJLENBQUosRUFBeUI7QUFDdkIsUUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFoQixDQUFnQixDQUFoQjtBQUNBLFFBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUosTUFBQSxHQUFoQixDQUFlLENBQWY7QUFFQSxXQUFPLEdBQUcsQ0FBSCxLQUFHLENBQUgsQ0FBQSxNQUFBLENBQWtCLEdBQUcsQ0FBNUIsSUFBNEIsQ0FBckIsQ0FBUDtBQUpGLEdBQUEsTUFLTyxJQUFJLElBQUksWUFBUixVQUFBLEVBQWdDO0FBQ3JDLFdBQUEsSUFBQTtBQURLLEdBQUEsTUFFQTtBQUNMLFdBQU8sSUFBSSxDQUFYLEdBQUE7QUFDRDtBQUNGO0FBSUQsT0FBTSxTQUFBLE9BQUEsQ0FBQSxJQUFBLEVBQTBDO0FBQzlDLE1BQUksS0FBSyxDQUFMLE9BQUEsQ0FBQSxJQUFBLEtBQXVCLElBQUksQ0FBSixNQUFBLEtBQTNCLENBQUEsRUFBOEM7QUFDNUMsV0FBQSxLQUFBO0FBQ0Q7O0FBRUQsU0FBQSxJQUFBO0FBQ0Q7QUFFRCxPQUFNLFNBQUEsUUFBQSxDQUFBLFFBQUEsRUFBQSxRQUFBLEVBQXFFO0FBQ3pFLE1BQUksT0FBTyxDQUFYLFFBQVcsQ0FBWCxFQUF1QjtBQUNyQixXQUFPLEdBQUcsQ0FBVixRQUFVLENBQVY7QUFERixHQUFBLE1BRU87QUFDTCxXQUFBLFFBQUE7QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuaW1wb3J0IHR5cGUgeyBQcmVzZW50QXJyYXkgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcblxuaW1wb3J0IHsgTG9jYXRlZFdpdGhPcHRpb25hbFNwYW4sIExvY2F0ZWRXaXRoU3BhbiB9IGZyb20gJy4vbG9jYXRpb24nO1xuaW1wb3J0IHsgU291cmNlT2Zmc2V0LCBTb3VyY2VTcGFuIH0gZnJvbSAnLi9zcGFuJztcblxuZXhwb3J0IHR5cGUgSGFzU3BhbiA9IFNvdXJjZVNwYW4gfCBMb2NhdGVkV2l0aFNwYW4gfCBQcmVzZW50QXJyYXk8TG9jYXRlZFdpdGhTcGFuPjtcbmV4cG9ydCB0eXBlIE1heWJlSGFzU3BhbiA9IFNvdXJjZVNwYW4gfCBMb2NhdGVkV2l0aE9wdGlvbmFsU3BhbiB8IExvY2F0ZWRXaXRoT3B0aW9uYWxTcGFuW10gfCBudWxsO1xuXG5leHBvcnQgdHlwZSBUb1NvdXJjZU9mZnNldCA9IG51bWJlciB8IFNvdXJjZU9mZnNldDtcblxuZXhwb3J0IGNsYXNzIFNwYW5MaXN0IHtcbiAgc3RhdGljIHJhbmdlKHNwYW46IFByZXNlbnRBcnJheTxIYXNTb3VyY2VTcGFuPik6IFNvdXJjZVNwYW47XG4gIHN0YXRpYyByYW5nZShzcGFuOiBIYXNTb3VyY2VTcGFuW10sIGZhbGxiYWNrOiBTb3VyY2VTcGFuKTogU291cmNlU3BhbjtcbiAgc3RhdGljIHJhbmdlKHNwYW46IEhhc1NvdXJjZVNwYW5bXSwgZmFsbGJhY2s6IFNvdXJjZVNwYW4gPSBTb3VyY2VTcGFuLk5PTl9FWElTVEVOVCk6IFNvdXJjZVNwYW4ge1xuICAgIHJldHVybiBuZXcgU3Bhbkxpc3Qoc3Bhbi5tYXAobG9jKSkuZ2V0UmFuZ2VPZmZzZXQoZmFsbGJhY2spO1xuICB9XG5cbiAgI3NwYW46IFNvdXJjZVNwYW5bXTtcblxuICBjb25zdHJ1Y3RvcihzcGFuOiBTb3VyY2VTcGFuW10gPSBbXSkge1xuICAgIHRoaXMuI3NwYW4gPSBzcGFuO1xuICB9XG5cbiAgYWRkKG9mZnNldDogU291cmNlU3Bhbik6IHZvaWQge1xuICAgIHRoaXMuI3NwYW4ucHVzaChvZmZzZXQpO1xuICB9XG5cbiAgZ2V0UmFuZ2VPZmZzZXQoZmFsbGJhY2s6IFNvdXJjZVNwYW4pOiBTb3VyY2VTcGFuIHtcbiAgICBpZiAodGhpcy4jc3Bhbi5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGZpcnN0ID0gdGhpcy4jc3BhblswXTtcbiAgICAgIGxldCBsYXN0ID0gdGhpcy4jc3Bhblt0aGlzLiNzcGFuLmxlbmd0aCAtIDFdO1xuXG4gICAgICByZXR1cm4gZmlyc3QuZXh0ZW5kKGxhc3QpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgdHlwZSBIYXNTb3VyY2VTcGFuID0geyBsb2M6IFNvdXJjZVNwYW4gfSB8IFNvdXJjZVNwYW4gfCBbSGFzU291cmNlU3BhbiwgLi4uSGFzU291cmNlU3BhbltdXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYyhzcGFuOiBIYXNTb3VyY2VTcGFuKTogU291cmNlU3BhbiB7XG4gIGlmIChBcnJheS5pc0FycmF5KHNwYW4pKSB7XG4gICAgbGV0IGZpcnN0ID0gc3BhblswXTtcbiAgICBsZXQgbGFzdCA9IHNwYW5bc3Bhbi5sZW5ndGggLSAxXTtcblxuICAgIHJldHVybiBsb2MoZmlyc3QpLmV4dGVuZChsb2MobGFzdCkpO1xuICB9IGVsc2UgaWYgKHNwYW4gaW5zdGFuY2VvZiBTb3VyY2VTcGFuKSB7XG4gICAgcmV0dXJuIHNwYW47XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNwYW4ubG9jO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIE1heWJlSGFzU291cmNlU3BhbiA9IHsgbG9jOiBTb3VyY2VTcGFuIH0gfCBTb3VyY2VTcGFuIHwgTWF5YmVIYXNTb3VyY2VTcGFuW107XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNTcGFuKHNwYW46IE1heWJlSGFzU291cmNlU3Bhbik6IHNwYW4gaXMgSGFzU291cmNlU3BhbiB7XG4gIGlmIChBcnJheS5pc0FycmF5KHNwYW4pICYmIHNwYW4ubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXliZUxvYyhsb2NhdGlvbjogTWF5YmVIYXNTb3VyY2VTcGFuLCBmYWxsYmFjazogU291cmNlU3Bhbik6IFNvdXJjZVNwYW4ge1xuICBpZiAoaGFzU3Bhbihsb2NhdGlvbikpIHtcbiAgICByZXR1cm4gbG9jKGxvY2F0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=