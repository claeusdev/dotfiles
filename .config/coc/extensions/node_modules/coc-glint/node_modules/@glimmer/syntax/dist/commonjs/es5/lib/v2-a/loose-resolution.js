"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SexpSyntaxContext = SexpSyntaxContext;
exports.ModifierSyntaxContext = ModifierSyntaxContext;
exports.BlockSyntaxContext = BlockSyntaxContext;
exports.ComponentSyntaxContext = ComponentSyntaxContext;
exports.AttrValueSyntaxContext = AttrValueSyntaxContext;
exports.AppendSyntaxContext = AppendSyntaxContext;

var ASTv2 = _interopRequireWildcard(require("./api"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SexpSyntaxContext(node) {
  if (isSimpleCallee(node)) {
    return ASTv2.LooseModeResolution.namespaced("Helper"
    /* Helper */
    );
  } else {
    return null;
  }
}

function ModifierSyntaxContext(node) {
  if (isSimpleCallee(node)) {
    return ASTv2.LooseModeResolution.namespaced("Modifier"
    /* Modifier */
    );
  } else {
    return null;
  }
}

function BlockSyntaxContext(node) {
  if (isSimpleCallee(node)) {
    return ASTv2.LooseModeResolution.namespaced("Component"
    /* Component */
    );
  } else {
    return null;
  }
}

function ComponentSyntaxContext(node) {
  if (isSimplePath(node)) {
    return ASTv2.LooseModeResolution.namespaced("Component"
    /* Component */
    );
  } else {
    return null;
  }
}
/**
 * This corresponds to append positions (text curlies or attribute
 * curlies). In strict mode, this also corresponds to arg curlies.
 */


function AttrValueSyntaxContext(node) {
  var isSimple = isSimpleCallee(node);
  var isInvoke = isInvokeNode(node);

  if (isSimple) {
    return isInvoke ? ASTv2.LooseModeResolution.namespaced("Helper"
    /* Helper */
    ) : ASTv2.LooseModeResolution.attr();
  } else {
    return isInvoke ? ASTv2.STRICT_RESOLUTION : ASTv2.LooseModeResolution.fallback();
  }
}
/**
 * This corresponds to append positions (text curlies or attribute
 * curlies). In strict mode, this also corresponds to arg curlies.
 */


function AppendSyntaxContext(node) {
  var isSimple = isSimpleCallee(node);
  var isInvoke = isInvokeNode(node);
  var trusting = node.trusting;

  if (isSimple) {
    return trusting ? ASTv2.LooseModeResolution.trustingAppend({
      invoke: isInvoke
    }) : ASTv2.LooseModeResolution.append({
      invoke: isInvoke
    });
  } else {
    return isInvoke ? ASTv2.STRICT_RESOLUTION : ASTv2.LooseModeResolution.fallback();
  }
} // UTILITIES

/**
 * A call node has a simple callee if its head is:
 *
 * - a `PathExpression`
 * - the `PathExpression`'s head is a `VarHead`
 * - it has no tail
 *
 * Simple heads:
 *
 * ```
 * {{x}}
 * {{x y}}
 * ```
 *
 * Not simple heads:
 *
 * ```
 * {{x.y}}
 * {{x.y z}}
 * {{@x}}
 * {{@x a}}
 * {{this}}
 * {{this a}}
 * ```
 */


function isSimpleCallee(node) {
  var path = node.path;
  return isSimplePath(path);
}

function isSimplePath(node) {
  if (node.type === 'PathExpression' && node.head.type === 'VarHead') {
    return node.tail.length === 0;
  } else {
    return false;
  }
}
/**
 * The call expression has at least one argument.
 */


function isInvokeNode(node) {
  return node.params.length > 0 || node.hash.pairs.length > 0;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdjItYS9sb29zZS1yZXNvbHV0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUNBOzs7Ozs7QUFZTSxTQUFBLGlCQUFBLENBQUEsSUFBQSxFQUFxRDtBQUN6RCxNQUFJLGNBQWMsQ0FBbEIsSUFBa0IsQ0FBbEIsRUFBMEI7QUFDeEIsV0FBTyxLQUFLLENBQUwsbUJBQUEsQ0FBQSxVQUFBLENBQW9DO0FBQUE7QUFBcEMsS0FBUDtBQURGLEdBQUEsTUFFTztBQUNMLFdBQUEsSUFBQTtBQUNEO0FBQ0Y7O0FBRUssU0FBQSxxQkFBQSxDQUFBLElBQUEsRUFDZ0M7QUFFcEMsTUFBSSxjQUFjLENBQWxCLElBQWtCLENBQWxCLEVBQTBCO0FBQ3hCLFdBQU8sS0FBSyxDQUFMLG1CQUFBLENBQUEsVUFBQSxDQUFvQztBQUFBO0FBQXBDLEtBQVA7QUFERixHQUFBLE1BRU87QUFDTCxXQUFBLElBQUE7QUFDRDtBQUNGOztBQUVLLFNBQUEsa0JBQUEsQ0FBQSxJQUFBLEVBQXVEO0FBQzNELE1BQUksY0FBYyxDQUFsQixJQUFrQixDQUFsQixFQUEwQjtBQUN4QixXQUFPLEtBQUssQ0FBTCxtQkFBQSxDQUFBLFVBQUEsQ0FBb0M7QUFBQTtBQUFwQyxLQUFQO0FBREYsR0FBQSxNQUVPO0FBQ0wsV0FBQSxJQUFBO0FBQ0Q7QUFDRjs7QUFFSyxTQUFBLHNCQUFBLENBQUEsSUFBQSxFQUEyRDtBQUMvRCxNQUFJLFlBQVksQ0FBaEIsSUFBZ0IsQ0FBaEIsRUFBd0I7QUFDdEIsV0FBTyxLQUFLLENBQUwsbUJBQUEsQ0FBQSxVQUFBLENBQW9DO0FBQUE7QUFBcEMsS0FBUDtBQURGLEdBQUEsTUFFTztBQUNMLFdBQUEsSUFBQTtBQUNEO0FBQ0Y7QUFFRDs7Ozs7O0FBSU0sU0FBQSxzQkFBQSxDQUFBLElBQUEsRUFBOEQ7QUFDbEUsTUFBSSxRQUFRLEdBQUcsY0FBYyxDQUE3QixJQUE2QixDQUE3QjtBQUNBLE1BQUksUUFBUSxHQUFHLFlBQVksQ0FBM0IsSUFBMkIsQ0FBM0I7O0FBRUEsTUFBQSxRQUFBLEVBQWM7QUFDWixXQUFPLFFBQVEsR0FDWCxLQUFLLENBQUwsbUJBQUEsQ0FBQSxVQUFBLENBQW9DO0FBQUE7QUFBcEMsS0FEVyxHQUVYLEtBQUssQ0FBTCxtQkFBQSxDQUZKLElBRUksRUFGSjtBQURGLEdBQUEsTUFJTztBQUNMLFdBQU8sUUFBUSxHQUFHLEtBQUssQ0FBUixpQkFBQSxHQUE2QixLQUFLLENBQUwsbUJBQUEsQ0FBNUMsUUFBNEMsRUFBNUM7QUFDRDtBQUNGO0FBRUQ7Ozs7OztBQUlNLFNBQUEsbUJBQUEsQ0FBQSxJQUFBLEVBQTJEO0FBQy9ELE1BQUksUUFBUSxHQUFHLGNBQWMsQ0FBN0IsSUFBNkIsQ0FBN0I7QUFDQSxNQUFJLFFBQVEsR0FBRyxZQUFZLENBQTNCLElBQTJCLENBQTNCO0FBQ0EsTUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFuQixRQUFBOztBQUVBLE1BQUEsUUFBQSxFQUFjO0FBQ1osV0FBTyxRQUFRLEdBQ1gsS0FBSyxDQUFMLG1CQUFBLENBQUEsY0FBQSxDQUF5QztBQUFFLE1BQUEsTUFBTSxFQUFFO0FBQVYsS0FBekMsQ0FEVyxHQUVYLEtBQUssQ0FBTCxtQkFBQSxDQUFBLE1BQUEsQ0FBaUM7QUFBRSxNQUFBLE1BQU0sRUFBRTtBQUFWLEtBQWpDLENBRko7QUFERixHQUFBLE1BSU87QUFDTCxXQUFPLFFBQVEsR0FBRyxLQUFLLENBQVIsaUJBQUEsR0FBNkIsS0FBSyxDQUFMLG1CQUFBLENBQTVDLFFBQTRDLEVBQTVDO0FBQ0Q7RUFPSDs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBLFNBQUEsY0FBQSxDQUFBLElBQUEsRUFBMEM7QUFDeEMsTUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFmLElBQUE7QUFFQSxTQUFPLFlBQVksQ0FBbkIsSUFBbUIsQ0FBbkI7QUFDRDs7QUFFRCxTQUFBLFlBQUEsQ0FBQSxJQUFBLEVBQTRDO0FBQzFDLE1BQUksSUFBSSxDQUFKLElBQUEsS0FBQSxnQkFBQSxJQUFrQyxJQUFJLENBQUosSUFBQSxDQUFBLElBQUEsS0FBdEMsU0FBQSxFQUFvRTtBQUNsRSxXQUFPLElBQUksQ0FBSixJQUFBLENBQUEsTUFBQSxLQUFQLENBQUE7QUFERixHQUFBLE1BRU87QUFDTCxXQUFBLEtBQUE7QUFDRDtBQUNGO0FBRUQ7Ozs7O0FBR0EsU0FBQSxZQUFBLENBQUEsSUFBQSxFQUF3QztBQUN0QyxTQUFPLElBQUksQ0FBSixNQUFBLENBQUEsTUFBQSxHQUFBLENBQUEsSUFBMEIsSUFBSSxDQUFKLElBQUEsQ0FBQSxLQUFBLENBQUEsTUFBQSxHQUFqQyxDQUFBO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBU1R2MSBmcm9tICcuLi92MS9hcGknO1xuaW1wb3J0ICogYXMgQVNUdjIgZnJvbSAnLi9hcGknO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFzdENhbGxQYXJ0cyB7XG4gIHBhdGg6IEFTVHYxLkV4cHJlc3Npb247XG4gIHBhcmFtczogQVNUdjEuRXhwcmVzc2lvbltdO1xuICBoYXNoOiBBU1R2MS5IYXNoO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZhclBhdGggZXh0ZW5kcyBBU1R2MS5QYXRoRXhwcmVzc2lvbiB7XG4gIGhlYWQ6IEFTVHYxLlZhckhlYWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTZXhwU3ludGF4Q29udGV4dChub2RlOiBBU1R2MS5TdWJFeHByZXNzaW9uKTogQVNUdjIuRnJlZVZhclJlc29sdXRpb24gfCBudWxsIHtcbiAgaWYgKGlzU2ltcGxlQ2FsbGVlKG5vZGUpKSB7XG4gICAgcmV0dXJuIEFTVHYyLkxvb3NlTW9kZVJlc29sdXRpb24ubmFtZXNwYWNlZChBU1R2Mi5GcmVlVmFyTmFtZXNwYWNlLkhlbHBlcik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE1vZGlmaWVyU3ludGF4Q29udGV4dChcbiAgbm9kZTogQVNUdjEuRWxlbWVudE1vZGlmaWVyU3RhdGVtZW50XG4pOiBBU1R2Mi5GcmVlVmFyUmVzb2x1dGlvbiB8IG51bGwge1xuICBpZiAoaXNTaW1wbGVDYWxsZWUobm9kZSkpIHtcbiAgICByZXR1cm4gQVNUdjIuTG9vc2VNb2RlUmVzb2x1dGlvbi5uYW1lc3BhY2VkKEFTVHYyLkZyZWVWYXJOYW1lc3BhY2UuTW9kaWZpZXIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCbG9ja1N5bnRheENvbnRleHQobm9kZTogQVNUdjEuQmxvY2tTdGF0ZW1lbnQpOiBBU1R2Mi5GcmVlVmFyUmVzb2x1dGlvbiB8IG51bGwge1xuICBpZiAoaXNTaW1wbGVDYWxsZWUobm9kZSkpIHtcbiAgICByZXR1cm4gQVNUdjIuTG9vc2VNb2RlUmVzb2x1dGlvbi5uYW1lc3BhY2VkKEFTVHYyLkZyZWVWYXJOYW1lc3BhY2UuQ29tcG9uZW50KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29tcG9uZW50U3ludGF4Q29udGV4dChub2RlOiBBU1R2MS5QYXRoRXhwcmVzc2lvbik6IEFTVHYyLkZyZWVWYXJSZXNvbHV0aW9uIHwgbnVsbCB7XG4gIGlmIChpc1NpbXBsZVBhdGgobm9kZSkpIHtcbiAgICByZXR1cm4gQVNUdjIuTG9vc2VNb2RlUmVzb2x1dGlvbi5uYW1lc3BhY2VkKEFTVHYyLkZyZWVWYXJOYW1lc3BhY2UuQ29tcG9uZW50KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgY29ycmVzcG9uZHMgdG8gYXBwZW5kIHBvc2l0aW9ucyAodGV4dCBjdXJsaWVzIG9yIGF0dHJpYnV0ZVxuICogY3VybGllcykuIEluIHN0cmljdCBtb2RlLCB0aGlzIGFsc28gY29ycmVzcG9uZHMgdG8gYXJnIGN1cmxpZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBBdHRyVmFsdWVTeW50YXhDb250ZXh0KG5vZGU6IEFTVHYxLk11c3RhY2hlU3RhdGVtZW50KTogQVNUdjIuRnJlZVZhclJlc29sdXRpb24ge1xuICBsZXQgaXNTaW1wbGUgPSBpc1NpbXBsZUNhbGxlZShub2RlKTtcbiAgbGV0IGlzSW52b2tlID0gaXNJbnZva2VOb2RlKG5vZGUpO1xuXG4gIGlmIChpc1NpbXBsZSkge1xuICAgIHJldHVybiBpc0ludm9rZVxuICAgICAgPyBBU1R2Mi5Mb29zZU1vZGVSZXNvbHV0aW9uLm5hbWVzcGFjZWQoQVNUdjIuRnJlZVZhck5hbWVzcGFjZS5IZWxwZXIpXG4gICAgICA6IEFTVHYyLkxvb3NlTW9kZVJlc29sdXRpb24uYXR0cigpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpc0ludm9rZSA/IEFTVHYyLlNUUklDVF9SRVNPTFVUSU9OIDogQVNUdjIuTG9vc2VNb2RlUmVzb2x1dGlvbi5mYWxsYmFjaygpO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBjb3JyZXNwb25kcyB0byBhcHBlbmQgcG9zaXRpb25zICh0ZXh0IGN1cmxpZXMgb3IgYXR0cmlidXRlXG4gKiBjdXJsaWVzKS4gSW4gc3RyaWN0IG1vZGUsIHRoaXMgYWxzbyBjb3JyZXNwb25kcyB0byBhcmcgY3VybGllcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEFwcGVuZFN5bnRheENvbnRleHQobm9kZTogQVNUdjEuTXVzdGFjaGVTdGF0ZW1lbnQpOiBBU1R2Mi5GcmVlVmFyUmVzb2x1dGlvbiB7XG4gIGxldCBpc1NpbXBsZSA9IGlzU2ltcGxlQ2FsbGVlKG5vZGUpO1xuICBsZXQgaXNJbnZva2UgPSBpc0ludm9rZU5vZGUobm9kZSk7XG4gIGxldCB0cnVzdGluZyA9IG5vZGUudHJ1c3Rpbmc7XG5cbiAgaWYgKGlzU2ltcGxlKSB7XG4gICAgcmV0dXJuIHRydXN0aW5nXG4gICAgICA/IEFTVHYyLkxvb3NlTW9kZVJlc29sdXRpb24udHJ1c3RpbmdBcHBlbmQoeyBpbnZva2U6IGlzSW52b2tlIH0pXG4gICAgICA6IEFTVHYyLkxvb3NlTW9kZVJlc29sdXRpb24uYXBwZW5kKHsgaW52b2tlOiBpc0ludm9rZSB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaXNJbnZva2UgPyBBU1R2Mi5TVFJJQ1RfUkVTT0xVVElPTiA6IEFTVHYyLkxvb3NlTW9kZVJlc29sdXRpb24uZmFsbGJhY2soKTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBSZXNvbHV0aW9uPFAgZXh0ZW5kcyBBc3RDYWxsUGFydHMgfCBBU1R2MS5QYXRoRXhwcmVzc2lvbj4gPSAoXG4gIGNhbGw6IFBcbikgPT4gQVNUdjIuRnJlZVZhclJlc29sdXRpb24gfCBudWxsO1xuXG4vLyBVVElMSVRJRVNcblxuLyoqXG4gKiBBIGNhbGwgbm9kZSBoYXMgYSBzaW1wbGUgY2FsbGVlIGlmIGl0cyBoZWFkIGlzOlxuICpcbiAqIC0gYSBgUGF0aEV4cHJlc3Npb25gXG4gKiAtIHRoZSBgUGF0aEV4cHJlc3Npb25gJ3MgaGVhZCBpcyBhIGBWYXJIZWFkYFxuICogLSBpdCBoYXMgbm8gdGFpbFxuICpcbiAqIFNpbXBsZSBoZWFkczpcbiAqXG4gKiBgYGBcbiAqIHt7eH19XG4gKiB7e3ggeX19XG4gKiBgYGBcbiAqXG4gKiBOb3Qgc2ltcGxlIGhlYWRzOlxuICpcbiAqIGBgYFxuICoge3t4Lnl9fVxuICoge3t4Lnkgen19XG4gKiB7e0B4fX1cbiAqIHt7QHggYX19XG4gKiB7e3RoaXN9fVxuICoge3t0aGlzIGF9fVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGlzU2ltcGxlQ2FsbGVlKG5vZGU6IEFzdENhbGxQYXJ0cyk6IGJvb2xlYW4ge1xuICBsZXQgcGF0aCA9IG5vZGUucGF0aDtcblxuICByZXR1cm4gaXNTaW1wbGVQYXRoKHBhdGgpO1xufVxuXG5mdW5jdGlvbiBpc1NpbXBsZVBhdGgobm9kZTogQVNUdjEuRXhwcmVzc2lvbik6IGJvb2xlYW4ge1xuICBpZiAobm9kZS50eXBlID09PSAnUGF0aEV4cHJlc3Npb24nICYmIG5vZGUuaGVhZC50eXBlID09PSAnVmFySGVhZCcpIHtcbiAgICByZXR1cm4gbm9kZS50YWlsLmxlbmd0aCA9PT0gMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgY2FsbCBleHByZXNzaW9uIGhhcyBhdCBsZWFzdCBvbmUgYXJndW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGlzSW52b2tlTm9kZShub2RlOiBBc3RDYWxsUGFydHMpOiBib29sZWFuIHtcbiAgcmV0dXJuIG5vZGUucGFyYW1zLmxlbmd0aCA+IDAgfHwgbm9kZS5oYXNoLnBhaXJzLmxlbmd0aCA+IDA7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9