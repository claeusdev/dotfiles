import { SourceSlice } from '../../source/slice';
import { node } from './node';
/**
 * Corresponds to a Handlebars literal.
 *
 * @see {LiteralValue}
 */

export class LiteralExpression extends node('Literal').fields() {
  toSlice() {
    return new SourceSlice({
      loc: this.loc,
      chars: this.value
    });
  }

}
/**
 * Returns true if an input {@see ExpressionNode} is a literal.
 */

export function isLiteral(node, kind) {
  if (node.type === 'Literal') {
    if (kind === undefined) {
      return true;
    } else if (kind === 'null') {
      return node.value === null;
    } else {
      return typeof node.value === kind;
    }
  } else {
    return false;
  }
}
/**
 * Corresponds to a path in expression position.
 *
 * ```hbs
 * this
 * this.x
 * @x
 * @x.y
 * x
 * x.y
 * ```
 */

export class PathExpression extends node('Path').fields() {}
/**
 * Corresponds to a parenthesized call expression.
 *
 * ```hbs
 * (x)
 * (x.y)
 * (x y)
 * (x.y z)
 * ```
 */

export class CallExpression extends node('Call').fields() {}
/**
 * Corresponds to an interpolation in attribute value position.
 *
 * ```hbs
 * <a href="{{url}}.html"
 * ```
 */

export class InterpolateExpression extends node('Interpolate').fields() {}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdjItYS9vYmplY3RzL2V4cHIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyxXQUFULFFBQTRCLG9CQUE1QjtBQUVBLFNBQVMsSUFBVCxRQUFxQixRQUFyQjtBQWtCQTs7Ozs7O0FBS0EsT0FBTSxNQUFPLGlCQUFQLFNBQWlDLElBQUksQ0FBQyxTQUFELENBQUosQ0FBZ0IsTUFBaEIsRUFBakMsQ0FBa0Y7QUFDdEYsRUFBQSxPQUFPLEdBQUE7QUFDTCxXQUFPLElBQUksV0FBSixDQUFnQjtBQUFFLE1BQUEsR0FBRyxFQUFFLEtBQUssR0FBWjtBQUFpQixNQUFBLEtBQUssRUFBRSxLQUFLO0FBQTdCLEtBQWhCLENBQVA7QUFDRDs7QUFIcUY7QUFReEY7Ozs7QUFHQSxPQUFNLFNBQVUsU0FBVixDQUNKLElBREksRUFFSixJQUZJLEVBRUk7QUFFUixNQUFJLElBQUksQ0FBQyxJQUFMLEtBQWMsU0FBbEIsRUFBNkI7QUFDM0IsUUFBSSxJQUFJLEtBQUssU0FBYixFQUF3QjtBQUN0QixhQUFPLElBQVA7QUFDRCxLQUZELE1BRU8sSUFBSSxJQUFJLEtBQUssTUFBYixFQUFxQjtBQUMxQixhQUFPLElBQUksQ0FBQyxLQUFMLEtBQWUsSUFBdEI7QUFDRCxLQUZNLE1BRUE7QUFDTCxhQUFPLE9BQU8sSUFBSSxDQUFDLEtBQVosS0FBc0IsSUFBN0I7QUFDRDtBQUNGLEdBUkQsTUFRTztBQUNMLFdBQU8sS0FBUDtBQUNEO0FBQ0Y7QUFFRDs7Ozs7Ozs7Ozs7OztBQVlBLE9BQU0sTUFBTyxjQUFQLFNBQThCLElBQUksQ0FBQyxNQUFELENBQUosQ0FBYSxNQUFiLEVBQTlCLENBR0Y7QUFFSjs7Ozs7Ozs7Ozs7QUFVQSxPQUFNLE1BQU8sY0FBUCxTQUE4QixJQUFJLENBQUMsTUFBRCxDQUFKLENBQWEsTUFBYixFQUE5QixDQUErRDtBQUVyRTs7Ozs7Ozs7QUFPQSxPQUFNLE1BQU8scUJBQVAsU0FBcUMsSUFBSSxDQUFDLGFBQUQsQ0FBSixDQUFvQixNQUFwQixFQUFyQyxDQUVGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJlc2VudEFycmF5IH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5cbmltcG9ydCB7IFNvdXJjZVNsaWNlIH0gZnJvbSAnLi4vLi4vc291cmNlL3NsaWNlJztcbmltcG9ydCB0eXBlIHsgQ2FsbEZpZWxkcyB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBub2RlIH0gZnJvbSAnLi9ub2RlJztcbmltcG9ydCB0eXBlIHsgVmFyaWFibGVSZWZlcmVuY2UgfSBmcm9tICcuL3JlZnMnO1xuXG4vKipcbiAqIEEgSGFuZGxlYmFycyBsaXRlcmFsLlxuICpcbiAqIHtAbGluayBodHRwczovL2hhbmRsZWJhcnNqcy5jb20vZ3VpZGUvZXhwcmVzc2lvbnMuaHRtbCNsaXRlcmFsLXNlZ21lbnRzfVxuICovXG5leHBvcnQgdHlwZSBMaXRlcmFsVmFsdWUgPSBzdHJpbmcgfCBib29sZWFuIHwgbnVtYmVyIHwgdW5kZWZpbmVkIHwgbnVsbDtcblxuZXhwb3J0IGludGVyZmFjZSBMaXRlcmFsVHlwZXMge1xuICBzdHJpbmc6IHN0cmluZztcbiAgYm9vbGVhbjogYm9vbGVhbjtcbiAgbnVtYmVyOiBudW1iZXI7XG4gIG51bGw6IG51bGw7XG4gIHVuZGVmaW5lZDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENvcnJlc3BvbmRzIHRvIGEgSGFuZGxlYmFycyBsaXRlcmFsLlxuICpcbiAqIEBzZWUge0xpdGVyYWxWYWx1ZX1cbiAqL1xuZXhwb3J0IGNsYXNzIExpdGVyYWxFeHByZXNzaW9uIGV4dGVuZHMgbm9kZSgnTGl0ZXJhbCcpLmZpZWxkczx7IHZhbHVlOiBMaXRlcmFsVmFsdWUgfT4oKSB7XG4gIHRvU2xpY2UodGhpczogU3RyaW5nTGl0ZXJhbCk6IFNvdXJjZVNsaWNlIHtcbiAgICByZXR1cm4gbmV3IFNvdXJjZVNsaWNlKHsgbG9jOiB0aGlzLmxvYywgY2hhcnM6IHRoaXMudmFsdWUgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgU3RyaW5nTGl0ZXJhbCA9IExpdGVyYWxFeHByZXNzaW9uICYgeyB2YWx1ZTogc3RyaW5nIH07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGFuIGlucHV0IHtAc2VlIEV4cHJlc3Npb25Ob2RlfSBpcyBhIGxpdGVyYWwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0xpdGVyYWw8SyBleHRlbmRzIGtleW9mIExpdGVyYWxUeXBlcyA9IGtleW9mIExpdGVyYWxUeXBlcz4oXG4gIG5vZGU6IEV4cHJlc3Npb25Ob2RlLFxuICBraW5kPzogS1xuKTogbm9kZSBpcyBTdHJpbmdMaXRlcmFsIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gJ0xpdGVyYWwnKSB7XG4gICAgaWYgKGtpbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChraW5kID09PSAnbnVsbCcpIHtcbiAgICAgIHJldHVybiBub2RlLnZhbHVlID09PSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG5vZGUudmFsdWUgPT09IGtpbmQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIENvcnJlc3BvbmRzIHRvIGEgcGF0aCBpbiBleHByZXNzaW9uIHBvc2l0aW9uLlxuICpcbiAqIGBgYGhic1xuICogdGhpc1xuICogdGhpcy54XG4gKiBAeFxuICogQHgueVxuICogeFxuICogeC55XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIFBhdGhFeHByZXNzaW9uIGV4dGVuZHMgbm9kZSgnUGF0aCcpLmZpZWxkczx7XG4gIHJlZjogVmFyaWFibGVSZWZlcmVuY2U7XG4gIHRhaWw6IHJlYWRvbmx5IFNvdXJjZVNsaWNlW107XG59PigpIHt9XG5cbi8qKlxuICogQ29ycmVzcG9uZHMgdG8gYSBwYXJlbnRoZXNpemVkIGNhbGwgZXhwcmVzc2lvbi5cbiAqXG4gKiBgYGBoYnNcbiAqICh4KVxuICogKHgueSlcbiAqICh4IHkpXG4gKiAoeC55IHopXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIENhbGxFeHByZXNzaW9uIGV4dGVuZHMgbm9kZSgnQ2FsbCcpLmZpZWxkczxDYWxsRmllbGRzPigpIHt9XG5cbi8qKlxuICogQ29ycmVzcG9uZHMgdG8gYW4gaW50ZXJwb2xhdGlvbiBpbiBhdHRyaWJ1dGUgdmFsdWUgcG9zaXRpb24uXG4gKlxuICogYGBgaGJzXG4gKiA8YSBocmVmPVwie3t1cmx9fS5odG1sXCJcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgSW50ZXJwb2xhdGVFeHByZXNzaW9uIGV4dGVuZHMgbm9kZSgnSW50ZXJwb2xhdGUnKS5maWVsZHM8e1xuICBwYXJ0czogUHJlc2VudEFycmF5PEV4cHJlc3Npb25Ob2RlPjtcbn0+KCkge31cblxuZXhwb3J0IHR5cGUgRXhwcmVzc2lvbk5vZGUgPVxuICB8IExpdGVyYWxFeHByZXNzaW9uXG4gIHwgUGF0aEV4cHJlc3Npb25cbiAgfCBDYWxsRXhwcmVzc2lvblxuICB8IEludGVycG9sYXRlRXhwcmVzc2lvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=