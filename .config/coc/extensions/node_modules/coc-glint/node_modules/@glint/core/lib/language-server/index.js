"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_1 = require("vscode-languageserver/node");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const config_1 = require("@glint/config");
const load_typescript_1 = require("../common/load-typescript");
const glint_language_server_1 = __importDefault(require("./glint-language-server"));
const util_1 = require("./util");
const binding_1 = require("./binding");
const document_cache_1 = __importDefault(require("../common/document-cache"));
const transform_manager_1 = __importDefault(require("../common/transform-manager"));
const connection = (0, node_1.createConnection)(process.stdin, process.stdout);
const openDocuments = new node_1.TextDocuments(vscode_languageserver_textdocument_1.TextDocument);
const glintConfig = (0, config_1.findConfig)(process.cwd());
if (glintConfig) {
    const ts = (0, load_typescript_1.loadTypeScript)();
    const documentCache = new document_cache_1.default(ts, glintConfig);
    const transformManager = new transform_manager_1.default(ts, glintConfig, documentCache);
    const tsConfig = (0, util_1.parseConfigFile)(ts, transformManager);
    const languageServer = new glint_language_server_1.default(ts, glintConfig, documentCache, transformManager, tsConfig);
    (0, binding_1.bindLanguageServer)({ languageServer, openDocuments, connection });
    openDocuments.listen(connection);
    connection.listen();
}
else {
    connection.console.info(`No Glint config found from ${process.cwd()}`);
}
//# sourceMappingURL=index.js.map