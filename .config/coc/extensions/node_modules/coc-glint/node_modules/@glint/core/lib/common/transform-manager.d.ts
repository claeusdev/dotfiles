import { Diagnostic } from '@glint/transform';
import type ts from 'typescript';
import { GlintConfig } from '@glint/config';
import DocumentCache from './document-cache';
export default class TransformManager {
    private ts;
    private glintConfig;
    private documents;
    private transformCache;
    constructor(ts: typeof import('typescript'), glintConfig: GlintConfig, documents?: DocumentCache);
    getTransformDiagnostics(fileName?: string): Array<Diagnostic>;
    rewriteDiagnostics(diagnostics: ReadonlyArray<Diagnostic>, fileName?: string): ReadonlyArray<ts.Diagnostic>;
    getTransformedRange(originalFileName: string, originalStart: number, originalEnd: number): {
        transformedFileName: string;
        transformedStart: number;
        transformedEnd: number;
    };
    getOriginalRange(transformedFileName: string, transformedStart: number, transformedEnd: number): {
        originalFileName: string;
        originalStart: number;
        originalEnd: number;
    };
    getTransformedOffset(originalFileName: string, originalOffset: number): {
        transformedFileName: string;
        transformedOffset: number;
    };
    watchTransformedFile: (path: string, originalCallback: ts.FileWatcherCallback, pollingInterval?: number | undefined, options?: ts.WatchOptions | undefined) => ts.FileWatcher;
    watchDirectory: (path: string, originalCallback: ts.DirectoryWatcherCallback, recursive?: boolean | undefined, options?: ts.WatchOptions | undefined) => ts.FileWatcher;
    readDirectory: (rootDir: string, extensions: ReadonlyArray<string>, excludes: ReadonlyArray<string> | undefined, includes: ReadonlyArray<string>, depth?: number | undefined) => Array<string>;
    fileExists: (filename: string) => boolean;
    readTransformedFile: (filename: string, encoding?: string | undefined) => string | undefined;
    private getExpectErrorDirectives;
    private rewriteDiagnostic;
    private findTransformInfoForOriginalFile;
    private getTransformInfo;
    private buildTransformDiagnostics;
}
