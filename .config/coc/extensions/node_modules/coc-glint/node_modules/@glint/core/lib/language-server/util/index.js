"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseConfigFile = exports.normalizeFilePath = exports.filePathToUri = exports.uriToFilePath = exports.scriptElementKindToCompletionItemKind = exports.offsetToPosition = exports.positionToOffset = void 0;
var position_1 = require("./position");
Object.defineProperty(exports, "positionToOffset", { enumerable: true, get: function () { return position_1.positionToOffset; } });
Object.defineProperty(exports, "offsetToPosition", { enumerable: true, get: function () { return position_1.offsetToPosition; } });
var protocol_1 = require("./protocol");
Object.defineProperty(exports, "scriptElementKindToCompletionItemKind", { enumerable: true, get: function () { return protocol_1.scriptElementKindToCompletionItemKind; } });
const vscode_uri_1 = require("vscode-uri");
const path_1 = __importDefault(require("path"));
function uriToFilePath(uri) {
    return vscode_uri_1.URI.parse(uri).fsPath.replace(/\\/g, '/');
}
exports.uriToFilePath = uriToFilePath;
function filePathToUri(filePath) {
    return vscode_uri_1.URI.file(filePath).toString();
}
exports.filePathToUri = filePathToUri;
function normalizeFilePath(filePath) {
    return uriToFilePath(filePathToUri(filePath));
}
exports.normalizeFilePath = normalizeFilePath;
function parseConfigFile(ts, transformManager, searchFrom = process.cwd()) {
    let configPath = findNearestConfigFile(ts, searchFrom);
    let config = ts.readConfigFile(configPath, ts.sys.readFile).config;
    let root = configPath ? path_1.default.dirname(configPath) : searchFrom;
    let host = {
        ...ts.sys,
        readDirectory: transformManager.readDirectory,
    };
    // passing through the configPath allows us to support jsconfig as well as tsconfig
    return ts.parseJsonConfigFileContent(config, host, root, undefined, configPath);
}
exports.parseConfigFile = parseConfigFile;
function findNearestConfigFile(ts, searchFrom) {
    // Assume that the longest path is the most relevant one in the case that
    // multiple config files exist at or above our current directory.
    let configCandidates = [
        ts.findConfigFile(searchFrom, ts.sys.fileExists, 'tsconfig.json'),
        ts.findConfigFile(searchFrom, ts.sys.fileExists, 'jsconfig.json'),
        'tsconfig.json',
    ]
        .filter((path) => typeof path === 'string')
        .sort((a, b) => b.length - a.length);
    return configCandidates[0];
}
//# sourceMappingURL=index.js.map