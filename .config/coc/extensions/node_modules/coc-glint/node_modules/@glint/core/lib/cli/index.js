"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const config_1 = require("@glint/config");
const perform_watch_1 = require("./perform-watch");
const perform_check_1 = require("./perform-check");
const options_1 = require("./options");
const load_typescript_1 = require("../common/load-typescript");
const { argv } = yargs_1.default
    .scriptName('glint')
    .usage('$0 [options]')
    .option('project', {
    alias: 'p',
    string: true,
    description: 'The path to the tsconfig file to use',
})
    .option('watch', {
    alias: 'w',
    boolean: true,
    description: 'Whether to perform an ongoing watched build',
})
    .option('declaration', {
    alias: 'd',
    boolean: true,
    description: 'Whether to emit declaration files',
})
    .option('debug-intermediate-representation', {
    boolean: false,
    description: `When true, writes out a Glint's internal intermediate representation of each file within a GLINT_DEBUG subdirectory of the current working directory. This is intended for debugging Glint itself.`,
})
    .wrap(100)
    .strict();
const ts = (0, load_typescript_1.loadTypeScript)();
const glintConfig = (0, config_1.loadConfig)(process.cwd());
const tsconfigPath = (_a = argv.project) !== null && _a !== void 0 ? _a : ts.findConfigFile('.', ts.sys.fileExists);
const optionsToExtend = (0, options_1.determineOptionsToExtend)(argv);
if (argv['debug-intermediate-representation']) {
    const fs = require('fs');
    const path = require('path');
    globalThis.GLINT_DEBUG_IR = function (filename, content) {
        let target = path.join('GLINT_DEBUG', path.relative(glintConfig.rootDir, filename));
        fs.mkdirSync(path.dirname(target), { recursive: true });
        fs.writeFileSync(target, content);
    };
}
if (argv.watch) {
    (0, perform_watch_1.performWatch)(ts, glintConfig, tsconfigPath, optionsToExtend);
}
else {
    (0, perform_check_1.performCheck)(ts, glintConfig, tsconfigPath, optionsToExtend);
}
//# sourceMappingURL=index.js.map