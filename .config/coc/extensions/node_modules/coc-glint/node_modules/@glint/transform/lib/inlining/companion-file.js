"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateCompanionTemplateSpans = void 0;
const path_1 = __importDefault(require("path"));
const _1 = require(".");
const mapping_tree_1 = __importStar(require("../mapping-tree"));
const template_to_typescript_1 = require("../template-to-typescript");
function calculateCompanionTemplateSpans(ts, ast, script, template, environment) {
    let errors = [];
    let directives = [];
    let partialSpans = [];
    let typesPath = environment.getTypesForStandaloneTemplate();
    if (!typesPath) {
        errors.push({
            source: template,
            location: { start: 0, end: template.contents.length },
            message: `No active Glint environment (${environment.names.join(', ')}) supports standalone template files`,
        });
        return { errors, directives, partialSpans };
    }
    let useJsDoc = environment.isUntypedScript(script.filename);
    let targetNode = findCompanionTemplateTarget(ts, ast);
    if (targetNode && ts.isClassLike(targetNode)) {
        let { className, contextType, typeParams } = (0, _1.getContainingTypeInfo)(ts, targetNode);
        if (!className) {
            errors.push({
                source: script,
                location: { start: targetNode.getStart(), end: targetNode.getEnd() },
                message: 'Classes with an associated template must have a name',
            });
        }
        let rewriteResult = (0, template_to_typescript_1.templateToTypescript)(template.contents, {
            typesPath,
            contextType,
            typeParams,
            useJsDoc,
        });
        // This allows us to avoid issues with `noImplicitOverride` for subclassed components,
        // but is ultimately kind of a kludge. TS 4.4 will support class static blocks, at
        // which point we won't need to invent a field at all and we can remove this.
        let standaloneTemplateField = `'~template:${className}'`;
        pushTransformedTemplate(rewriteResult, {
            insertionPoint: targetNode.getEnd() - 1,
            prefix: `protected static ${standaloneTemplateField} = `,
            suffix: ';\n',
        });
    }
    else {
        let contextType;
        if (targetNode) {
            let moduleName = path_1.default.basename(script.filename, path_1.default.extname(script.filename));
            contextType = `typeof import('./${moduleName}').default`;
        }
        let rewriteResult = (0, template_to_typescript_1.templateToTypescript)(template.contents, {
            typesPath,
            contextType,
            useJsDoc,
        });
        pushTransformedTemplate(rewriteResult, {
            insertionPoint: script.contents.length,
            prefix: '\n',
            suffix: ';\n',
        });
    }
    return { errors, directives, partialSpans };
    function pushTransformedTemplate(transformedTemplate, options) {
        errors.push(...transformedTemplate.errors.map(({ message, location }) => ({
            message,
            location: location !== null && location !== void 0 ? location : { start: 0, end: template.contents.length },
            source: template,
        })));
        if (transformedTemplate.result) {
            directives.push(...transformedTemplate.result.directives.map(({ kind, location, areaOfEffect }) => ({
                kind,
                location,
                areaOfEffect,
                source: template,
            })));
            partialSpans.push({
                originalFile: template,
                originalStart: 0,
                originalLength: 0,
                insertionPoint: options.insertionPoint,
                transformedSource: options.prefix,
            }, {
                originalFile: template,
                originalStart: 0,
                originalLength: template.contents.length,
                insertionPoint: options.insertionPoint,
                transformedSource: transformedTemplate.result.code,
                mapping: transformedTemplate.result.mapping,
            }, {
                originalFile: template,
                originalStart: template.contents.length - 1,
                originalLength: 0,
                insertionPoint: options.insertionPoint,
                transformedSource: options.suffix,
            });
        }
        else {
            let mapping = new mapping_tree_1.default({ start: 0, end: 0 }, { start: 0, end: template.contents.length }, [], new mapping_tree_1.ParseError());
            partialSpans.push({
                originalFile: template,
                originalStart: 0,
                originalLength: template.contents.length,
                insertionPoint: options.insertionPoint,
                transformedSource: '',
                mapping,
            });
        }
    }
}
exports.calculateCompanionTemplateSpans = calculateCompanionTemplateSpans;
function findCompanionTemplateTarget(ts, sourceFile) {
    let classes = Object.create(null);
    for (let statement of sourceFile.statements) {
        if (ts.isClassLike(statement)) {
            let mods = statement.modifiers;
            if ((mods === null || mods === void 0 ? void 0 : mods.some((mod) => mod.kind === ts.SyntaxKind.DefaultKeyword)) &&
                mods.some((mod) => mod.kind === ts.SyntaxKind.ExportKeyword)) {
                return statement;
            }
            if (statement.name) {
                classes[statement.name.text] = statement;
            }
        }
    }
    for (let statement of sourceFile.statements) {
        if (ts.isExportAssignment(statement) && !statement.isExportEquals) {
            if (ts.isIdentifier(statement.expression) && statement.expression.text in classes) {
                return classes[statement.expression.text];
            }
            else {
                return statement.expression;
            }
        }
    }
    return null;
}
//# sourceMappingURL=companion-file.js.map