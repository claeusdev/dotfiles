"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findConfig = exports.loadConfig = exports.GlintEnvironment = exports.GlintConfig = void 0;
const path_1 = __importDefault(require("path"));
const cosmiconfig_1 = require("cosmiconfig");
const config_1 = require("./config");
const silent_error_1 = __importDefault(require("silent-error"));
var config_2 = require("./config");
Object.defineProperty(exports, "GlintConfig", { enumerable: true, get: function () { return config_2.GlintConfig; } });
var environment_1 = require("./environment");
Object.defineProperty(exports, "GlintEnvironment", { enumerable: true, get: function () { return environment_1.GlintEnvironment; } });
/**
 * Loads glint configuration, starting from the given directory
 * and searching upwards and raising an error if no configuration
 * is found.
 */
function loadConfig(from) {
    let config = findConfig(from);
    if (!config) {
        throw new silent_error_1.default(`Unable to find Glint configuration for ${from}`);
    }
    return config;
}
exports.loadConfig = loadConfig;
/**
 * Loads glint configuration, starting from the given directory
 * and searching upwards. Returns `null` if no configuration is
 * found.
 */
function findConfig(from) {
    let result = (0, cosmiconfig_1.cosmiconfigSync)('glint').search(from);
    if (result) {
        return new config_1.GlintConfig(path_1.default.dirname(result.filepath), result.config);
    }
    return null;
}
exports.findConfig = findConfig;
//# sourceMappingURL=index.js.map