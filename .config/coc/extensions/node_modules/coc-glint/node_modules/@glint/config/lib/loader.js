"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigLoader = void 0;
const cosmiconfig_1 = require("cosmiconfig");
const path_1 = __importDefault(require("path"));
const config_1 = require("./config");
/**
 *
 */
class ConfigLoader {
    constructor() {
        this.cosmiconfig = (0, cosmiconfig_1.cosmiconfigSync)('glint');
        this.configPaths = new Map();
        this.configForFileMapping = new Map();
    }
    /**
     * Loads glint configuration, starting from the given directory
     * and searching upwards. Returns `null` if no configuration is
     * found.
     */
    configForFile(file) {
        var _a;
        if (this.configForFileMapping.has(file)) {
            // If we already know about this specific file, we're done
            let config = this.configForFileMapping.get(file);
            if (config)
                return config;
        }
        // If one of our already-loaded configs applies to this file, note that
        for (let candidate of this.configPaths.values()) {
            if (candidate.includesFile(file)) {
                this.configForFileMapping.set(file, candidate);
                return candidate;
            }
        }
        // Otherwise, time to go hunting
        let config = null;
        let result = this.cosmiconfig.search(file);
        if (result) {
            config = (_a = this.configPaths.get(result.filepath)) !== null && _a !== void 0 ? _a : null;
            if (!config) {
                config = new config_1.GlintConfig(path_1.default.dirname(result.filepath), result.config);
                this.configPaths.set(result.filepath, config);
            }
        }
        this.configForFileMapping.set(file, config);
        return config;
    }
    clearCache() {
        this.cosmiconfig.clearCaches();
        this.configPaths.clear();
        this.configForFileMapping.clear();
    }
}
exports.ConfigLoader = ConfigLoader;
//# sourceMappingURL=loader.js.map