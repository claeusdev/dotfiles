"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const resolve_1 = require("resolve");
const url_1 = require("url");
module.exports = {
    activate(context) {
        var _a;
        (_a = coc_nvim_1.workspace.workspaceFolders) === null || _a === void 0 ? void 0 : _a.forEach((folder) => addWorkspaceFolder(folder, context));
        coc_nvim_1.workspace.onDidChangeWorkspaceFolders(({ added, removed }) => {
            added.forEach((folder) => addWorkspaceFolder(folder, context));
            removed.forEach((folder) => removeWorkspaceFolder(folder, context));
        });
    },
};
const outputChannel = coc_nvim_1.window.createOutputChannel('Glint Language Server');
const clients = new Map();
let debugServerPortNumber = 6009;
function addWorkspaceFolder(workspaceFolder, context) {
    var _a, _b, _c;
    let folderPath = (0, url_1.fileURLToPath)(workspaceFolder.uri);
    if (clients.has(folderPath))
        return;
    let executable = {
        command: 'node',
        args: [(0, resolve_1.sync)('@glint/core/bin/glint-language-server', { basedir: folderPath })],
    };
    // Runs the server in Node's Inspector mode so VS Code can attach to the server for debugging
    let debugExecutable = {
        ...executable,
        args: ['--nolazy', `--inspect=${debugServerPortNumber++}`, ...executable.args],
    };
    let serverOptions = {
        run: executable,
        debug: debugExecutable,
    };
    // TODO: compile to ESM and build my own require
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    let { loadConfig } = require((0, resolve_1.sync)('@glint/config', { basedir: folderPath }));
    let config = loadConfig(folderPath);
    // Older versions of Glint won't have `getConfiguredFileExtensions`, so fallback to safe defaults.
    let extensions = (_c = (_b = (_a = config.environment).getConfiguredFileExtensions) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : ['.js', '.ts', '.hbs'];
    let filePattern = `${folderPath}/**/*{${extensions.join(',')}}`;
    let clientOptions = {
        workspaceFolder,
        outputChannel,
        documentSelector: [{ scheme: 'file', pattern: filePattern }],
        synchronize: {
            fileEvents: coc_nvim_1.workspace.createFileSystemWatcher(filePattern),
        },
    };
    const client = new coc_nvim_1.LanguageClient('glint', 'Glint', serverOptions, clientOptions);
    const disposable = client.start();
    context.subscriptions.push(disposable);
    clients.set(folderPath, disposable);
}
function removeWorkspaceFolder(workspaceFolder, context) {
    let folderPath = (0, url_1.fileURLToPath)(workspaceFolder.uri);
    let client = clients.get(folderPath);
    if (client) {
        clients.delete(folderPath);
        context.subscriptions.splice(context.subscriptions.indexOf(client), 1);
        client.dispose();
    }
}
//# sourceMappingURL=extension.js.map