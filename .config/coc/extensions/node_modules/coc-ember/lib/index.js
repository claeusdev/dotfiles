"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.COMMANDS = void 0;
exports.activate = activate;

var _coc = require("coc.nvim");

var _fs = require("fs");

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const languageServerPath = ['node_modules', '@lifeart', 'ember-language-server'];
const serverBin = ['lib', 'start-server.js'];
const addonPath = ['lib', 'addons']; // https://github.com/lifeart/vscode-ember/blob/master/src/constants.ts

const COMMANDS = {
  OPEN_RELATED_FILE: 'els.openRelatedFile',
  RELOAD_PROJECT: 'els.reloadProject',
  SET_STATUS_BAR_TEXT: 'els.setStatusBarText',
  RUN_IN_EMBER_CLI: 'els.runInEmberCLI',
  GET_USER_INPUT: 'els.getUserInput',
  EXECUTE_IN_EMBER_CLI: 'els.executeInEmberCLI',
  SET_CONFIG: 'els.setConfig',
  GET_RELATED_FILES: 'els.getRelatedFiles',
  GET_KIND_USAGES: 'els.getKindUsages'
};
exports.COMMANDS = COMMANDS;

async function activate(context) {
  try {
    await boot(context);
  } catch (e) {
    console.error(e);
    throw e;
  }
}

async function boot(context) {
  let config = getConfig();
  let isEnabled = config.get('enable', true);
  let isDebugging = config.get('debug', false);
  if (!isEnabled) return;
  let isEmberCli = await isEmberCliProject(); // Not really an error, but this is important information for the first phase of debugging.

  console.info('isEmberCli', isEmberCli);

  if (!isEmberCli) {
    return;
  }

  let client = await startLanguageServerClient(context, isDebugging);
  console.info('Configuring LanguageServerClient...');
  configureClient(client, context);
}

async function startLanguageServerClient(context, isDebugging = false) {
  let binPath = context.asAbsolutePath(_path.default.join(...languageServerPath, ...serverBin));
  console.info('UELS bin @', binPath);
  let debugOptions = isDebugging ? {
    execArgv: ['--nolazy', '--inspect=6004']
  } : {}; // If the extension is launched in debug mode then the debug
  // server options are used...
  // Otherwise the run options are used

  let serverOptions = {
    run: {
      module: binPath,
      transport: _coc.TransportKind.ipc
    },
    debug: {
      module: binPath,
      transport: _coc.TransportKind.ipc,
      options: debugOptions
    }
  };
  let clientOptions = buildClientOptions();
  let client = new _coc.LanguageClient('ember-language-server', 'Ember Language Server', serverOptions, clientOptions);
  context.subscriptions.push(_coc.services.registLanguageClient(client));
  await client.onReady();
  return client;
}

function configureClient(client, context) {
  let addonsRelPath = _path.default.join(...addonPath);

  let addonAbsolutePath = context.asAbsolutePath(addonsRelPath);
  console.info('UELS Addons @', addonAbsolutePath);
  let cocUELSConfig = insertLocalAddonPath(addonAbsolutePath);

  _coc.commands.executeCommand(COMMANDS.SET_CONFIG, cocUELSConfig);

  let {
    nvim
  } = _coc.workspace;
  context.subscriptions.push(_coc.commands.registerCommand(COMMANDS.GET_USER_INPUT, async (opts, callbackName, tail) => {
    try {
      console.info('Getting user input...');
      let name = await nvim.call('input', ['Component Name', '']);
      let document = tail.uri;
      console.info(callbackName, document, name, tail);
      await _coc.commands.executeCommand(callbackName, document, name, tail); // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (e) {
      _coc.window.showMessage(e.toString(), 'error');
    }
  }));
}

function insertLocalAddonPath(addonPath) {
  let config = getUELSConfig();
  let local = config.local || {};
  let addons = local.addons || [];
  let addonPaths = (0, _fs.readdirSync)(_path.default.join(addonPath, 'node_modules'), {
    withFileTypes: true
  }).filter(dirent => dirent.isDirectory()).map(dirent => dirent.name).filter(name => name.startsWith('els-')).map(addonName => _path.default.join(addonPath, 'node_modules', addonName));
  console.info(addonPaths);
  return _objectSpread(_objectSpread({}, config), {}, {
    local: _objectSpread(_objectSpread({}, local), {}, {
      addons: [...addons, ...addonPaths]
    })
  });
}

function getConfig() {
  let config = _coc.workspace.getConfiguration('ember');

  return config;
}

function getUELSConfig() {
  let config = _coc.workspace.getConfiguration('els');

  return config;
}

function buildClientOptions() {
  return {
    documentSelector: ['hbs', 'html.handlebars', 'handlebars', 'typescript', 'javascript', 'typescript.glimmer', 'javascript.glimmer'],
    initializationOptions: {
      editor: 'vscode' // hack

    },
    outputChannelName: 'ember-language-server'
  };
}

async function isEmberCliProject() {
  let emberCliBuildFile = await _coc.workspace.findUp('ember-cli-build.js');
  return !!emberCliBuildFile;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,